/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	// libraries
	window.$ = __webpack_require__(1);
	window.Variable = __webpack_require__(2);
	window.Updater = __webpack_require__(5);
	window.Velocity = __webpack_require__(6);
	window.Natural = __webpack_require__(7);
	window.NLP = __webpack_require__(113);
	//window.Wordnet = require("./node_modules/wordnet-db/index.js");
	__webpack_require__(192);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.0
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-01-08T20:02Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];

	var document = window.document;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "2.2.0",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},

		isPlainObject: function( obj ) {

			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			if ( obj.constructor &&
					!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}

			// If the function hasn't returned already, we're confident that
			// |obj| is a plain object, created by {} or constructed with new Object
			return true;
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;

			code = jQuery.trim( code );

			if ( code ) {

				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {

					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval

					indirect( code );
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {

							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add( function() {

						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	} );


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {

		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );

			} else {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		register: function( owner, initial ) {
			var value = initial || {};

			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;

			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				stored = this.get( owner, key );

				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key === undefined ) {
				this.register( owner );

			} else {

				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {

					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );

					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {

						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}

				i = name.length;

				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data, camelKey;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||

						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

					if ( data !== undefined ) {
						return data;
					}

					camelKey = jQuery.camelCase( key );

					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {

					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {

			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};



	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([\w:-]+)/ );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	function manipulationTarget( elem, content ) {
		if ( jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {

		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,

		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );


	var iframe,
		elemdisplay = {

			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */

	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			display = jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var documentElement = document.documentElement;



	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );
		}

		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {

				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {

				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =

					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

				documentElement.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {

			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );

				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					style[ name ] = value;
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;

				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		window.clearInterval( timerId );

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {

						// Set corresponding property to false
						elem[ propName ] = false;
					}

					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




	var rclass = /[\t\r\n\f]/g;

	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

						// Handle most common string cases
						ret.replace( rreturn, "" ) :

						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					// Support: IE<11
					// option.value not trimmed (#14858)
					return jQuery.trim( elem.value );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
								jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true

					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// But now, this "simulate" function is used only for events
					// for which stopPropagation() is noop, so there is no need for that anymore.
					//
					// For the compat branch though, guard for "click" and "submit"
					// events is still used, but was moved to jQuery.event.stopPropagation function
					// because `originalEvent` should point to the original event for the constancy
					// with other events and for more focused logic
				}
			);

			jQuery.event.trigger( e, null, elem );

			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// The jqXHR state
				state = 0,

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {

									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );

					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );


	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {

		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {

				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8+
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		context = context || ( support.createHTMLDocument ?
			document.implementation.createHTMLDocument( "" ) :
			document );

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( self, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				// Subtract offsetParent scroll positions
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ) -
					offsetParent.scrollTop();
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true ) -
					offsetParent.scrollLeft();
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}



	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
	}));


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(lang, Context){
		var deny = {};
		var noChange = {};
		var WeakMap = lang.WeakMap;
		// Invalidation types
		var ToChild = 1;
		var ToParent = 2;
		var RequestChange = 3;
		var nextId = 1;
		var propertyListenersMap = new WeakMap(null, 'propertyListenersMap');

		var CacheEntry = lang.compose(WeakMap, function() {
		},{
			_propertyChange: function(propertyName){
				this.variable._propertyChange(propertyName, contextFromCache(this));
			}
		});
		var listenerId = 1;
		function registerListener(value, listener){
			var listeners = propertyListenersMap.get(value);
			var id = listener.id || (listener.id = ('-' + listenerId++));
			if(listeners){
				if(listeners[id] === undefined){
					listeners[id] = listeners.push(listener) - 1;
				}
			}else{
				propertyListenersMap.set(value, listeners = [listener]);
				listeners[id] = 0;
				if(Variable.autoObserveObjects){
					observe(value);
				}
			}
		}
		function deregisterListener(value, listener){
			var listeners = propertyListenersMap.get(value);
			if(listeners){
				var index = listeners[listener.id];
				if(index > -1){
					listeners.splice(index, 1);
					delete listeners[listener.id];
				}
			}
		}
		function contextFromCache(cache){
			var context = new Context();
			do{
				context[cache.propertyName] = cache.key;
				cache = cache.parent;
			}while(cache);
			return context;
		}

		function Variable(value){
			this.value = value;
		}
		Variable.prototype = {
			constructor: Variable,
			valueOf: function(context){
				if(this.state){
					this.state = null;
				}
				return this.gotValue(this.getValue(context), context);
			},
			getValue: function(){
				return this.value;
			},
			gotValue: function(value, context){
				if(this.notifyingValue){
					this.notifyingValue.stopNotifies(this);
					this.notifyingValue = null;
				}
				var variable = this;
				return lang.when(value, function(value){
					if(value && value.notifies){
						if(variable.dependents){
							// the value is another variable, start receiving notifications
							// TODO: do cleanup of this notifies
							value.notifies(variable);
							variable.notifyingValue = value;
						}
						value = value.valueOf(context);
					}
					if(typeof value === 'object' && value && variable.dependents){
						// set up the listeners tracking
						registerListener(value, variable);
					}
					return value;
				});
			},
			property: function(key){
				var properties = this._properties || (this._properties = {});
				var propertyVariable = properties[key];
				if(!propertyVariable){
					// create the property variable
					propertyVariable = properties[key] = new Property(this, key);
				}
				return propertyVariable;
			},
			_propertyChange: function(propertyName, context, type){
				var property = propertyName && this._properties && this._properties[propertyName];
				if(property && type !== ToParent){
					property.invalidate(context, ToChild);
				}
				this.invalidate(context, ToParent);
			},
			eachKey: function(callback){
				for(var i in this._properties){
					callback(i);
				}
			},
			apply: function(instance, args){
				return new Call(this, args);
			},
			call: function(instance){
				return this.apply(instance, Array.prototype.slice.call(arguments, 1));
			},
			init: function(){
				if(this.notifyingValue){
					this.notifyingValue.notifies(this);
				}
			},
			cleanup: function(){
				var handles = this.handles;
				if(handles){
					for(var i = 0; i < handles.length; i++){
						handles[i].remove();
					}
				}
				this.handles = null;
				var value = this.value;
				if(value && typeof value === 'object'){
					deregisterListener(value, this);
				}
				var notifyingValue = this.notifyingValue;
				if(notifyingValue){
					this.notifyingValue.stopNotifies(this);
					this.notifyingValue = null;
					// TODO: move this into the caching class
					this.computedVariable = null;
				}
			},

			invalidate: function(context, type){
				if(this.state === 'invalidated'){
					return;
				}
				this.state = 'invalidated';
				var value = this.value;
				if(value && typeof value === 'object' && type !== ToParent){
					deregisterListener(value, this);
				}

				var dependents = this.dependents;
				if(dependents){
					// make a copy, in case they change
					dependents = dependents.slice(0);
					for(var i = 0, l = dependents.length; i < l; i++){
						try{
							var dependent = dependents[i];
							// skip notifying property dependents if we are headed up the parent chain
							if(type !== ToParent || dependent.parent !== this){
								dependent.invalidate(context, dependent.parent === this ? ToChild : undefined);
							}
						}catch(e){
							console.error(e, 'invalidating a variable');
						}
					}
				}
			},
			notifies: function(dependent){
				if(!dependent.invalidate){
					throw new Error('Invalid variable provided as notification receipient, a variable must have an invalidate method');
				}
				var dependents = this.dependents;
				if(!dependents){
					this.init();
					this.dependents = dependents = [];
				}
				var variable = this;
				dependents.push(dependent);
				return {
					remove: function(){
						variable.stopNotifies(dependent);
					}
				};
			},
			stopNotifies: function(dependent){
				var dependents = this.dependents;
				for(var i = 0; i < dependents.length; i++){
					if(dependents[i] === dependent){
						dependents.splice(i--, 1);
					}
				}
				if(dependents.length === 0){
					// clear the dependents so it will be reinitialized if it has
					// dependents again
					this.dependents = dependents = false;
					this.cleanup();
				}
			},
			put: function(value, context){
				var oldValue = this.getValue();
				if(oldValue === value){
					return noChange;
				}
				if(this.fixed &&
						// if it is set to fixed, we see we can put in the current variable
						oldValue && oldValue.put && // if we currently have a variable
						// and it is always fixed, or not a new variable
						(this.fixed == 'always' || !(value && value.notifies))){
					return oldValue.put(value);
				}
				this.setValue(value);
				this.invalidate(context);
			},
			get: function(key, context){
				var object = this.valueOf(context);
				return object && object[key];
			},
			set: function(key, value, context){
				// TODO: create an optimized route when the property doesn't exist yet
				this.property(key).put(value, context);
			},
			undefine: function(key, context){
				this.set(key, undefined, context);
			},
			setValue: function(value){
				this.value = value;
			},
			subscribe: function(listener){
				// baconjs compatible
				var variable = this;
				// it is important to make sure you register for notifications before getting the value
				var handle = this.notifies({
					invalidate: function(){
						listener({
							value: function(){
								return variable.valueOf();
							}
						});
					}
				});
				var initialValue = this.valueOf();
				if(initialValue !== undefined){
					listener({
						value: function(){
							return initialValue;
						}
					});
				}
				return handle;
			},
			onValue: function(listener){
				return this.subscribe(function(event){
					lang.when(event.value(), function(value){
						listener(value);
					});
				});
			},
			forEach: function(callback, context){
				// iterate through current value of variable
				return lang.when(this.valueOf(context), function(value){
					if(value && value.forEach){
						value.forEach(callback);
					}else{
						for(var i in value){
							callback(value[i]);
						}
					}
				});
			},
			each: function(callback){
				// returns a new mapped variable
				// TODO: support events on array (using dstore api)
				return this.map(function(array){
					return array.map(callback);
				});
			},
			newElement: function(){
				return lang.when(this.valueOf(), function(value){
					return value && value.newElement && value.newElement();
				});
			},
			map: function (operator) {
				// TODO: create a more efficient map, we don't really need a full variable here
				if(!operator){
					throw new Error('No function provided to map');
				}
				return new Variable(operator).apply(null, [this]);
			},
			get withDescendants(){
				// deprecated
				return this;
			},
			get schema(){
				var schema = new Schema(this);
				Object.defineProperty(this, 'schema', {
					value: schema
				});
				return schema;
			},
			get validate(){
				var schema = this.schema;
				var validate = new Validating(this, schema);
				Object.defineProperty(this, 'validate', {
					value: validate
				});
				return validate;
			},
			getId: function(){
				return this.id || (this.id = nextId++)
			}

		};

		var Caching = Variable.Caching = lang.compose(Variable, function(getValue, setValue){
			if(getValue){
				this.getValue = getValue;
			}
			if(setValue){
				this.setValue = setValue;
			}
		}, {
			getCache: function(context){
				var cache = this.cache || (this.cache = new CacheEntry());
				while(cache.getNextKey){
					var propertyName = cache.propertyName;
					var keyValue = context.get(propertyName);
					// TODO: handle the case of a primitive
					var nextCache = cache.get(keyValue);
					if(!nextCache){
						nextCache = new CacheEntry();
						cache.set(keyValue, nextCache);
						nextCache.key = keyValue;
					}
					cache = nextCache;
				}
				return cache;
			},
			valueOf: function(context, cacheHolder){
				// first check to see if we have the variable already computed
				if(this.state){
					this.state = null;
				}

				var useCache = this.dependents || this._properties;
				if(!useCache){
					return Variable.prototype.valueOf.apply(this, arguments);
				}
				var cache = this.getCache(context);
				if('value' in cache){
					if(cacheHolder && cacheHolder instanceof GetCache){
						cacheHolder.cache = cache;
					}
					return cache.value;
				}
				var cache = this.cache;
				
				var watchedContext = {
					get: function(propertyName, select){
						var keyValue = context.get(propertyName, select);
						// determine if we have already keyed of this value
						if(cache.propertyName !== propertyName){
							// TODO: check it against all previous property names						
							if(!cache.propertyName){
								cache.propertyName = propertyName;
							}
							var nextCache = cache.get(keyValue);
							if(!nextCache){
								nextCache = new CacheEntry();
								cache.set(keyValue, nextCache);
								nextCache.parent = cache;
								nextCache.key = keyValue;
								nextCache.propertyName = propertyName;
							}
							cache = nextCache;
						}
						return keyValue;
					}
				};
				var variable = this;
				return lang.when(this.getValue(watchedContext), function(computedValue){
					if(computedValue && computedValue.notifies && this.dependents){
						if(variable.computedVariable && variable.computedVariable !== computedValue){
							throw new Error('Can pass in a different variable for a different context as the result of a single variable');
						}
						variable.computedVariable = computedValue;
					}
					computedValue = variable.gotValue(computedValue, watchedContext);
					if(computedValue && typeof computedValue === 'object' &&
							variable._properties && variable.dependents){

						cache.variable = variable;
					}
					cache.value = computedValue;
					if(cacheHolder && cacheHolder instanceof GetCache){
						cacheHolder.cache = cache;
					}
					return computedValue;
				});
			},

			getValue: function(){
				return this.value && this.value.valueOf();
			},
			invalidate: function(context){
				// TODO: there might actually be a collection of listeners
				// clear the cache
				if(context){
					// just based on the context
					var cache = this.getCache(context);
					// deregisterListener(cache.value, cache);
					delete cache.value;
				}else{
					// delete our whole cache if it is an unconstrained invalidation
					// deregisterListener(this.cache.value, this.cache);
					this.cache = {};
				}
				if(this.computedVariable){
					this.computedVariable = null;
				}
				Variable.prototype.invalidate.call(this, context);
			},
			cleanup: function(){
				// once we are no longer "live", we no longer receive notifications, so can't keep the cache up-to-date, better empty it
				this.cache = {};
				Variable.prototype.cleanup.call();
			}

		});

		function GetCache(){
		}

		var Property = lang.compose(Variable, function Property(parent, key){
			this.parent = parent;
			this.key = key;
		},
		{
			init: function(){
				this.parent.notifies(this);
			},
			cleanup: function(){
				Variable.prototype.cleanup.call(this);
				this.parent.stopNotifies(this);
			},
			valueOf: function(context){
				if(this.state){
					this.state = null;
				}
				var key = this.key;
				var parent = this.parent;
				var property = this;
				var cacheHolder = new GetCache();
				return lang.when(parent.valueOf(context, cacheHolder), function(object){
					if(property.dependents){
						var cache = cacheHolder.cache || object;
						var listeners = cache && propertyListenersMap.get(cache);
						if(listeners && listeners.observer && listeners.observer.addKey){
							listeners.observer.addKey(key);
						}
					}
					return property.gotValue(object == null ? undefined : object[key], context);
				});
			},
			put: function(value, context){
				return this._changeValue(context, RequestChange, value);
			},
			invalidate: function(context, type){
				if(type !== ToChild){
					this._changeValue(context, type);
				}
				if(type === ToChild || type == ToParent){
					return Variable.prototype.invalidate.call(this, context, type);
				} // else
			},
			_changeValue: function(context, type, newValue){
				var key = this.key;
				var parent = this.parent;
				return lang.when(parent.valueOf(context), function(object){
					if(object == null){
						// nothing there yet, create an object to hold the new property
						parent.put(object = typeof key == 'number' ? [] : {});
					}else if(typeof object != 'object'){
						// if the parent is not an object, we can't set anything (that will be retained)
						return deny;
					}
					if(type == RequestChange){
						if(object[key] === newValue){
							// no actual change to make
							return noChange;
						}
						object[key] = newValue;
					}
					var listeners = propertyListenersMap.get(object);
					// at least make sure we notify the parent
					// we need to do it before the other listeners, so we can invalidate it before
					// we trigger a full clobbering of the object
					parent._propertyChange(key, context, type);
					if(listeners){
						for(var i = 0, l = listeners.length; i < l; i++){
							var listener = listeners[i];
							if (listener !== parent){
								// now go ahead and actually trigger the other listeners (but make sure we don't do the parent again)
								listener._propertyChange(key, context, type);
							}
						}
					}
				});
			}
		});

		// a call variable is the result of a call
		var Call = lang.compose(Caching, function Call(functionVariable, args){
			this.functionVariable = functionVariable;
			this.args = args;
		}, {
			init: function(){
				// depend on the function itself
				this.functionVariable.notifies(this);
				// depend on the args
				var args = this.args;
				for(var i = 0, l = args.length; i < l; i++){
					var arg = args[i];
					if(arg.notifies){
						arg.notifies(this);
					}
				}
			},
			cleanup: function(){
				Caching.prototype.cleanup.call(this);
				this.functionVariable.stopNotifies(this);
				// depend on the args
				var args = this.args;
				for(var i = 0, l = args.length; i < l; i++){
					var arg = args[i];
					if(arg.notifies){
						arg.stopNotifies(this);
					}
				}
			},

			getValue: function(context){
				var call = this;
				return lang.when(this.functionVariable.valueOf(context), function(functionValue){
					return call.invoke(functionValue, call.args, context);
				});
			},
			execute: function(context){
				var call = this;
				return lang.when(this.functionVariable.valueOf(context), function(functionValue){
					return call.invoke(functionValue, call.args, context, true);
				});
			},

			put: function(value, context){
				var call = this;
				return lang.when(this.valueOf(context), function(originalValue){
					if(originalValue === value){
						return noChange;
					}
					return lang.when(call.functionVariable.valueOf(context), function(functionValue){
						return call.invoke(function(){
							if(functionValue.reverse){
								functionValue.reverse.call(call, value, call.args, context);
								return Variable.prototype.put.call(call, value, context);
							}else{
								return deny;
							}
						}, call.args, context);
					});				
				});
			},
			invoke: function(functionValue, args, context, observeArguments){
				var instance = this.functionVariable.parent;
				if(functionValue.handlesContext){
					return functionValue.apply(instance, args, context);
				}else{
					var results = [];
					for(var i = 0, l = args.length; i < l; i++){
						results[i] = args[i].valueOf(context);
					}
					instance = instance && instance.valueOf(context);
					if(functionValue.handlesPromises){
						return functionValue.apply(instance, results, context);
					}else{
						// include the instance in whenAll
						results.push(instance);
						// wait for the values to be received
						return lang.whenAll(results, function(inputs){
							if(observeArguments){
								var handles = [];
								for(var i = 0, l = inputs.length; i < l; i++){
									var input = inputs[i];
									if(input && typeof input === 'object'){
										handles.push(observe(input));
									}
								}
								var instance = inputs.pop();
								try{
									var result = functionValue.apply(instance, inputs, context);
								}finally{
									lang.when(result, function(){
										for(var i = 0; i < l; i++){
											handles[i].done();
										}
									});
								}
								return result;
							}
							var instance = inputs.pop();
							return functionValue.apply(instance, inputs, context);
						});
					}
				}
			}
		});
		Variable.Call = Call;

		var Items = lang.compose(Variable, function(parent){
			this.parent = parent;
		}, {
			init: function(){
				this.parent.notifies(this);
			},
			cleanup: function(){
				Variable.prototype.cleanup.call(this);
				this.parent.stopNotifies(this);
			},
			lastIndex: 0,
			valueOf: function(context){
				if(this.state){
					this.state = null;
				}

				var parent = this.parent;
				var variable = this;
				return lang.when(parent.valueOf(context), function(array){

					if(!context || !array){
						return array;
					}
					var previous = context.get('after');
					if(!previous){
						return array[0];
					}else{
						// performance shortcut
						if(array[variable.lastIndex++] === previous){
							return array[variable.lastIndex];
						}
						for(var i = 0, l = array.length; i < l;){
							if(array[i++] === previous){
								variable.lastIndex = i;
								return array[i];
							}
						}
					}
					if(variable.dependents){
						lang.observeArray(array, function(events){
							event.name;
							variable.invalidate(new ArrayContext(changedItem));
						});
					}
				});
			},
			forEach: function(callback, context){
				var iteratorContext = lang.mixin({}, context);
				var variable = this;
				return lang.when(this.valueOf(iteratorContext), function(item){
					while(item){
						callback(item);
						iteratorContext.after = item;
						item = variable.valueOf(iteratorContext);
					}
				});
			}
		});
		var Validating = lang.compose(Caching, function(target, schema){
			this.target = target;
			this.targetSchema = schema;
		}, {
			init: function(){
				this.target.notifies(this);
				this.targetSchema.notifies(this);
			},
			cleanup: function(){
				Caching.prototype.cleanup.call(this);
				this.target.stopNotifies(this);
				this.targetSchema.stopNotifies(this);			
			},
			getValue: function(context){
				return doValidation(this.target.valueOf(context), this.targetSchema.valueOf(context));
			}
		});

		var Schema = lang.compose(Caching, function(target){
			this.target = target;
		}, {
			init: function(){
				this.target.notifies(this);
			},
			cleanup: function(){
				Caching.prototype.cleanup.call(this);
				this.target.notifies(this);
			},
			getValue: function(context){
				if(this.value){ // if it has an explicit schema, we can use that.
					return this.value;
				}
				// get the schema, going through target parents until it is found
				return getSchema(this.target);
				function getSchema(target){
					return lang.when(target.valueOf(context), function(value){
						var schema;
						return (value && value._schema) || (target.parent && (schema = target.parent.schema)
							&& (schema = schema.valueOf()) && schema[target.key]);
					});
				}
			}
		});
		function validate(target){
			var schemaForObject = schema(target);
			return new Validating(target, schemaForObject);
		}
		Variable.deny = deny;
		Variable.noChange = noChange;
		function addFlag(name){
			Variable[name] = function(functionValue){
				functionValue[name] = true;
			};
		}
		addFlag(Variable, 'handlesContext');
		addFlag(Variable, 'handlesPromises');

		function observe(object){
			var listeners = propertyListenersMap.get(object);
			if(!listeners){
				propertyListenersMap.set(object, listeners = []);
			}
			if(listeners.observerCount){
				listeners.observerCount++;
			}else{
				listeners.observerCount = 1;
				var observer = listeners.observer = lang.observe(object, function(events){
					for(var i = 0, l = listeners.length; i < l; i++){
						var listener = listeners[i];
						for(var j = 0, el = events.length; j < el; j++){
							var event = events[j];
							listener._propertyChange(event.name);
						}
					}
				});
				if(observer.addKey){
					for(var i = 0, l = listeners.length; i < l; i++){
						var listener = listeners[i];
						listener.eachKey(function(key){
							observer.addKey(key);
						});
					}
				}
			}
			return {
				remove: function(){
					if(!(--listeners.observerCount)){
						listeners.observer.remove();
					}
				},
				done: function(){
					// deliver changes
					lang.deliverChanges(observer);
					this.remove();
				}
			};
		}
		Variable.observe = observe;
		return Variable;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){
		var hasFeatures = {
			observe: Object.observe,
			requestAnimationFrame: typeof requestAnimationFrame != 'undefined',
			defineProperty: Object.defineProperty && (function(){
				try{
					Object.defineProperty({}, 't', {});
					return true;
				}catch(e){
				}
			})(),
			promise: typeof Promise !== 'undefined',
			'WeakMap': typeof WeakMap === 'function'
		};
		function has(feature){
			return hasFeatures[feature];
		}
		// This is an polyfill for Object.observe with just enough functionality
		// for what Variables need
		// An observe function, with polyfile
		var observe = has('observe') ? function(target, listener){
				Object.observe(target, listener);
				return {
					remove: function(){
						Object.unobserve(target, listener);
					}
				};
			} :
			// for the case of setter support, but no Object.observe support (like IE9+, FF, Safari)
			// this is much faster than polling
				has('defineProperty') ? 
			function observe(target, listener){
				/*for(var i in target){
					addKey(i);
				}*/
				listener.addKey = addKey;
				listener.remove = function(){
					listener = null;
				};
				return listener;
				function addKey(key){
					var keyFlag = 'key' + key;
					if(this[keyFlag]){
						return;
					}else{
						this[keyFlag] = true;
					}
					var currentValue = target[key];
					var descriptor = Object.getOwnPropertyDescriptor(target, key);
					if(descriptor && descriptor.set){
						var previousSet = descriptor.set;
						var previousGet = descriptor.get;
						Object.defineProperty(target, key, {
							get: function(){
								return (currentValue = previousGet.call(this));
							},
							set: function(value){
								previousSet.call(this, value);
								if(currentValue !== value){
									currentValue = value;
									if(listener){
										queue(listener, this, key);
									}
								}
							},
							enumerable: descriptor.enumerable
						});
					}else{
						Object.defineProperty(target, key, {
							get: function(){
								return currentValue;
							},
							set: function(value){
								if(currentValue !== value){
									currentValue = value;
									if(listener){
										queue(listener, this, key);
									}
								}
							},
							enumerable: !descriptor || descriptor.enumerable
						});
					}
				}
			} :
			// and finally a polling-based solution, for the really old browsers
			function(target, listener){
				if(!timerStarted){
					timerStarted = true;
					setInterval(function(){
						for(var i = 0, l = watchedObjects.length; i < l; i++){
							diff(watchedCopies[i], watchedObjects[i], listeners[i]);
						}
					}, 20);
				}
				var copy = {};
				for(var i in target){
					if(target.hasOwnProperty(i)){
						copy[i] = target[i];
					}
				}
				watchedObjects.push(target);
				watchedCopies.push(copy);
				listeners.push(listener);
			};
		var queuedListeners;
		function queue(listener, object, name){
			if(queuedListeners){
				if(queuedListeners.indexOf(listener) === -1){
					queuedListeners.push(listener);
				}
			}else{
				queuedListeners = [listener];
				lang.nextTurn(function(){
					queuedListeners.forEach(function(listener){
						var events = [];
						listener.properties.forEach(function(property){
							events.push({target: listener.object, name: property});
						});
						listener(events);
						listener.object = null;
						listener.properties = null;
					});
					queuedListeners = null;
				}, 0);
			}
			listener.object = object;
			var properties = listener.properties || (listener.properties = []);
			if(properties.indexOf(name) === -1){
				properties.push(name);
			}
		}
		var unobserve = has('observe') ? Object.unobserve :
			function(target, listener){
				if(listener.remove){
					listener.remove();
				}
				for(var i = 0, l = watchedObjects.length; i < l; i++){
					if(watchedObjects[i] === target && listeners[i] === listener){
						watchedObjects.splice(i, 1);
						watchedCopies.splice(i, 1);
						listeners.splice(i, 1);
						return;
					}
				}
			};
		var watchedObjects = [];
		var watchedCopies = [];
		var listeners = [];
		var timerStarted = false;
		function diff(previous, current, callback){
			// TODO: keep an array of properties for each watch for faster iteration
			var queued;
			for(var i in previous){
				if(previous.hasOwnProperty(i) && previous[i] !== current[i]){
					// a property has changed
					previous[i] = current[i];
					(queued || (queued = [])).push({name: i});
				}
			}
			for(var i in current){
				if(current.hasOwnProperty(i) && !previous.hasOwnProperty(i)){
					// a property has been added
					previous[i] = current[i];
					(queued || (queued = [])).push({name: i});
				}
			}
			if(queued){
				callback(queued);
			}
		}

		var id = 1;
		// a function that returns a function, to stop JSON serialization of an
		// object
		function toJSONHidden() {
			return toJSONHidden;
		}
		// An object that will be hidden from JSON serialization
		var Hidden = function () {
		};
		Hidden.prototype.toJSON = toJSONHidden;

		var lang = {
			requestAnimationFrame: has('requestAnimationFrame') ? requestAnimationFrame :
				(function(){
					var toRender = [];
					var queued = false;
					function processAnimationFrame() {
						for (var i = 0; i < toRender.length; i++){
							toRender[i]();
						}
						toRender = [];
						queued = false;
					}
					function requestAnimationFrame(renderer){
					 	if (!queued) {
							setTimeout(processAnimationFrame);
							queued = true;
						}
						toRender.push(renderer);
					}
					return requestAnimationFrame;
				})(),
			Promise: has('promise') ? Promise : (function(){
				function Promise(execute){
					var isResolved, resolution, errorResolution;
					var queue = 0;
					function resolve(value){
						// resolve function
						if(value && value.then){
							// received a promise, wait for it
							value.then(resolve, reject);
						}else{
							resolution = value;
							finished();
						}
					}
					function reject(error){
						// reject function
						errorResolution = error;
						finished();
					}
					execute(resolve, reject);
					function finished(){
						isResolved = true;
						for(var i = 0, l = queue.length; i < l; i++){
							queue[i]();
						}
						// clean out the memory
						queue = 0;
					}
					return {
						then: function(callback, errback){
							return new Promise(function(resolve, reject){
								function handle(){
									// promise fulfilled, call the appropriate callback
									try{
										if(errorResolution && !errback){
											// errors without a handler flow through
											reject(errorResolution);
										}else{
											// resolve to the callback's result
											resolve(errorResolution ?
												errback(errorResolution) :
												callback ?
													callback(resolution) : resolution);
										}
									}catch(newError){
										// caught an error, reject the returned promise
										reject(newError);
									}
								}
								if(isResolved){
									// already resolved, immediately handle
									handle();
								}else{
									(queue || (queue = [])).push(handle);
								}
							});
						}
					};
				}
				return Promise;
			}()),

			WeakMap: has('WeakMap') ? WeakMap :
		 	function (values, name) {
		 		var mapProperty = '__' + (name || '') + id++;
		 		return has('defineProperty') ?
		 		{
		 			get: function (key) {
		 				return key[mapProperty];
		 			},
		 			set: function (key, value) {
		 				Object.defineProperty(key, mapProperty, {
		 					value: value,
		 					enumerable: false
		 				});
		 			}
		 		} :
		 		{
		 			get: function (key) {
		 				var intermediary = key[mapProperty];
		 				return intermediary && intermediary.value;
		 			},
		 			set: function (key, value) {
		 				// we use an intermediary that is hidden from JSON serialization, at least
		 				var intermediary = key[mapProperty] || (key[mapProperty] = new Hidden());
		 				intermediary.value = value;
		 			}
		 		};
		 	},

			observe: observe,
			unobserve: unobserve,
			when: function(value, callback, errorHandler){
				return value && value.then ?
					(value.then(callback, errorHandler) || value) : callback(value);
			},
			whenAll: function(inputs, callback){
				var promiseInvolved;
				for(var i = 0, l = inputs.length; i < l; i++){
					if(inputs[i] && inputs[i].then){
						promiseInvolved = true;
					}
				}
				if(promiseInvolved){
					// we have asynch inputs, do lazy loading
					return {
						then: function(onResolve, onError){
							var remaining = 1;
							var result;
							var readyInputs = [];
							var lastPromiseResult;
							for(var i = 0; i < inputs.length; i++){
								var input = inputs[i];
								remaining++;
								if(input && input.then){
									(function(i, previousPromiseResult){
										lastPromiseResult = input.then(function(value){
											readyInputs[i] = value;
											onEach();
											if(!remaining){
												return result;
											}else{
												return previousPromiseResult;
											}
										}, onError);
									})(i, lastPromiseResult);
								}else{
									readyInputs[i] = input;
									onEach();
								}
							}
							onEach();
							function onEach(){
								remaining--;
								if(!remaining){
									result = onResolve(callback(readyInputs));
								}
							}
							return lastPromiseResult;
						},
						inputs: inputs
					};
				}
				// just sync inputs
				return callback(inputs);

			},
			compose: function(Base, constructor, properties){
				var prototype = constructor.prototype = new Base();
				for(var i in properties){
					prototype[i] = properties[i];
				}
				return constructor;
			},
			nextTurn: has('promise') ? 
				function (callback) {
					// promises resolve on the next micro turn
					new Promise(function (resolve) {
						resolve(); 
					}).then(callback);
				} :
				function (callback) {
					// TODO: we can do better for other, older browsers
					setTimeout(callback, 0);
				},
			copy: Object.assign || function(target, source){
				for(var i in source){
					target[i] = source[i];
				}
				return target;
			}
		};
		return lang;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){
		// a simple context object class
		function Context(rule, element){
			this.rule = rule;
			if(element){
				this.element = element;
			}
		}
		Context.prototype = {
			get: function(name, select){
				var value = this[name];
				// allow for selecting a more generic value
				return select ? select(value) : value;
			}
		};
		return Context;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {
		var lang = __webpack_require__(3);
		var doc = document;
		var invalidatedElements;
		var queued;
		var toRender = [];
		var nextId = 1;
		var requestAnimationFrame = lang.requestAnimationFrame;
		function Updater(options) {
			var variable = options.variable;
			if (variable.notifies) {
				// if it has notifies, we don't need to instantiate a closure
				variable.notifies(this);
			} else {
				// baconjs-esqe API
				var updater = this;
				variable.subscribe(function (event) {
					// replace the variable with an object
					// that returns the value from the event
					updater.variable = {
						valueOf: function () {
							return event.value();
						}
					};
				});
			}

			this.variable = variable;
			if (options) {
				if (options.selector) {
					this.selector = options.selector;
				}
				if (options.element) {
					var element = this.element = options.element;
					(element.alkaliRenderers || (element.alkaliRenderers = [])).push(this);
				}
				if (options.update) {
					this.update = options.update;
				}
				if (options.shouldRender) {
					this.shouldRender = options.shouldRender;
				}
				if (options.renderUpdate) {
					this.renderUpdate = options.renderUpdate;
				}
				if (options.alwaysUpdate) {
					this.alwaysUpdate = options.alwaysUpdate;
				}
			}
			if(options && options.updateOnStart !== false){
				this.update(true);
			}
		}
		Updater.prototype = {
			constructor: Updater,
			update: function () {
				throw new Error ('update must be implemented by sub class of Updater');
			},
			invalidate: function (context) {
				if (!this.invalidated) {
					// do this only once, until we render again
					this.invalidated = true;
					var updater = this;
					requestAnimationFrame(function(){
						invalidatedElements = null;
						updater.update(updater.alwaysUpdate);
					});
				}
			},
			invalidateElement: function(element) {
				if(!invalidatedElements){
					invalidatedElements = new WeakMap(null, 'invalidated');
					// TODO: if this is not a real weak map, we don't want to GC it, or it will leak
				}
				var invalidatedParts = invalidatedElements.get(element);
				invalidatedElements.set(element, invalidatedParts = {});
				if (!invalidatedParts[id]) {
					invalidatedParts[id] = true;
				}
				if (!queued) {
					lang.queueTask(processQueue);
					queued = true;
				}
				var updater = this;
				toRender.push(function(){
					updater.invalidated = false;
					updater.updateElement(element);
				});
			},
			getId: function(){
				return this.id || (this.id = nextId++)
			}

		};

		function ElementUpdater(variable, options) {
			Updater.call(this, variable, options);
		}
		ElementUpdater.prototype = Object.create(Updater.prototype);
		ElementUpdater.prototype.shouldRender = function (element) {
			return document.body.contains(element);
		};
		ElementUpdater.prototype.update = function (always, element) {
			element = this.element || element;
			if(!element){
				if(this.selector){
					var elements = document.querySelectorAll(this.selector);
					for(var i = 0, l = elements.length; i < l; i++){
						this.update(always, elements[i]);
					}
				}else{
					throw new Error('No element or selector was provided to the Updater');
				}
				return;
			}
			if(always || this.shouldRender(element)){
				// it is connected
				this.updateElement(element);
			}else{
				var id = this.getId();
				var updaters = element.updaters;
				if(!updaters){
					updaters = element.updaters = [];
					element.className += ' needs-rerendering';
				}
				if (!updaters[id]) {
					updaters[id] = this;
				}
			}
		};
		ElementUpdater.prototype.addElement = function (element) {
			if (this.selector) {
				element.updaters = [this];
			} else {
				// no way of tracking so, we have to keep an array
				(this.elements = (this.elements || [])).push(element);
			}
			// and immediately do an update
			this.updateElement(element);
		};
		ElementUpdater.prototype.updateElement = function(element) {
			this.invalidated = false;
			var value = this.variable.valueOf();
			if(value !== undefined){
				if(value && value.then){
					if(this.renderLoading){
						this.renderLoading(value, element);
					}
					var updater = this;
					value.then(function (value) {
						updater.renderUpdate(value, element);
					});
				}else{
					this.renderUpdate(value, element);
				}
			}
		};
		ElementUpdater.prototype.renderUpdate = function (newValue, element) {
			throw new Error('renderUpdate(newValue) must be implemented');
		};
		Updater.Updater = Updater;
		Updater.ElementUpdater = ElementUpdater;

		function AttributeUpdater(options) {
			if(options.name){
				this.name = options.name;
			}
			ElementUpdater.apply(this, arguments);
		}
		AttributeUpdater.prototype = Object.create(ElementUpdater.prototype);
		AttributeUpdater.prototype.renderUpdate = function (newValue, element) {
			element.setAttribute(this.name, newValue);
		};
		Updater.AttributeUpdater = AttributeUpdater;

		function PropertyUpdater(options) {
			if(options.name){
				this.name = options.name;
			}
			ElementUpdater.apply(this, arguments);
		}
		PropertyUpdater.prototype = Object.create(ElementUpdater.prototype);
		PropertyUpdater.prototype.renderUpdate = function (newValue, element) {
			element[this.name] = newValue;
		};
		Updater.PropertyUpdater = PropertyUpdater;


		function ContentUpdater(options) {
			ElementUpdater.apply(this, arguments);
		}
		ContentUpdater.prototype = Object.create(ElementUpdater.prototype);
		ContentUpdater.prototype.renderUpdate = function (newValue, element) {
			element.innerHTML = '';
			element.appendChild(document.createTextNode(newValue));
		};
		Updater.ContentUpdater = ContentUpdater;
		Updater.onShowElement = function(shownElement){
			requestAnimationFrame(function(){
				invalidatedElements = null;
				var elements = [].slice.call(shownElement.getElementsByClassName('needs-rerendering'));
				if (shownElement.className.indexOf('needs-rerendering') > 0){
					var includingTop = [shownElement];
					includingTop.push.apply(includingTop, elements);
					elements = includingTop;
				}
				for (var i = 0, l = elements.length; i < l; i++){
					var element = elements[i];
					var updaters = element.updaters;
					if(updaters){
						element.updaters = null;
						// remove needs-rerendering class
						element.className = element.className.replace(/\s?needs\-rerendering\s?/g, '');
						for (var id in updaters) {
							var updater = updaters[id];
							updater.updateElement(element);
						}
					}
				}
			});
		};

		function onElementRemoval(element){
			// cleanup element renderers
			if(element.alkaliRenderers){
				var renderers = element.alkaliRenderers;
				for(var i = 0; i < renderers.length; i++){
					var renderer = renderers[i];
					renderer.variable.stopNotifies(renderer);
				}
			}
		}
		Updater.onElementRemoval = function(element, onlyChildren){
			if(!onlyChildren){
				onElementRemoval(element);
			}
			var children = element.getElementsByTagName('*');
			for(var i = 0, l = children.length; i < l; i++){
				var child = children[i];
				if(child.alkaliRenderers){
					onElementRemoval(child);
				}
			}
		};
		module.exports = Updater;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! VelocityJS.org (1.2.3). (C) 2014 Julian Shapiro. MIT @license: en.wikipedia.org/wiki/MIT_License */

	/*************************
	   Velocity jQuery Shim
	*************************/

	/*! VelocityJS.org jQuery Shim (1.0.1). (C) 2014 The jQuery Foundation. MIT @license: en.wikipedia.org/wiki/MIT_License. */

	/* This file contains the jQuery functions that Velocity relies on, thereby removing Velocity's dependency on a full copy of jQuery, and allowing it to work in any environment. */
	/* These shimmed functions are only used if jQuery isn't present. If both this shim and jQuery are loaded, Velocity defaults to jQuery proper. */
	/* Browser support: Using this shim instead of jQuery proper removes support for IE8. */

	;(function (window) {
	    /***************
	         Setup
	    ***************/

	    /* If jQuery is already loaded, there's no point in loading this shim. */
	    if (window.jQuery) {
	        return;
	    }

	    /* jQuery base. */
	    var $ = function (selector, context) {
	        return new $.fn.init(selector, context);
	    };

	    /********************
	       Private Methods
	    ********************/

	    /* jQuery */
	    $.isWindow = function (obj) {
	        /* jshint eqeqeq: false */
	        return obj != null && obj == obj.window;
	    };

	    /* jQuery */
	    $.type = function (obj) {
	        if (obj == null) {
	            return obj + "";
	        }

	        return typeof obj === "object" || typeof obj === "function" ?
	            class2type[toString.call(obj)] || "object" :
	            typeof obj;
	    };

	    /* jQuery */
	    $.isArray = Array.isArray || function (obj) {
	        return $.type(obj) === "array";
	    };

	    /* jQuery */
	    function isArraylike (obj) {
	        var length = obj.length,
	            type = $.type(obj);

	        if (type === "function" || $.isWindow(obj)) {
	            return false;
	        }

	        if (obj.nodeType === 1 && length) {
	            return true;
	        }

	        return type === "array" || length === 0 || typeof length === "number" && length > 0 && (length - 1) in obj;
	    }

	    /***************
	       $ Methods
	    ***************/

	    /* jQuery: Support removed for IE<9. */
	    $.isPlainObject = function (obj) {
	        var key;

	        if (!obj || $.type(obj) !== "object" || obj.nodeType || $.isWindow(obj)) {
	            return false;
	        }

	        try {
	            if (obj.constructor &&
	                !hasOwn.call(obj, "constructor") &&
	                !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
	                return false;
	            }
	        } catch (e) {
	            return false;
	        }

	        for (key in obj) {}

	        return key === undefined || hasOwn.call(obj, key);
	    };

	    /* jQuery */
	    $.each = function(obj, callback, args) {
	        var value,
	            i = 0,
	            length = obj.length,
	            isArray = isArraylike(obj);

	        if (args) {
	            if (isArray) {
	                for (; i < length; i++) {
	                    value = callback.apply(obj[i], args);

	                    if (value === false) {
	                        break;
	                    }
	                }
	            } else {
	                for (i in obj) {
	                    value = callback.apply(obj[i], args);

	                    if (value === false) {
	                        break;
	                    }
	                }
	            }

	        } else {
	            if (isArray) {
	                for (; i < length; i++) {
	                    value = callback.call(obj[i], i, obj[i]);

	                    if (value === false) {
	                        break;
	                    }
	                }
	            } else {
	                for (i in obj) {
	                    value = callback.call(obj[i], i, obj[i]);

	                    if (value === false) {
	                        break;
	                    }
	                }
	            }
	        }

	        return obj;
	    };

	    /* Custom */
	    $.data = function (node, key, value) {
	        /* $.getData() */
	        if (value === undefined) {
	            var id = node[$.expando],
	                store = id && cache[id];

	            if (key === undefined) {
	                return store;
	            } else if (store) {
	                if (key in store) {
	                    return store[key];
	                }
	            }
	        /* $.setData() */
	        } else if (key !== undefined) {
	            var id = node[$.expando] || (node[$.expando] = ++$.uuid);

	            cache[id] = cache[id] || {};
	            cache[id][key] = value;

	            return value;
	        }
	    };

	    /* Custom */
	    $.removeData = function (node, keys) {
	        var id = node[$.expando],
	            store = id && cache[id];

	        if (store) {
	            $.each(keys, function(_, key) {
	                delete store[key];
	            });
	        }
	    };

	    /* jQuery */
	    $.extend = function () {
	        var src, copyIsArray, copy, name, options, clone,
	            target = arguments[0] || {},
	            i = 1,
	            length = arguments.length,
	            deep = false;

	        if (typeof target === "boolean") {
	            deep = target;

	            target = arguments[i] || {};
	            i++;
	        }

	        if (typeof target !== "object" && $.type(target) !== "function") {
	            target = {};
	        }

	        if (i === length) {
	            target = this;
	            i--;
	        }

	        for (; i < length; i++) {
	            if ((options = arguments[i]) != null) {
	                for (name in options) {
	                    src = target[name];
	                    copy = options[name];

	                    if (target === copy) {
	                        continue;
	                    }

	                    if (deep && copy && ($.isPlainObject(copy) || (copyIsArray = $.isArray(copy)))) {
	                        if (copyIsArray) {
	                            copyIsArray = false;
	                            clone = src && $.isArray(src) ? src : [];

	                        } else {
	                            clone = src && $.isPlainObject(src) ? src : {};
	                        }

	                        target[name] = $.extend(deep, clone, copy);

	                    } else if (copy !== undefined) {
	                        target[name] = copy;
	                    }
	                }
	            }
	        }

	        return target;
	    };

	    /* jQuery 1.4.3 */
	    $.queue = function (elem, type, data) {
	        function $makeArray (arr, results) {
	            var ret = results || [];

	            if (arr != null) {
	                if (isArraylike(Object(arr))) {
	                    /* $.merge */
	                    (function(first, second) {
	                        var len = +second.length,
	                            j = 0,
	                            i = first.length;

	                        while (j < len) {
	                            first[i++] = second[j++];
	                        }

	                        if (len !== len) {
	                            while (second[j] !== undefined) {
	                                first[i++] = second[j++];
	                            }
	                        }

	                        first.length = i;

	                        return first;
	                    })(ret, typeof arr === "string" ? [arr] : arr);
	                } else {
	                    [].push.call(ret, arr);
	                }
	            }

	            return ret;
	        }

	        if (!elem) {
	            return;
	        }

	        type = (type || "fx") + "queue";

	        var q = $.data(elem, type);

	        if (!data) {
	            return q || [];
	        }

	        if (!q || $.isArray(data)) {
	            q = $.data(elem, type, $makeArray(data));
	        } else {
	            q.push(data);
	        }

	        return q;
	    };

	    /* jQuery 1.4.3 */
	    $.dequeue = function (elems, type) {
	        /* Custom: Embed element iteration. */
	        $.each(elems.nodeType ? [ elems ] : elems, function(i, elem) {
	            type = type || "fx";

	            var queue = $.queue(elem, type),
	                fn = queue.shift();

	            if (fn === "inprogress") {
	                fn = queue.shift();
	            }

	            if (fn) {
	                if (type === "fx") {
	                    queue.unshift("inprogress");
	                }

	                fn.call(elem, function() {
	                    $.dequeue(elem, type);
	                });
	            }
	        });
	    };

	    /******************
	       $.fn Methods
	    ******************/

	    /* jQuery */
	    $.fn = $.prototype = {
	        init: function (selector) {
	            /* Just return the element wrapped inside an array; don't proceed with the actual jQuery node wrapping process. */
	            if (selector.nodeType) {
	                this[0] = selector;

	                return this;
	            } else {
	                throw new Error("Not a DOM node.");
	            }
	        },

	        offset: function () {
	            /* jQuery altered code: Dropped disconnected DOM node checking. */
	            var box = this[0].getBoundingClientRect ? this[0].getBoundingClientRect() : { top: 0, left: 0 };

	            return {
	                top: box.top + (window.pageYOffset || document.scrollTop  || 0)  - (document.clientTop  || 0),
	                left: box.left + (window.pageXOffset || document.scrollLeft  || 0) - (document.clientLeft || 0)
	            };
	        },

	        position: function () {
	            /* jQuery */
	            function offsetParent() {
	                var offsetParent = this.offsetParent || document;

	                while (offsetParent && (!offsetParent.nodeType.toLowerCase === "html" && offsetParent.style.position === "static")) {
	                    offsetParent = offsetParent.offsetParent;
	                }

	                return offsetParent || document;
	            }

	            /* Zepto */
	            var elem = this[0],
	                offsetParent = offsetParent.apply(elem),
	                offset = this.offset(),
	                parentOffset = /^(?:body|html)$/i.test(offsetParent.nodeName) ? { top: 0, left: 0 } : $(offsetParent).offset()

	            offset.top -= parseFloat(elem.style.marginTop) || 0;
	            offset.left -= parseFloat(elem.style.marginLeft) || 0;

	            if (offsetParent.style) {
	                parentOffset.top += parseFloat(offsetParent.style.borderTopWidth) || 0
	                parentOffset.left += parseFloat(offsetParent.style.borderLeftWidth) || 0
	            }

	            return {
	                top: offset.top - parentOffset.top,
	                left: offset.left - parentOffset.left
	            };
	        }
	    };

	    /**********************
	       Private Variables
	    **********************/

	    /* For $.data() */
	    var cache = {};
	    $.expando = "velocity" + (new Date().getTime());
	    $.uuid = 0;

	    /* For $.queue() */
	    var class2type = {},
	        hasOwn = class2type.hasOwnProperty,
	        toString = class2type.toString;

	    var types = "Boolean Number String Function Array Date RegExp Object Error".split(" ");
	    for (var i = 0; i < types.length; i++) {
	        class2type["[object " + types[i] + "]"] = types[i].toLowerCase();
	    }

	    /* Makes $(node) possible, without having to call init. */
	    $.fn.init.prototype = $.fn;

	    /* Globalize Velocity onto the window, and assign its Utilities property. */
	    window.Velocity = { Utilities: $ };
	})(window);

	/******************
	    Velocity.js
	******************/

	;(function (factory) {
	    /* CommonJS module. */
	    if (typeof module === "object" && typeof module.exports === "object") {
	        module.exports = factory();
	    /* AMD module. */
	    } else if (true) {
	        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    /* Browser globals. */
	    } else {
	        factory();
	    }
	}(function() {
	return function (global, window, document, undefined) {

	    /***************
	        Summary
	    ***************/

	    /*
	    - CSS: CSS stack that works independently from the rest of Velocity.
	    - animate(): Core animation method that iterates over the targeted elements and queues the incoming call onto each element individually.
	      - Pre-Queueing: Prepare the element for animation by instantiating its data cache and processing the call's options.
	      - Queueing: The logic that runs once the call has reached its point of execution in the element's $.queue() stack.
	                  Most logic is placed here to avoid risking it becoming stale (if the element's properties have changed).
	      - Pushing: Consolidation of the tween data followed by its push onto the global in-progress calls container.
	    - tick(): The single requestAnimationFrame loop responsible for tweening all in-progress calls.
	    - completeCall(): Handles the cleanup process for each Velocity call.
	    */

	    /*********************
	       Helper Functions
	    *********************/

	    /* IE detection. Gist: https://gist.github.com/julianshapiro/9098609 */
	    var IE = (function() {
	        if (document.documentMode) {
	            return document.documentMode;
	        } else {
	            for (var i = 7; i > 4; i--) {
	                var div = document.createElement("div");

	                div.innerHTML = "<!--[if IE " + i + "]><span></span><![endif]-->";

	                if (div.getElementsByTagName("span").length) {
	                    div = null;

	                    return i;
	                }
	            }
	        }

	        return undefined;
	    })();

	    /* rAF shim. Gist: https://gist.github.com/julianshapiro/9497513 */
	    var rAFShim = (function() {
	        var timeLast = 0;

	        return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback) {
	            var timeCurrent = (new Date()).getTime(),
	                timeDelta;

	            /* Dynamically set delay on a per-tick basis to match 60fps. */
	            /* Technique by Erik Moller. MIT license: https://gist.github.com/paulirish/1579671 */
	            timeDelta = Math.max(0, 16 - (timeCurrent - timeLast));
	            timeLast = timeCurrent + timeDelta;

	            return setTimeout(function() { callback(timeCurrent + timeDelta); }, timeDelta);
	        };
	    })();

	    /* Array compacting. Copyright Lo-Dash. MIT License: https://github.com/lodash/lodash/blob/master/LICENSE.txt */
	    function compactSparseArray (array) {
	        var index = -1,
	            length = array ? array.length : 0,
	            result = [];

	        while (++index < length) {
	            var value = array[index];

	            if (value) {
	                result.push(value);
	            }
	        }

	        return result;
	    }

	    function sanitizeElements (elements) {
	        /* Unwrap jQuery/Zepto objects. */
	        if (Type.isWrapped(elements)) {
	            elements = [].slice.call(elements);
	        /* Wrap a single element in an array so that $.each() can iterate with the element instead of its node's children. */
	        } else if (Type.isNode(elements)) {
	            elements = [ elements ];
	        }

	        return elements;
	    }

	    var Type = {
	        isString: function (variable) {
	            return (typeof variable === "string");
	        },
	        isArray: Array.isArray || function (variable) {
	            return Object.prototype.toString.call(variable) === "[object Array]";
	        },
	        isFunction: function (variable) {
	            return Object.prototype.toString.call(variable) === "[object Function]";
	        },
	        isNode: function (variable) {
	            return variable && variable.nodeType;
	        },
	        /* Copyright Martin Bohm. MIT License: https://gist.github.com/Tomalak/818a78a226a0738eaade */
	        isNodeList: function (variable) {
	            return typeof variable === "object" &&
	                /^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(variable)) &&
	                variable.length !== undefined &&
	                (variable.length === 0 || (typeof variable[0] === "object" && variable[0].nodeType > 0));
	        },
	        /* Determine if variable is a wrapped jQuery or Zepto element. */
	        isWrapped: function (variable) {
	            return variable && (variable.jquery || (window.Zepto && window.Zepto.zepto.isZ(variable)));
	        },
	        isSVG: function (variable) {
	            return window.SVGElement && (variable instanceof window.SVGElement);
	        },
	        isEmptyObject: function (variable) {
	            for (var name in variable) {
	                return false;
	            }

	            return true;
	        }
	    };

	    /*****************
	       Dependencies
	    *****************/

	    var $,
	        isJQuery = false;

	    if (global.fn && global.fn.jquery) {
	        $ = global;
	        isJQuery = true;
	    } else {
	        $ = window.Velocity.Utilities;
	    }

	    if (IE <= 8 && !isJQuery) {
	        throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.");
	    } else if (IE <= 7) {
	        /* Revert to jQuery's $.animate(), and lose Velocity's extra features. */
	        jQuery.fn.velocity = jQuery.fn.animate;

	        /* Now that $.fn.velocity is aliased, abort this Velocity declaration. */
	        return;
	    }

	    /*****************
	        Constants
	    *****************/

	    var DURATION_DEFAULT = 400,
	        EASING_DEFAULT = "swing";

	    /*************
	        State
	    *************/

	    var Velocity = {
	        /* Container for page-wide Velocity state data. */
	        State: {
	            /* Detect mobile devices to determine if mobileHA should be turned on. */
	            isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
	            /* The mobileHA option's behavior changes on older Android devices (Gingerbread, versions 2.3.3-2.3.7). */
	            isAndroid: /Android/i.test(navigator.userAgent),
	            isGingerbread: /Android 2\.3\.[3-7]/i.test(navigator.userAgent),
	            isChrome: window.chrome,
	            isFirefox: /Firefox/i.test(navigator.userAgent),
	            /* Create a cached element for re-use when checking for CSS property prefixes. */
	            prefixElement: document.createElement("div"),
	            /* Cache every prefix match to avoid repeating lookups. */
	            prefixMatches: {},
	            /* Cache the anchor used for animating window scrolling. */
	            scrollAnchor: null,
	            /* Cache the browser-specific property names associated with the scroll anchor. */
	            scrollPropertyLeft: null,
	            scrollPropertyTop: null,
	            /* Keep track of whether our RAF tick is running. */
	            isTicking: false,
	            /* Container for every in-progress call to Velocity. */
	            calls: []
	        },
	        /* Velocity's custom CSS stack. Made global for unit testing. */
	        CSS: { /* Defined below. */ },
	        /* A shim of the jQuery utility functions used by Velocity -- provided by Velocity's optional jQuery shim. */
	        Utilities: $,
	        /* Container for the user's custom animation redirects that are referenced by name in place of the properties map argument. */
	        Redirects: { /* Manually registered by the user. */ },
	        Easings: { /* Defined below. */ },
	        /* Attempt to use ES6 Promises by default. Users can override this with a third-party promises library. */
	        Promise: window.Promise,
	        /* Velocity option defaults, which can be overriden by the user. */
	        defaults: {
	            queue: "",
	            duration: DURATION_DEFAULT,
	            easing: EASING_DEFAULT,
	            begin: undefined,
	            complete: undefined,
	            progress: undefined,
	            display: undefined,
	            visibility: undefined,
	            loop: false,
	            delay: false,
	            mobileHA: true,
	            /* Advanced: Set to false to prevent property values from being cached between consecutive Velocity-initiated chain calls. */
	            _cacheValues: true
	        },
	        /* A design goal of Velocity is to cache data wherever possible in order to avoid DOM requerying. Accordingly, each element has a data cache. */
	        init: function (element) {
	            $.data(element, "velocity", {
	                /* Store whether this is an SVG element, since its properties are retrieved and updated differently than standard HTML elements. */
	                isSVG: Type.isSVG(element),
	                /* Keep track of whether the element is currently being animated by Velocity.
	                   This is used to ensure that property values are not transferred between non-consecutive (stale) calls. */
	                isAnimating: false,
	                /* A reference to the element's live computedStyle object. Learn more here: https://developer.mozilla.org/en/docs/Web/API/window.getComputedStyle */
	                computedStyle: null,
	                /* Tween data is cached for each animation on the element so that data can be passed across calls --
	                   in particular, end values are used as subsequent start values in consecutive Velocity calls. */
	                tweensContainer: null,
	                /* The full root property values of each CSS hook being animated on this element are cached so that:
	                   1) Concurrently-animating hooks sharing the same root can have their root values' merged into one while tweening.
	                   2) Post-hook-injection root values can be transferred over to consecutively chained Velocity calls as starting root values. */
	                rootPropertyValueCache: {},
	                /* A cache for transform updates, which must be manually flushed via CSS.flushTransformCache(). */
	                transformCache: {}
	            });
	        },
	        /* A parallel to jQuery's $.css(), used for getting/setting Velocity's hooked CSS properties. */
	        hook: null, /* Defined below. */
	        /* Velocity-wide animation time remapping for testing purposes. */
	        mock: false,
	        version: { major: 1, minor: 2, patch: 2 },
	        /* Set to 1 or 2 (most verbose) to output debug info to console. */
	        debug: false
	    };

	    /* Retrieve the appropriate scroll anchor and property name for the browser: https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollY */
	    if (window.pageYOffset !== undefined) {
	        Velocity.State.scrollAnchor = window;
	        Velocity.State.scrollPropertyLeft = "pageXOffset";
	        Velocity.State.scrollPropertyTop = "pageYOffset";
	    } else {
	        Velocity.State.scrollAnchor = document.documentElement || document.body.parentNode || document.body;
	        Velocity.State.scrollPropertyLeft = "scrollLeft";
	        Velocity.State.scrollPropertyTop = "scrollTop";
	    }

	    /* Shorthand alias for jQuery's $.data() utility. */
	    function Data (element) {
	        /* Hardcode a reference to the plugin name. */
	        var response = $.data(element, "velocity");

	        /* jQuery <=1.4.2 returns null instead of undefined when no match is found. We normalize this behavior. */
	        return response === null ? undefined : response;
	    };

	    /**************
	        Easing
	    **************/

	    /* Step easing generator. */
	    function generateStep (steps) {
	        return function (p) {
	            return Math.round(p * steps) * (1 / steps);
	        };
	    }

	    /* Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
	    function generateBezier (mX1, mY1, mX2, mY2) {
	        var NEWTON_ITERATIONS = 4,
	            NEWTON_MIN_SLOPE = 0.001,
	            SUBDIVISION_PRECISION = 0.0000001,
	            SUBDIVISION_MAX_ITERATIONS = 10,
	            kSplineTableSize = 11,
	            kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),
	            float32ArraySupported = "Float32Array" in window;

	        /* Must contain four arguments. */
	        if (arguments.length !== 4) {
	            return false;
	        }

	        /* Arguments must be numbers. */
	        for (var i = 0; i < 4; ++i) {
	            if (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {
	                return false;
	            }
	        }

	        /* X values must be in the [0, 1] range. */
	        mX1 = Math.min(mX1, 1);
	        mX2 = Math.min(mX2, 1);
	        mX1 = Math.max(mX1, 0);
	        mX2 = Math.max(mX2, 0);

	        var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

	        function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
	        function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
	        function C (aA1)      { return 3.0 * aA1; }

	        function calcBezier (aT, aA1, aA2) {
	            return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;
	        }

	        function getSlope (aT, aA1, aA2) {
	            return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
	        }

	        function newtonRaphsonIterate (aX, aGuessT) {
	            for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
	                var currentSlope = getSlope(aGuessT, mX1, mX2);

	                if (currentSlope === 0.0) return aGuessT;

	                var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
	                aGuessT -= currentX / currentSlope;
	            }

	            return aGuessT;
	        }

	        function calcSampleValues () {
	            for (var i = 0; i < kSplineTableSize; ++i) {
	                mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
	            }
	        }

	        function binarySubdivide (aX, aA, aB) {
	            var currentX, currentT, i = 0;

	            do {
	                currentT = aA + (aB - aA) / 2.0;
	                currentX = calcBezier(currentT, mX1, mX2) - aX;
	                if (currentX > 0.0) {
	                  aB = currentT;
	                } else {
	                  aA = currentT;
	                }
	            } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

	            return currentT;
	        }

	        function getTForX (aX) {
	            var intervalStart = 0.0,
	                currentSample = 1,
	                lastSample = kSplineTableSize - 1;

	            for (; currentSample != lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
	                intervalStart += kSampleStepSize;
	            }

	            --currentSample;

	            var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample+1] - mSampleValues[currentSample]),
	                guessForT = intervalStart + dist * kSampleStepSize,
	                initialSlope = getSlope(guessForT, mX1, mX2);

	            if (initialSlope >= NEWTON_MIN_SLOPE) {
	                return newtonRaphsonIterate(aX, guessForT);
	            } else if (initialSlope == 0.0) {
	                return guessForT;
	            } else {
	                return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
	            }
	        }

	        var _precomputed = false;

	        function precompute() {
	            _precomputed = true;
	            if (mX1 != mY1 || mX2 != mY2) calcSampleValues();
	        }

	        var f = function (aX) {
	            if (!_precomputed) precompute();
	            if (mX1 === mY1 && mX2 === mY2) return aX;
	            if (aX === 0) return 0;
	            if (aX === 1) return 1;

	            return calcBezier(getTForX(aX), mY1, mY2);
	        };

	        f.getControlPoints = function() { return [{ x: mX1, y: mY1 }, { x: mX2, y: mY2 }]; };

	        var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";
	        f.toString = function () { return str; };

	        return f;
	    }

	    /* Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
	    /* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
	       then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
	    var generateSpringRK4 = (function () {
	        function springAccelerationForState (state) {
	            return (-state.tension * state.x) - (state.friction * state.v);
	        }

	        function springEvaluateStateWithDerivative (initialState, dt, derivative) {
	            var state = {
	                x: initialState.x + derivative.dx * dt,
	                v: initialState.v + derivative.dv * dt,
	                tension: initialState.tension,
	                friction: initialState.friction
	            };

	            return { dx: state.v, dv: springAccelerationForState(state) };
	        }

	        function springIntegrateState (state, dt) {
	            var a = {
	                    dx: state.v,
	                    dv: springAccelerationForState(state)
	                },
	                b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
	                c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
	                d = springEvaluateStateWithDerivative(state, dt, c),
	                dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
	                dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);

	            state.x = state.x + dxdt * dt;
	            state.v = state.v + dvdt * dt;

	            return state;
	        }

	        return function springRK4Factory (tension, friction, duration) {

	            var initState = {
	                    x: -1,
	                    v: 0,
	                    tension: null,
	                    friction: null
	                },
	                path = [0],
	                time_lapsed = 0,
	                tolerance = 1 / 10000,
	                DT = 16 / 1000,
	                have_duration, dt, last_state;

	            tension = parseFloat(tension) || 500;
	            friction = parseFloat(friction) || 20;
	            duration = duration || null;

	            initState.tension = tension;
	            initState.friction = friction;

	            have_duration = duration !== null;

	            /* Calculate the actual time it takes for this animation to complete with the provided conditions. */
	            if (have_duration) {
	                /* Run the simulation without a duration. */
	                time_lapsed = springRK4Factory(tension, friction);
	                /* Compute the adjusted time delta. */
	                dt = time_lapsed / duration * DT;
	            } else {
	                dt = DT;
	            }

	            while (true) {
	                /* Next/step function .*/
	                last_state = springIntegrateState(last_state || initState, dt);
	                /* Store the position. */
	                path.push(1 + last_state.x);
	                time_lapsed += 16;
	                /* If the change threshold is reached, break. */
	                if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
	                    break;
	                }
	            }

	            /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
	               computed path and returns a snapshot of the position according to a given percentComplete. */
	            return !have_duration ? time_lapsed : function(percentComplete) { return path[ (percentComplete * (path.length - 1)) | 0 ]; };
	        };
	    }());

	    /* jQuery easings. */
	    Velocity.Easings = {
	        linear: function(p) { return p; },
	        swing: function(p) { return 0.5 - Math.cos( p * Math.PI ) / 2 },
	        /* Bonus "spring" easing, which is a less exaggerated version of easeInOutElastic. */
	        spring: function(p) { return 1 - (Math.cos(p * 4.5 * Math.PI) * Math.exp(-p * 6)); }
	    };

	    /* CSS3 and Robert Penner easings. */
	    $.each(
	        [
	            [ "ease", [ 0.25, 0.1, 0.25, 1.0 ] ],
	            [ "ease-in", [ 0.42, 0.0, 1.00, 1.0 ] ],
	            [ "ease-out", [ 0.00, 0.0, 0.58, 1.0 ] ],
	            [ "ease-in-out", [ 0.42, 0.0, 0.58, 1.0 ] ],
	            [ "easeInSine", [ 0.47, 0, 0.745, 0.715 ] ],
	            [ "easeOutSine", [ 0.39, 0.575, 0.565, 1 ] ],
	            [ "easeInOutSine", [ 0.445, 0.05, 0.55, 0.95 ] ],
	            [ "easeInQuad", [ 0.55, 0.085, 0.68, 0.53 ] ],
	            [ "easeOutQuad", [ 0.25, 0.46, 0.45, 0.94 ] ],
	            [ "easeInOutQuad", [ 0.455, 0.03, 0.515, 0.955 ] ],
	            [ "easeInCubic", [ 0.55, 0.055, 0.675, 0.19 ] ],
	            [ "easeOutCubic", [ 0.215, 0.61, 0.355, 1 ] ],
	            [ "easeInOutCubic", [ 0.645, 0.045, 0.355, 1 ] ],
	            [ "easeInQuart", [ 0.895, 0.03, 0.685, 0.22 ] ],
	            [ "easeOutQuart", [ 0.165, 0.84, 0.44, 1 ] ],
	            [ "easeInOutQuart", [ 0.77, 0, 0.175, 1 ] ],
	            [ "easeInQuint", [ 0.755, 0.05, 0.855, 0.06 ] ],
	            [ "easeOutQuint", [ 0.23, 1, 0.32, 1 ] ],
	            [ "easeInOutQuint", [ 0.86, 0, 0.07, 1 ] ],
	            [ "easeInExpo", [ 0.95, 0.05, 0.795, 0.035 ] ],
	            [ "easeOutExpo", [ 0.19, 1, 0.22, 1 ] ],
	            [ "easeInOutExpo", [ 1, 0, 0, 1 ] ],
	            [ "easeInCirc", [ 0.6, 0.04, 0.98, 0.335 ] ],
	            [ "easeOutCirc", [ 0.075, 0.82, 0.165, 1 ] ],
	            [ "easeInOutCirc", [ 0.785, 0.135, 0.15, 0.86 ] ]
	        ], function(i, easingArray) {
	            Velocity.Easings[easingArray[0]] = generateBezier.apply(null, easingArray[1]);
	        });

	    /* Determine the appropriate easing type given an easing input. */
	    function getEasing(value, duration) {
	        var easing = value;

	        /* The easing option can either be a string that references a pre-registered easing,
	           or it can be a two-/four-item array of integers to be converted into a bezier/spring function. */
	        if (Type.isString(value)) {
	            /* Ensure that the easing has been assigned to jQuery's Velocity.Easings object. */
	            if (!Velocity.Easings[value]) {
	                easing = false;
	            }
	        } else if (Type.isArray(value) && value.length === 1) {
	            easing = generateStep.apply(null, value);
	        } else if (Type.isArray(value) && value.length === 2) {
	            /* springRK4 must be passed the animation's duration. */
	            /* Note: If the springRK4 array contains non-numbers, generateSpringRK4() returns an easing
	               function generated with default tension and friction values. */
	            easing = generateSpringRK4.apply(null, value.concat([ duration ]));
	        } else if (Type.isArray(value) && value.length === 4) {
	            /* Note: If the bezier array contains non-numbers, generateBezier() returns false. */
	            easing = generateBezier.apply(null, value);
	        } else {
	            easing = false;
	        }

	        /* Revert to the Velocity-wide default easing type, or fall back to "swing" (which is also jQuery's default)
	           if the Velocity-wide default has been incorrectly modified. */
	        if (easing === false) {
	            if (Velocity.Easings[Velocity.defaults.easing]) {
	                easing = Velocity.defaults.easing;
	            } else {
	                easing = EASING_DEFAULT;
	            }
	        }

	        return easing;
	    }

	    /*****************
	        CSS Stack
	    *****************/

	    /* The CSS object is a highly condensed and performant CSS stack that fully replaces jQuery's.
	       It handles the validation, getting, and setting of both standard CSS properties and CSS property hooks. */
	    /* Note: A "CSS" shorthand is aliased so that our code is easier to read. */
	    var CSS = Velocity.CSS = {

	        /*************
	            RegEx
	        *************/

	        RegEx: {
	            isHex: /^#([A-f\d]{3}){1,2}$/i,
	            /* Unwrap a property value's surrounding text, e.g. "rgba(4, 3, 2, 1)" ==> "4, 3, 2, 1" and "rect(4px 3px 2px 1px)" ==> "4px 3px 2px 1px". */
	            valueUnwrap: /^[A-z]+\((.*)\)$/i,
	            wrappedValueAlreadyExtracted: /[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,
	            /* Split a multi-value property into an array of subvalues, e.g. "rgba(4, 3, 2, 1) 4px 3px 2px 1px" ==> [ "rgba(4, 3, 2, 1)", "4px", "3px", "2px", "1px" ]. */
	            valueSplit: /([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/ig
	        },

	        /************
	            Lists
	        ************/

	        Lists: {
	            colors: [ "fill", "stroke", "stopColor", "color", "backgroundColor", "borderColor", "borderTopColor", "borderRightColor", "borderBottomColor", "borderLeftColor", "outlineColor" ],
	            transformsBase: [ "translateX", "translateY", "scale", "scaleX", "scaleY", "skewX", "skewY", "rotateZ" ],
	            transforms3D: [ "transformPerspective", "translateZ", "scaleZ", "rotateX", "rotateY" ]
	        },

	        /************
	            Hooks
	        ************/

	        /* Hooks allow a subproperty (e.g. "boxShadowBlur") of a compound-value CSS property
	           (e.g. "boxShadow: X Y Blur Spread Color") to be animated as if it were a discrete property. */
	        /* Note: Beyond enabling fine-grained property animation, hooking is necessary since Velocity only
	           tweens properties with single numeric values; unlike CSS transitions, Velocity does not interpolate compound-values. */
	        Hooks: {
	            /********************
	                Registration
	            ********************/

	            /* Templates are a concise way of indicating which subproperties must be individually registered for each compound-value CSS property. */
	            /* Each template consists of the compound-value's base name, its constituent subproperty names, and those subproperties' default values. */
	            templates: {
	                "textShadow": [ "Color X Y Blur", "black 0px 0px 0px" ],
	                "boxShadow": [ "Color X Y Blur Spread", "black 0px 0px 0px 0px" ],
	                "clip": [ "Top Right Bottom Left", "0px 0px 0px 0px" ],
	                "backgroundPosition": [ "X Y", "0% 0%" ],
	                "transformOrigin": [ "X Y Z", "50% 50% 0px" ],
	                "perspectiveOrigin": [ "X Y", "50% 50%" ]
	            },

	            /* A "registered" hook is one that has been converted from its template form into a live,
	               tweenable property. It contains data to associate it with its root property. */
	            registered: {
	                /* Note: A registered hook looks like this ==> textShadowBlur: [ "textShadow", 3 ],
	                   which consists of the subproperty's name, the associated root property's name,
	                   and the subproperty's position in the root's value. */
	            },
	            /* Convert the templates into individual hooks then append them to the registered object above. */
	            register: function () {
	                /* Color hooks registration: Colors are defaulted to white -- as opposed to black -- since colors that are
	                   currently set to "transparent" default to their respective template below when color-animated,
	                   and white is typically a closer match to transparent than black is. An exception is made for text ("color"),
	                   which is almost always set closer to black than white. */
	                for (var i = 0; i < CSS.Lists.colors.length; i++) {
	                    var rgbComponents = (CSS.Lists.colors[i] === "color") ? "0 0 0 1" : "255 255 255 1";
	                    CSS.Hooks.templates[CSS.Lists.colors[i]] = [ "Red Green Blue Alpha", rgbComponents ];
	                }

	                var rootProperty,
	                    hookTemplate,
	                    hookNames;

	                /* In IE, color values inside compound-value properties are positioned at the end the value instead of at the beginning.
	                   Thus, we re-arrange the templates accordingly. */
	                if (IE) {
	                    for (rootProperty in CSS.Hooks.templates) {
	                        hookTemplate = CSS.Hooks.templates[rootProperty];
	                        hookNames = hookTemplate[0].split(" ");

	                        var defaultValues = hookTemplate[1].match(CSS.RegEx.valueSplit);

	                        if (hookNames[0] === "Color") {
	                            /* Reposition both the hook's name and its default value to the end of their respective strings. */
	                            hookNames.push(hookNames.shift());
	                            defaultValues.push(defaultValues.shift());

	                            /* Replace the existing template for the hook's root property. */
	                            CSS.Hooks.templates[rootProperty] = [ hookNames.join(" "), defaultValues.join(" ") ];
	                        }
	                    }
	                }

	                /* Hook registration. */
	                for (rootProperty in CSS.Hooks.templates) {
	                    hookTemplate = CSS.Hooks.templates[rootProperty];
	                    hookNames = hookTemplate[0].split(" ");

	                    for (var i in hookNames) {
	                        var fullHookName = rootProperty + hookNames[i],
	                            hookPosition = i;

	                        /* For each hook, register its full name (e.g. textShadowBlur) with its root property (e.g. textShadow)
	                           and the hook's position in its template's default value string. */
	                        CSS.Hooks.registered[fullHookName] = [ rootProperty, hookPosition ];
	                    }
	                }
	            },

	            /*****************************
	               Injection and Extraction
	            *****************************/

	            /* Look up the root property associated with the hook (e.g. return "textShadow" for "textShadowBlur"). */
	            /* Since a hook cannot be set directly (the browser won't recognize it), style updating for hooks is routed through the hook's root property. */
	            getRoot: function (property) {
	                var hookData = CSS.Hooks.registered[property];

	                if (hookData) {
	                    return hookData[0];
	                } else {
	                    /* If there was no hook match, return the property name untouched. */
	                    return property;
	                }
	            },
	            /* Convert any rootPropertyValue, null or otherwise, into a space-delimited list of hook values so that
	               the targeted hook can be injected or extracted at its standard position. */
	            cleanRootPropertyValue: function(rootProperty, rootPropertyValue) {
	                /* If the rootPropertyValue is wrapped with "rgb()", "clip()", etc., remove the wrapping to normalize the value before manipulation. */
	                if (CSS.RegEx.valueUnwrap.test(rootPropertyValue)) {
	                    rootPropertyValue = rootPropertyValue.match(CSS.RegEx.valueUnwrap)[1];
	                }

	                /* If rootPropertyValue is a CSS null-value (from which there's inherently no hook value to extract),
	                   default to the root's default value as defined in CSS.Hooks.templates. */
	                /* Note: CSS null-values include "none", "auto", and "transparent". They must be converted into their
	                   zero-values (e.g. textShadow: "none" ==> textShadow: "0px 0px 0px black") for hook manipulation to proceed. */
	                if (CSS.Values.isCSSNullValue(rootPropertyValue)) {
	                    rootPropertyValue = CSS.Hooks.templates[rootProperty][1];
	                }

	                return rootPropertyValue;
	            },
	            /* Extracted the hook's value from its root property's value. This is used to get the starting value of an animating hook. */
	            extractValue: function (fullHookName, rootPropertyValue) {
	                var hookData = CSS.Hooks.registered[fullHookName];

	                if (hookData) {
	                    var hookRoot = hookData[0],
	                        hookPosition = hookData[1];

	                    rootPropertyValue = CSS.Hooks.cleanRootPropertyValue(hookRoot, rootPropertyValue);

	                    /* Split rootPropertyValue into its constituent hook values then grab the desired hook at its standard position. */
	                    return rootPropertyValue.toString().match(CSS.RegEx.valueSplit)[hookPosition];
	                } else {
	                    /* If the provided fullHookName isn't a registered hook, return the rootPropertyValue that was passed in. */
	                    return rootPropertyValue;
	                }
	            },
	            /* Inject the hook's value into its root property's value. This is used to piece back together the root property
	               once Velocity has updated one of its individually hooked values through tweening. */
	            injectValue: function (fullHookName, hookValue, rootPropertyValue) {
	                var hookData = CSS.Hooks.registered[fullHookName];

	                if (hookData) {
	                    var hookRoot = hookData[0],
	                        hookPosition = hookData[1],
	                        rootPropertyValueParts,
	                        rootPropertyValueUpdated;

	                    rootPropertyValue = CSS.Hooks.cleanRootPropertyValue(hookRoot, rootPropertyValue);

	                    /* Split rootPropertyValue into its individual hook values, replace the targeted value with hookValue,
	                       then reconstruct the rootPropertyValue string. */
	                    rootPropertyValueParts = rootPropertyValue.toString().match(CSS.RegEx.valueSplit);
	                    rootPropertyValueParts[hookPosition] = hookValue;
	                    rootPropertyValueUpdated = rootPropertyValueParts.join(" ");

	                    return rootPropertyValueUpdated;
	                } else {
	                    /* If the provided fullHookName isn't a registered hook, return the rootPropertyValue that was passed in. */
	                    return rootPropertyValue;
	                }
	            }
	        },

	        /*******************
	           Normalizations
	        *******************/

	        /* Normalizations standardize CSS property manipulation by pollyfilling browser-specific implementations (e.g. opacity)
	           and reformatting special properties (e.g. clip, rgba) to look like standard ones. */
	        Normalizations: {
	            /* Normalizations are passed a normalization target (either the property's name, its extracted value, or its injected value),
	               the targeted element (which may need to be queried), and the targeted property value. */
	            registered: {
	                clip: function (type, element, propertyValue) {
	                    switch (type) {
	                        case "name":
	                            return "clip";
	                        /* Clip needs to be unwrapped and stripped of its commas during extraction. */
	                        case "extract":
	                            var extracted;

	                            /* If Velocity also extracted this value, skip extraction. */
	                            if (CSS.RegEx.wrappedValueAlreadyExtracted.test(propertyValue)) {
	                                extracted = propertyValue;
	                            } else {
	                                /* Remove the "rect()" wrapper. */
	                                extracted = propertyValue.toString().match(CSS.RegEx.valueUnwrap);

	                                /* Strip off commas. */
	                                extracted = extracted ? extracted[1].replace(/,(\s+)?/g, " ") : propertyValue;
	                            }

	                            return extracted;
	                        /* Clip needs to be re-wrapped during injection. */
	                        case "inject":
	                            return "rect(" + propertyValue + ")";
	                    }
	                },

	                blur: function(type, element, propertyValue) {
	                    switch (type) {
	                        case "name":
	                            return Velocity.State.isFirefox ? "filter" : "-webkit-filter";
	                        case "extract":
	                            var extracted = parseFloat(propertyValue);

	                            /* If extracted is NaN, meaning the value isn't already extracted. */
	                            if (!(extracted || extracted === 0)) {
	                                var blurComponent = propertyValue.toString().match(/blur\(([0-9]+[A-z]+)\)/i);

	                                /* If the filter string had a blur component, return just the blur value and unit type. */
	                                if (blurComponent) {
	                                    extracted = blurComponent[1];
	                                /* If the component doesn't exist, default blur to 0. */
	                                } else {
	                                    extracted = 0;
	                                }
	                            }

	                            return extracted;
	                        /* Blur needs to be re-wrapped during injection. */
	                        case "inject":
	                            /* For the blur effect to be fully de-applied, it needs to be set to "none" instead of 0. */
	                            if (!parseFloat(propertyValue)) {
	                                return "none";
	                            } else {
	                                return "blur(" + propertyValue + ")";
	                            }
	                    }
	                },

	                /* <=IE8 do not support the standard opacity property. They use filter:alpha(opacity=INT) instead. */
	                opacity: function (type, element, propertyValue) {
	                    if (IE <= 8) {
	                        switch (type) {
	                            case "name":
	                                return "filter";
	                            case "extract":
	                                /* <=IE8 return a "filter" value of "alpha(opacity=\d{1,3})".
	                                   Extract the value and convert it to a decimal value to match the standard CSS opacity property's formatting. */
	                                var extracted = propertyValue.toString().match(/alpha\(opacity=(.*)\)/i);

	                                if (extracted) {
	                                    /* Convert to decimal value. */
	                                    propertyValue = extracted[1] / 100;
	                                } else {
	                                    /* When extracting opacity, default to 1 since a null value means opacity hasn't been set. */
	                                    propertyValue = 1;
	                                }

	                                return propertyValue;
	                            case "inject":
	                                /* Opacified elements are required to have their zoom property set to a non-zero value. */
	                                element.style.zoom = 1;

	                                /* Setting the filter property on elements with certain font property combinations can result in a
	                                   highly unappealing ultra-bolding effect. There's no way to remedy this throughout a tween, but dropping the
	                                   value altogether (when opacity hits 1) at leasts ensures that the glitch is gone post-tweening. */
	                                if (parseFloat(propertyValue) >= 1) {
	                                    return "";
	                                } else {
	                                  /* As per the filter property's spec, convert the decimal value to a whole number and wrap the value. */
	                                  return "alpha(opacity=" + parseInt(parseFloat(propertyValue) * 100, 10) + ")";
	                                }
	                        }
	                    /* With all other browsers, normalization is not required; return the same values that were passed in. */
	                    } else {
	                        switch (type) {
	                            case "name":
	                                return "opacity";
	                            case "extract":
	                                return propertyValue;
	                            case "inject":
	                                return propertyValue;
	                        }
	                    }
	                }
	            },

	            /*****************************
	                Batched Registrations
	            *****************************/

	            /* Note: Batched normalizations extend the CSS.Normalizations.registered object. */
	            register: function () {

	                /*****************
	                    Transforms
	                *****************/

	                /* Transforms are the subproperties contained by the CSS "transform" property. Transforms must undergo normalization
	                   so that they can be referenced in a properties map by their individual names. */
	                /* Note: When transforms are "set", they are actually assigned to a per-element transformCache. When all transform
	                   setting is complete complete, CSS.flushTransformCache() must be manually called to flush the values to the DOM.
	                   Transform setting is batched in this way to improve performance: the transform style only needs to be updated
	                   once when multiple transform subproperties are being animated simultaneously. */
	                /* Note: IE9 and Android Gingerbread have support for 2D -- but not 3D -- transforms. Since animating unsupported
	                   transform properties results in the browser ignoring the *entire* transform string, we prevent these 3D values
	                   from being normalized for these browsers so that tweening skips these properties altogether
	                   (since it will ignore them as being unsupported by the browser.) */
	                if (!(IE <= 9) && !Velocity.State.isGingerbread) {
	                    /* Note: Since the standalone CSS "perspective" property and the CSS transform "perspective" subproperty
	                    share the same name, the latter is given a unique token within Velocity: "transformPerspective". */
	                    CSS.Lists.transformsBase = CSS.Lists.transformsBase.concat(CSS.Lists.transforms3D);
	                }

	                for (var i = 0; i < CSS.Lists.transformsBase.length; i++) {
	                    /* Wrap the dynamically generated normalization function in a new scope so that transformName's value is
	                    paired with its respective function. (Otherwise, all functions would take the final for loop's transformName.) */
	                    (function() {
	                        var transformName = CSS.Lists.transformsBase[i];

	                        CSS.Normalizations.registered[transformName] = function (type, element, propertyValue) {
	                            switch (type) {
	                                /* The normalized property name is the parent "transform" property -- the property that is actually set in CSS. */
	                                case "name":
	                                    return "transform";
	                                /* Transform values are cached onto a per-element transformCache object. */
	                                case "extract":
	                                    /* If this transform has yet to be assigned a value, return its null value. */
	                                    if (Data(element) === undefined || Data(element).transformCache[transformName] === undefined) {
	                                        /* Scale CSS.Lists.transformsBase default to 1 whereas all other transform properties default to 0. */
	                                        return /^scale/i.test(transformName) ? 1 : 0;
	                                    /* When transform values are set, they are wrapped in parentheses as per the CSS spec.
	                                       Thus, when extracting their values (for tween calculations), we strip off the parentheses. */
	                                    } else {
	                                        return Data(element).transformCache[transformName].replace(/[()]/g, "");
	                                    }
	                                case "inject":
	                                    var invalid = false;

	                                    /* If an individual transform property contains an unsupported unit type, the browser ignores the *entire* transform property.
	                                       Thus, protect users from themselves by skipping setting for transform values supplied with invalid unit types. */
	                                    /* Switch on the base transform type; ignore the axis by removing the last letter from the transform's name. */
	                                    switch (transformName.substr(0, transformName.length - 1)) {
	                                        /* Whitelist unit types for each transform. */
	                                        case "translate":
	                                            invalid = !/(%|px|em|rem|vw|vh|\d)$/i.test(propertyValue);
	                                            break;
	                                        /* Since an axis-free "scale" property is supported as well, a little hack is used here to detect it by chopping off its last letter. */
	                                        case "scal":
	                                        case "scale":
	                                            /* Chrome on Android has a bug in which scaled elements blur if their initial scale
	                                               value is below 1 (which can happen with forcefeeding). Thus, we detect a yet-unset scale property
	                                               and ensure that its first value is always 1. More info: http://stackoverflow.com/questions/10417890/css3-animations-with-transform-causes-blurred-elements-on-webkit/10417962#10417962 */
	                                            if (Velocity.State.isAndroid && Data(element).transformCache[transformName] === undefined && propertyValue < 1) {
	                                                propertyValue = 1;
	                                            }

	                                            invalid = !/(\d)$/i.test(propertyValue);
	                                            break;
	                                        case "skew":
	                                            invalid = !/(deg|\d)$/i.test(propertyValue);
	                                            break;
	                                        case "rotate":
	                                            invalid = !/(deg|\d)$/i.test(propertyValue);
	                                            break;
	                                    }

	                                    if (!invalid) {
	                                        /* As per the CSS spec, wrap the value in parentheses. */
	                                        Data(element).transformCache[transformName] = "(" + propertyValue + ")";
	                                    }

	                                    /* Although the value is set on the transformCache object, return the newly-updated value for the calling code to process as normal. */
	                                    return Data(element).transformCache[transformName];
	                            }
	                        };
	                    })();
	                }

	                /*************
	                    Colors
	                *************/

	                /* Since Velocity only animates a single numeric value per property, color animation is achieved by hooking the individual RGBA components of CSS color properties.
	                   Accordingly, color values must be normalized (e.g. "#ff0000", "red", and "rgb(255, 0, 0)" ==> "255 0 0 1") so that their components can be injected/extracted by CSS.Hooks logic. */
	                for (var i = 0; i < CSS.Lists.colors.length; i++) {
	                    /* Wrap the dynamically generated normalization function in a new scope so that colorName's value is paired with its respective function.
	                       (Otherwise, all functions would take the final for loop's colorName.) */
	                    (function () {
	                        var colorName = CSS.Lists.colors[i];

	                        /* Note: In IE<=8, which support rgb but not rgba, color properties are reverted to rgb by stripping off the alpha component. */
	                        CSS.Normalizations.registered[colorName] = function(type, element, propertyValue) {
	                            switch (type) {
	                                case "name":
	                                    return colorName;
	                                /* Convert all color values into the rgb format. (Old IE can return hex values and color names instead of rgb/rgba.) */
	                                case "extract":
	                                    var extracted;

	                                    /* If the color is already in its hookable form (e.g. "255 255 255 1") due to having been previously extracted, skip extraction. */
	                                    if (CSS.RegEx.wrappedValueAlreadyExtracted.test(propertyValue)) {
	                                        extracted = propertyValue;
	                                    } else {
	                                        var converted,
	                                            colorNames = {
	                                                black: "rgb(0, 0, 0)",
	                                                blue: "rgb(0, 0, 255)",
	                                                gray: "rgb(128, 128, 128)",
	                                                green: "rgb(0, 128, 0)",
	                                                red: "rgb(255, 0, 0)",
	                                                white: "rgb(255, 255, 255)"
	                                            };

	                                        /* Convert color names to rgb. */
	                                        if (/^[A-z]+$/i.test(propertyValue)) {
	                                            if (colorNames[propertyValue] !== undefined) {
	                                                converted = colorNames[propertyValue]
	                                            } else {
	                                                /* If an unmatched color name is provided, default to black. */
	                                                converted = colorNames.black;
	                                            }
	                                        /* Convert hex values to rgb. */
	                                        } else if (CSS.RegEx.isHex.test(propertyValue)) {
	                                            converted = "rgb(" + CSS.Values.hexToRgb(propertyValue).join(" ") + ")";
	                                        /* If the provided color doesn't match any of the accepted color formats, default to black. */
	                                        } else if (!(/^rgba?\(/i.test(propertyValue))) {
	                                            converted = colorNames.black;
	                                        }

	                                        /* Remove the surrounding "rgb/rgba()" string then replace commas with spaces and strip
	                                           repeated spaces (in case the value included spaces to begin with). */
	                                        extracted = (converted || propertyValue).toString().match(CSS.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g, " ");
	                                    }

	                                    /* So long as this isn't <=IE8, add a fourth (alpha) component if it's missing and default it to 1 (visible). */
	                                    if (!(IE <= 8) && extracted.split(" ").length === 3) {
	                                        extracted += " 1";
	                                    }

	                                    return extracted;
	                                case "inject":
	                                    /* If this is IE<=8 and an alpha component exists, strip it off. */
	                                    if (IE <= 8) {
	                                        if (propertyValue.split(" ").length === 4) {
	                                            propertyValue = propertyValue.split(/\s+/).slice(0, 3).join(" ");
	                                        }
	                                    /* Otherwise, add a fourth (alpha) component if it's missing and default it to 1 (visible). */
	                                    } else if (propertyValue.split(" ").length === 3) {
	                                        propertyValue += " 1";
	                                    }

	                                    /* Re-insert the browser-appropriate wrapper("rgb/rgba()"), insert commas, and strip off decimal units
	                                       on all values but the fourth (R, G, and B only accept whole numbers). */
	                                    return (IE <= 8 ? "rgb" : "rgba") + "(" + propertyValue.replace(/\s+/g, ",").replace(/\.(\d)+(?=,)/g, "") + ")";
	                            }
	                        };
	                    })();
	                }
	            }
	        },

	        /************************
	           CSS Property Names
	        ************************/

	        Names: {
	            /* Camelcase a property name into its JavaScript notation (e.g. "background-color" ==> "backgroundColor").
	               Camelcasing is used to normalize property names between and across calls. */
	            camelCase: function (property) {
	                return property.replace(/-(\w)/g, function (match, subMatch) {
	                    return subMatch.toUpperCase();
	                });
	            },

	            /* For SVG elements, some properties (namely, dimensional ones) are GET/SET via the element's HTML attributes (instead of via CSS styles). */
	            SVGAttribute: function (property) {
	                var SVGAttributes = "width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";

	                /* Certain browsers require an SVG transform to be applied as an attribute. (Otherwise, application via CSS is preferable due to 3D support.) */
	                if (IE || (Velocity.State.isAndroid && !Velocity.State.isChrome)) {
	                    SVGAttributes += "|transform";
	                }

	                return new RegExp("^(" + SVGAttributes + ")$", "i").test(property);
	            },

	            /* Determine whether a property should be set with a vendor prefix. */
	            /* If a prefixed version of the property exists, return it. Otherwise, return the original property name.
	               If the property is not at all supported by the browser, return a false flag. */
	            prefixCheck: function (property) {
	                /* If this property has already been checked, return the cached value. */
	                if (Velocity.State.prefixMatches[property]) {
	                    return [ Velocity.State.prefixMatches[property], true ];
	                } else {
	                    var vendors = [ "", "Webkit", "Moz", "ms", "O" ];

	                    for (var i = 0, vendorsLength = vendors.length; i < vendorsLength; i++) {
	                        var propertyPrefixed;

	                        if (i === 0) {
	                            propertyPrefixed = property;
	                        } else {
	                            /* Capitalize the first letter of the property to conform to JavaScript vendor prefix notation (e.g. webkitFilter). */
	                            propertyPrefixed = vendors[i] + property.replace(/^\w/, function(match) { return match.toUpperCase(); });
	                        }

	                        /* Check if the browser supports this property as prefixed. */
	                        if (Type.isString(Velocity.State.prefixElement.style[propertyPrefixed])) {
	                            /* Cache the match. */
	                            Velocity.State.prefixMatches[property] = propertyPrefixed;

	                            return [ propertyPrefixed, true ];
	                        }
	                    }

	                    /* If the browser doesn't support this property in any form, include a false flag so that the caller can decide how to proceed. */
	                    return [ property, false ];
	                }
	            }
	        },

	        /************************
	           CSS Property Values
	        ************************/

	        Values: {
	            /* Hex to RGB conversion. Copyright Tim Down: http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */
	            hexToRgb: function (hex) {
	                var shortformRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i,
	                    longformRegex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
	                    rgbParts;

	                hex = hex.replace(shortformRegex, function (m, r, g, b) {
	                    return r + r + g + g + b + b;
	                });

	                rgbParts = longformRegex.exec(hex);

	                return rgbParts ? [ parseInt(rgbParts[1], 16), parseInt(rgbParts[2], 16), parseInt(rgbParts[3], 16) ] : [ 0, 0, 0 ];
	            },

	            isCSSNullValue: function (value) {
	                /* The browser defaults CSS values that have not been set to either 0 or one of several possible null-value strings.
	                   Thus, we check for both falsiness and these special strings. */
	                /* Null-value checking is performed to default the special strings to 0 (for the sake of tweening) or their hook
	                   templates as defined as CSS.Hooks (for the sake of hook injection/extraction). */
	                /* Note: Chrome returns "rgba(0, 0, 0, 0)" for an undefined color whereas IE returns "transparent". */
	                return (value == 0 || /^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(value));
	            },

	            /* Retrieve a property's default unit type. Used for assigning a unit type when one is not supplied by the user. */
	            getUnitType: function (property) {
	                if (/^(rotate|skew)/i.test(property)) {
	                    return "deg";
	                } else if (/(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(property)) {
	                    /* The above properties are unitless. */
	                    return "";
	                } else {
	                    /* Default to px for all other properties. */
	                    return "px";
	                }
	            },

	            /* HTML elements default to an associated display type when they're not set to display:none. */
	            /* Note: This function is used for correctly setting the non-"none" display value in certain Velocity redirects, such as fadeIn/Out. */
	            getDisplayType: function (element) {
	                var tagName = element && element.tagName.toString().toLowerCase();

	                if (/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(tagName)) {
	                    return "inline";
	                } else if (/^(li)$/i.test(tagName)) {
	                    return "list-item";
	                } else if (/^(tr)$/i.test(tagName)) {
	                    return "table-row";
	                } else if (/^(table)$/i.test(tagName)) {
	                    return "table";
	                } else if (/^(tbody)$/i.test(tagName)) {
	                    return "table-row-group";
	                /* Default to "block" when no match is found. */
	                } else {
	                    return "block";
	                }
	            },

	            /* The class add/remove functions are used to temporarily apply a "velocity-animating" class to elements while they're animating. */
	            addClass: function (element, className) {
	                if (element.classList) {
	                    element.classList.add(className);
	                } else {
	                    element.className += (element.className.length ? " " : "") + className;
	                }
	            },

	            removeClass: function (element, className) {
	                if (element.classList) {
	                    element.classList.remove(className);
	                } else {
	                    element.className = element.className.toString().replace(new RegExp("(^|\\s)" + className.split(" ").join("|") + "(\\s|$)", "gi"), " ");
	                }
	            }
	        },

	        /****************************
	           Style Getting & Setting
	        ****************************/

	        /* The singular getPropertyValue, which routes the logic for all normalizations, hooks, and standard CSS properties. */
	        getPropertyValue: function (element, property, rootPropertyValue, forceStyleLookup) {
	            /* Get an element's computed property value. */
	            /* Note: Retrieving the value of a CSS property cannot simply be performed by checking an element's
	               style attribute (which only reflects user-defined values). Instead, the browser must be queried for a property's
	               *computed* value. You can read more about getComputedStyle here: https://developer.mozilla.org/en/docs/Web/API/window.getComputedStyle */
	            function computePropertyValue (element, property) {
	                /* When box-sizing isn't set to border-box, height and width style values are incorrectly computed when an
	                   element's scrollbars are visible (which expands the element's dimensions). Thus, we defer to the more accurate
	                   offsetHeight/Width property, which includes the total dimensions for interior, border, padding, and scrollbar.
	                   We subtract border and padding to get the sum of interior + scrollbar. */
	                var computedValue = 0;

	                /* IE<=8 doesn't support window.getComputedStyle, thus we defer to jQuery, which has an extensive array
	                   of hacks to accurately retrieve IE8 property values. Re-implementing that logic here is not worth bloating the
	                   codebase for a dying browser. The performance repercussions of using jQuery here are minimal since
	                   Velocity is optimized to rarely (and sometimes never) query the DOM. Further, the $.css() codepath isn't that slow. */
	                if (IE <= 8) {
	                    computedValue = $.css(element, property); /* GET */
	                /* All other browsers support getComputedStyle. The returned live object reference is cached onto its
	                   associated element so that it does not need to be refetched upon every GET. */
	                } else {
	                    /* Browsers do not return height and width values for elements that are set to display:"none". Thus, we temporarily
	                       toggle display to the element type's default value. */
	                    var toggleDisplay = false;

	                    if (/^(width|height)$/.test(property) && CSS.getPropertyValue(element, "display") === 0) {
	                        toggleDisplay = true;
	                        CSS.setPropertyValue(element, "display", CSS.Values.getDisplayType(element));
	                    }

	                    function revertDisplay () {
	                        if (toggleDisplay) {
	                            CSS.setPropertyValue(element, "display", "none");
	                        }
	                    }

	                    if (!forceStyleLookup) {
	                        if (property === "height" && CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() !== "border-box") {
	                            var contentBoxHeight = element.offsetHeight - (parseFloat(CSS.getPropertyValue(element, "borderTopWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "borderBottomWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingTop")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingBottom")) || 0);
	                            revertDisplay();

	                            return contentBoxHeight;
	                        } else if (property === "width" && CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() !== "border-box") {
	                            var contentBoxWidth = element.offsetWidth - (parseFloat(CSS.getPropertyValue(element, "borderLeftWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "borderRightWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingLeft")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingRight")) || 0);
	                            revertDisplay();

	                            return contentBoxWidth;
	                        }
	                    }

	                    var computedStyle;

	                    /* For elements that Velocity hasn't been called on directly (e.g. when Velocity queries the DOM on behalf
	                       of a parent of an element its animating), perform a direct getComputedStyle lookup since the object isn't cached. */
	                    if (Data(element) === undefined) {
	                        computedStyle = window.getComputedStyle(element, null); /* GET */
	                    /* If the computedStyle object has yet to be cached, do so now. */
	                    } else if (!Data(element).computedStyle) {
	                        computedStyle = Data(element).computedStyle = window.getComputedStyle(element, null); /* GET */
	                    /* If computedStyle is cached, use it. */
	                    } else {
	                        computedStyle = Data(element).computedStyle;
	                    }

	                    /* IE and Firefox do not return a value for the generic borderColor -- they only return individual values for each border side's color.
	                       Also, in all browsers, when border colors aren't all the same, a compound value is returned that Velocity isn't setup to parse.
	                       So, as a polyfill for querying individual border side colors, we just return the top border's color and animate all borders from that value. */
	                    if (property === "borderColor") {
	                        property = "borderTopColor";
	                    }

	                    /* IE9 has a bug in which the "filter" property must be accessed from computedStyle using the getPropertyValue method
	                       instead of a direct property lookup. The getPropertyValue method is slower than a direct lookup, which is why we avoid it by default. */
	                    if (IE === 9 && property === "filter") {
	                        computedValue = computedStyle.getPropertyValue(property); /* GET */
	                    } else {
	                        computedValue = computedStyle[property];
	                    }

	                    /* Fall back to the property's style value (if defined) when computedValue returns nothing,
	                       which can happen when the element hasn't been painted. */
	                    if (computedValue === "" || computedValue === null) {
	                        computedValue = element.style[property];
	                    }

	                    revertDisplay();
	                }

	                /* For top, right, bottom, and left (TRBL) values that are set to "auto" on elements of "fixed" or "absolute" position,
	                   defer to jQuery for converting "auto" to a numeric value. (For elements with a "static" or "relative" position, "auto" has the same
	                   effect as being set to 0, so no conversion is necessary.) */
	                /* An example of why numeric conversion is necessary: When an element with "position:absolute" has an untouched "left"
	                   property, which reverts to "auto", left's value is 0 relative to its parent element, but is often non-zero relative
	                   to its *containing* (not parent) element, which is the nearest "position:relative" ancestor or the viewport (and always the viewport in the case of "position:fixed"). */
	                if (computedValue === "auto" && /^(top|right|bottom|left)$/i.test(property)) {
	                    var position = computePropertyValue(element, "position"); /* GET */

	                    /* For absolute positioning, jQuery's $.position() only returns values for top and left;
	                       right and bottom will have their "auto" value reverted to 0. */
	                    /* Note: A jQuery object must be created here since jQuery doesn't have a low-level alias for $.position().
	                       Not a big deal since we're currently in a GET batch anyway. */
	                    if (position === "fixed" || (position === "absolute" && /top|left/i.test(property))) {
	                        /* Note: jQuery strips the pixel unit from its returned values; we re-add it here to conform with computePropertyValue's behavior. */
	                        computedValue = $(element).position()[property] + "px"; /* GET */
	                    }
	                }

	                return computedValue;
	            }

	            var propertyValue;

	            /* If this is a hooked property (e.g. "clipLeft" instead of the root property of "clip"),
	               extract the hook's value from a normalized rootPropertyValue using CSS.Hooks.extractValue(). */
	            if (CSS.Hooks.registered[property]) {
	                var hook = property,
	                    hookRoot = CSS.Hooks.getRoot(hook);

	                /* If a cached rootPropertyValue wasn't passed in (which Velocity always attempts to do in order to avoid requerying the DOM),
	                   query the DOM for the root property's value. */
	                if (rootPropertyValue === undefined) {
	                    /* Since the browser is now being directly queried, use the official post-prefixing property name for this lookup. */
	                    rootPropertyValue = CSS.getPropertyValue(element, CSS.Names.prefixCheck(hookRoot)[0]); /* GET */
	                }

	                /* If this root has a normalization registered, peform the associated normalization extraction. */
	                if (CSS.Normalizations.registered[hookRoot]) {
	                    rootPropertyValue = CSS.Normalizations.registered[hookRoot]("extract", element, rootPropertyValue);
	                }

	                /* Extract the hook's value. */
	                propertyValue = CSS.Hooks.extractValue(hook, rootPropertyValue);

	            /* If this is a normalized property (e.g. "opacity" becomes "filter" in <=IE8) or "translateX" becomes "transform"),
	               normalize the property's name and value, and handle the special case of transforms. */
	            /* Note: Normalizing a property is mutually exclusive from hooking a property since hook-extracted values are strictly
	               numerical and therefore do not require normalization extraction. */
	            } else if (CSS.Normalizations.registered[property]) {
	                var normalizedPropertyName,
	                    normalizedPropertyValue;

	                normalizedPropertyName = CSS.Normalizations.registered[property]("name", element);

	                /* Transform values are calculated via normalization extraction (see below), which checks against the element's transformCache.
	                   At no point do transform GETs ever actually query the DOM; initial stylesheet values are never processed.
	                   This is because parsing 3D transform matrices is not always accurate and would bloat our codebase;
	                   thus, normalization extraction defaults initial transform values to their zero-values (e.g. 1 for scaleX and 0 for translateX). */
	                if (normalizedPropertyName !== "transform") {
	                    normalizedPropertyValue = computePropertyValue(element, CSS.Names.prefixCheck(normalizedPropertyName)[0]); /* GET */

	                    /* If the value is a CSS null-value and this property has a hook template, use that zero-value template so that hooks can be extracted from it. */
	                    if (CSS.Values.isCSSNullValue(normalizedPropertyValue) && CSS.Hooks.templates[property]) {
	                        normalizedPropertyValue = CSS.Hooks.templates[property][1];
	                    }
	                }

	                propertyValue = CSS.Normalizations.registered[property]("extract", element, normalizedPropertyValue);
	            }

	            /* If a (numeric) value wasn't produced via hook extraction or normalization, query the DOM. */
	            if (!/^[\d-]/.test(propertyValue)) {
	                /* For SVG elements, dimensional properties (which SVGAttribute() detects) are tweened via
	                   their HTML attribute values instead of their CSS style values. */
	                if (Data(element) && Data(element).isSVG && CSS.Names.SVGAttribute(property)) {
	                    /* Since the height/width attribute values must be set manually, they don't reflect computed values.
	                       Thus, we use use getBBox() to ensure we always get values for elements with undefined height/width attributes. */
	                    if (/^(height|width)$/i.test(property)) {
	                        /* Firefox throws an error if .getBBox() is called on an SVG that isn't attached to the DOM. */
	                        try {
	                            propertyValue = element.getBBox()[property];
	                        } catch (error) {
	                            propertyValue = 0;
	                        }
	                    /* Otherwise, access the attribute value directly. */
	                    } else {
	                        propertyValue = element.getAttribute(property);
	                    }
	                } else {
	                    propertyValue = computePropertyValue(element, CSS.Names.prefixCheck(property)[0]); /* GET */
	                }
	            }

	            /* Since property lookups are for animation purposes (which entails computing the numeric delta between start and end values),
	               convert CSS null-values to an integer of value 0. */
	            if (CSS.Values.isCSSNullValue(propertyValue)) {
	                propertyValue = 0;
	            }

	            if (Velocity.debug >= 2) console.log("Get " + property + ": " + propertyValue);

	            return propertyValue;
	        },

	        /* The singular setPropertyValue, which routes the logic for all normalizations, hooks, and standard CSS properties. */
	        setPropertyValue: function(element, property, propertyValue, rootPropertyValue, scrollData) {
	            var propertyName = property;

	            /* In order to be subjected to call options and element queueing, scroll animation is routed through Velocity as if it were a standard CSS property. */
	            if (property === "scroll") {
	                /* If a container option is present, scroll the container instead of the browser window. */
	                if (scrollData.container) {
	                    scrollData.container["scroll" + scrollData.direction] = propertyValue;
	                /* Otherwise, Velocity defaults to scrolling the browser window. */
	                } else {
	                    if (scrollData.direction === "Left") {
	                        window.scrollTo(propertyValue, scrollData.alternateValue);
	                    } else {
	                        window.scrollTo(scrollData.alternateValue, propertyValue);
	                    }
	                }
	            } else {
	                /* Transforms (translateX, rotateZ, etc.) are applied to a per-element transformCache object, which is manually flushed via flushTransformCache().
	                   Thus, for now, we merely cache transforms being SET. */
	                if (CSS.Normalizations.registered[property] && CSS.Normalizations.registered[property]("name", element) === "transform") {
	                    /* Perform a normalization injection. */
	                    /* Note: The normalization logic handles the transformCache updating. */
	                    CSS.Normalizations.registered[property]("inject", element, propertyValue);

	                    propertyName = "transform";
	                    propertyValue = Data(element).transformCache[property];
	                } else {
	                    /* Inject hooks. */
	                    if (CSS.Hooks.registered[property]) {
	                        var hookName = property,
	                            hookRoot = CSS.Hooks.getRoot(property);

	                        /* If a cached rootPropertyValue was not provided, query the DOM for the hookRoot's current value. */
	                        rootPropertyValue = rootPropertyValue || CSS.getPropertyValue(element, hookRoot); /* GET */

	                        propertyValue = CSS.Hooks.injectValue(hookName, propertyValue, rootPropertyValue);
	                        property = hookRoot;
	                    }

	                    /* Normalize names and values. */
	                    if (CSS.Normalizations.registered[property]) {
	                        propertyValue = CSS.Normalizations.registered[property]("inject", element, propertyValue);
	                        property = CSS.Normalizations.registered[property]("name", element);
	                    }

	                    /* Assign the appropriate vendor prefix before performing an official style update. */
	                    propertyName = CSS.Names.prefixCheck(property)[0];

	                    /* A try/catch is used for IE<=8, which throws an error when "invalid" CSS values are set, e.g. a negative width.
	                       Try/catch is avoided for other browsers since it incurs a performance overhead. */
	                    if (IE <= 8) {
	                        try {
	                            element.style[propertyName] = propertyValue;
	                        } catch (error) { if (Velocity.debug) console.log("Browser does not support [" + propertyValue + "] for [" + propertyName + "]"); }
	                    /* SVG elements have their dimensional properties (width, height, x, y, cx, etc.) applied directly as attributes instead of as styles. */
	                    /* Note: IE8 does not support SVG elements, so it's okay that we skip it for SVG animation. */
	                    } else if (Data(element) && Data(element).isSVG && CSS.Names.SVGAttribute(property)) {
	                        /* Note: For SVG attributes, vendor-prefixed property names are never used. */
	                        /* Note: Not all CSS properties can be animated via attributes, but the browser won't throw an error for unsupported properties. */
	                        element.setAttribute(property, propertyValue);
	                    } else {
	                        element.style[propertyName] = propertyValue;
	                    }

	                    if (Velocity.debug >= 2) console.log("Set " + property + " (" + propertyName + "): " + propertyValue);
	                }
	            }

	            /* Return the normalized property name and value in case the caller wants to know how these values were modified before being applied to the DOM. */
	            return [ propertyName, propertyValue ];
	        },

	        /* To increase performance by batching transform updates into a single SET, transforms are not directly applied to an element until flushTransformCache() is called. */
	        /* Note: Velocity applies transform properties in the same order that they are chronogically introduced to the element's CSS styles. */
	        flushTransformCache: function(element) {
	            var transformString = "";

	            /* Certain browsers require that SVG transforms be applied as an attribute. However, the SVG transform attribute takes a modified version of CSS's transform string
	               (units are dropped and, except for skewX/Y, subproperties are merged into their master property -- e.g. scaleX and scaleY are merged into scale(X Y). */
	            if ((IE || (Velocity.State.isAndroid && !Velocity.State.isChrome)) && Data(element).isSVG) {
	                /* Since transform values are stored in their parentheses-wrapped form, we use a helper function to strip out their numeric values.
	                   Further, SVG transform properties only take unitless (representing pixels) values, so it's okay that parseFloat() strips the unit suffixed to the float value. */
	                function getTransformFloat (transformProperty) {
	                    return parseFloat(CSS.getPropertyValue(element, transformProperty));
	                }

	                /* Create an object to organize all the transforms that we'll apply to the SVG element. To keep the logic simple,
	                   we process *all* transform properties -- even those that may not be explicitly applied (since they default to their zero-values anyway). */
	                var SVGTransforms = {
	                    translate: [ getTransformFloat("translateX"), getTransformFloat("translateY") ],
	                    skewX: [ getTransformFloat("skewX") ], skewY: [ getTransformFloat("skewY") ],
	                    /* If the scale property is set (non-1), use that value for the scaleX and scaleY values
	                       (this behavior mimics the result of animating all these properties at once on HTML elements). */
	                    scale: getTransformFloat("scale") !== 1 ? [ getTransformFloat("scale"), getTransformFloat("scale") ] : [ getTransformFloat("scaleX"), getTransformFloat("scaleY") ],
	                    /* Note: SVG's rotate transform takes three values: rotation degrees followed by the X and Y values
	                       defining the rotation's origin point. We ignore the origin values (default them to 0). */
	                    rotate: [ getTransformFloat("rotateZ"), 0, 0 ]
	                };

	                /* Iterate through the transform properties in the user-defined property map order.
	                   (This mimics the behavior of non-SVG transform animation.) */
	                $.each(Data(element).transformCache, function(transformName) {
	                    /* Except for with skewX/Y, revert the axis-specific transform subproperties to their axis-free master
	                       properties so that they match up with SVG's accepted transform properties. */
	                    if (/^translate/i.test(transformName)) {
	                        transformName = "translate";
	                    } else if (/^scale/i.test(transformName)) {
	                        transformName = "scale";
	                    } else if (/^rotate/i.test(transformName)) {
	                        transformName = "rotate";
	                    }

	                    /* Check that we haven't yet deleted the property from the SVGTransforms container. */
	                    if (SVGTransforms[transformName]) {
	                        /* Append the transform property in the SVG-supported transform format. As per the spec, surround the space-delimited values in parentheses. */
	                        transformString += transformName + "(" + SVGTransforms[transformName].join(" ") + ")" + " ";

	                        /* After processing an SVG transform property, delete it from the SVGTransforms container so we don't
	                           re-insert the same master property if we encounter another one of its axis-specific properties. */
	                        delete SVGTransforms[transformName];
	                    }
	                });
	            } else {
	                var transformValue,
	                    perspective;

	                /* Transform properties are stored as members of the transformCache object. Concatenate all the members into a string. */
	                $.each(Data(element).transformCache, function(transformName) {
	                    transformValue = Data(element).transformCache[transformName];

	                    /* Transform's perspective subproperty must be set first in order to take effect. Store it temporarily. */
	                    if (transformName === "transformPerspective") {
	                        perspective = transformValue;
	                        return true;
	                    }

	                    /* IE9 only supports one rotation type, rotateZ, which it refers to as "rotate". */
	                    if (IE === 9 && transformName === "rotateZ") {
	                        transformName = "rotate";
	                    }

	                    transformString += transformName + transformValue + " ";
	                });

	                /* If present, set the perspective subproperty first. */
	                if (perspective) {
	                    transformString = "perspective" + perspective + " " + transformString;
	                }
	            }

	            CSS.setPropertyValue(element, "transform", transformString);
	        }
	    };

	    /* Register hooks and normalizations. */
	    CSS.Hooks.register();
	    CSS.Normalizations.register();

	    /* Allow hook setting in the same fashion as jQuery's $.css(). */
	    Velocity.hook = function (elements, arg2, arg3) {
	        var value = undefined;

	        elements = sanitizeElements(elements);

	        $.each(elements, function(i, element) {
	            /* Initialize Velocity's per-element data cache if this element hasn't previously been animated. */
	            if (Data(element) === undefined) {
	                Velocity.init(element);
	            }

	            /* Get property value. If an element set was passed in, only return the value for the first element. */
	            if (arg3 === undefined) {
	                if (value === undefined) {
	                    value = Velocity.CSS.getPropertyValue(element, arg2);
	                }
	            /* Set property value. */
	            } else {
	                /* sPV returns an array of the normalized propertyName/propertyValue pair used to update the DOM. */
	                var adjustedSet = Velocity.CSS.setPropertyValue(element, arg2, arg3);

	                /* Transform properties don't automatically set. They have to be flushed to the DOM. */
	                if (adjustedSet[0] === "transform") {
	                    Velocity.CSS.flushTransformCache(element);
	                }

	                value = adjustedSet;
	            }
	        });

	        return value;
	    };

	    /*****************
	        Animation
	    *****************/

	    var animate = function() {

	        /******************
	            Call Chain
	        ******************/

	        /* Logic for determining what to return to the call stack when exiting out of Velocity. */
	        function getChain () {
	            /* If we are using the utility function, attempt to return this call's promise. If no promise library was detected,
	               default to null instead of returning the targeted elements so that utility function's return value is standardized. */
	            if (isUtility) {
	                return promiseData.promise || null;
	            /* Otherwise, if we're using $.fn, return the jQuery-/Zepto-wrapped element set. */
	            } else {
	                return elementsWrapped;
	            }
	        }

	        /*************************
	           Arguments Assignment
	        *************************/

	        /* To allow for expressive CoffeeScript code, Velocity supports an alternative syntax in which "elements" (or "e"), "properties" (or "p"), and "options" (or "o")
	           objects are defined on a container object that's passed in as Velocity's sole argument. */
	        /* Note: Some browsers automatically populate arguments with a "properties" object. We detect it by checking for its default "names" property. */
	        var syntacticSugar = (arguments[0] && (arguments[0].p || (($.isPlainObject(arguments[0].properties) && !arguments[0].properties.names) || Type.isString(arguments[0].properties)))),
	            /* Whether Velocity was called via the utility function (as opposed to on a jQuery/Zepto object). */
	            isUtility,
	            /* When Velocity is called via the utility function ($.Velocity()/Velocity()), elements are explicitly
	               passed in as the first parameter. Thus, argument positioning varies. We normalize them here. */
	            elementsWrapped,
	            argumentIndex;

	        var elements,
	            propertiesMap,
	            options;

	        /* Detect jQuery/Zepto elements being animated via the $.fn method. */
	        if (Type.isWrapped(this)) {
	            isUtility = false;

	            argumentIndex = 0;
	            elements = this;
	            elementsWrapped = this;
	        /* Otherwise, raw elements are being animated via the utility function. */
	        } else {
	            isUtility = true;

	            argumentIndex = 1;
	            elements = syntacticSugar ? (arguments[0].elements || arguments[0].e) : arguments[0];
	        }

	        elements = sanitizeElements(elements);

	        if (!elements) {
	            return;
	        }

	        if (syntacticSugar) {
	            propertiesMap = arguments[0].properties || arguments[0].p;
	            options = arguments[0].options || arguments[0].o;
	        } else {
	            propertiesMap = arguments[argumentIndex];
	            options = arguments[argumentIndex + 1];
	        }

	        /* The length of the element set (in the form of a nodeList or an array of elements) is defaulted to 1 in case a
	           single raw DOM element is passed in (which doesn't contain a length property). */
	        var elementsLength = elements.length,
	            elementsIndex = 0;

	        /***************************
	            Argument Overloading
	        ***************************/

	        /* Support is included for jQuery's argument overloading: $.animate(propertyMap [, duration] [, easing] [, complete]).
	           Overloading is detected by checking for the absence of an object being passed into options. */
	        /* Note: The stop and finish actions do not accept animation options, and are therefore excluded from this check. */
	        if (!/^(stop|finish|finishAll)$/i.test(propertiesMap) && !$.isPlainObject(options)) {
	            /* The utility function shifts all arguments one position to the right, so we adjust for that offset. */
	            var startingArgumentPosition = argumentIndex + 1;

	            options = {};

	            /* Iterate through all options arguments */
	            for (var i = startingArgumentPosition; i < arguments.length; i++) {
	                /* Treat a number as a duration. Parse it out. */
	                /* Note: The following RegEx will return true if passed an array with a number as its first item.
	                   Thus, arrays are skipped from this check. */
	                if (!Type.isArray(arguments[i]) && (/^(fast|normal|slow)$/i.test(arguments[i]) || /^\d/.test(arguments[i]))) {
	                    options.duration = arguments[i];
	                /* Treat strings and arrays as easings. */
	                } else if (Type.isString(arguments[i]) || Type.isArray(arguments[i])) {
	                    options.easing = arguments[i];
	                /* Treat a function as a complete callback. */
	                } else if (Type.isFunction(arguments[i])) {
	                    options.complete = arguments[i];
	                }
	            }
	        }

	        /***************
	            Promises
	        ***************/

	        var promiseData = {
	                promise: null,
	                resolver: null,
	                rejecter: null
	            };

	        /* If this call was made via the utility function (which is the default method of invocation when jQuery/Zepto are not being used), and if
	           promise support was detected, create a promise object for this call and store references to its resolver and rejecter methods. The resolve
	           method is used when a call completes naturally or is prematurely stopped by the user. In both cases, completeCall() handles the associated
	           call cleanup and promise resolving logic. The reject method is used when an invalid set of arguments is passed into a Velocity call. */
	        /* Note: Velocity employs a call-based queueing architecture, which means that stopping an animating element actually stops the full call that
	           triggered it -- not that one element exclusively. Similarly, there is one promise per call, and all elements targeted by a Velocity call are
	           grouped together for the purposes of resolving and rejecting a promise. */
	        if (isUtility && Velocity.Promise) {
	            promiseData.promise = new Velocity.Promise(function (resolve, reject) {
	                promiseData.resolver = resolve;
	                promiseData.rejecter = reject;
	            });
	        }

	        /*********************
	           Action Detection
	        *********************/

	        /* Velocity's behavior is categorized into "actions": Elements can either be specially scrolled into view,
	           or they can be started, stopped, or reversed. If a literal or referenced properties map is passed in as Velocity's
	           first argument, the associated action is "start". Alternatively, "scroll", "reverse", or "stop" can be passed in instead of a properties map. */
	        var action;

	        switch (propertiesMap) {
	            case "scroll":
	                action = "scroll";
	                break;

	            case "reverse":
	                action = "reverse";
	                break;

	            case "finish":
	            case "finishAll":
	            case "stop":
	                /*******************
	                    Action: Stop
	                *******************/

	                /* Clear the currently-active delay on each targeted element. */
	                $.each(elements, function(i, element) {
	                    if (Data(element) && Data(element).delayTimer) {
	                        /* Stop the timer from triggering its cached next() function. */
	                        clearTimeout(Data(element).delayTimer.setTimeout);

	                        /* Manually call the next() function so that the subsequent queue items can progress. */
	                        if (Data(element).delayTimer.next) {
	                            Data(element).delayTimer.next();
	                        }

	                        delete Data(element).delayTimer;
	                    }

	                    /* If we want to finish everything in the queue, we have to iterate through it
	                       and call each function. This will make them active calls below, which will
	                       cause them to be applied via the duration setting. */
	                    if (propertiesMap === "finishAll" && (options === true || Type.isString(options))) {
	                        /* Iterate through the items in the element's queue. */
	                        $.each($.queue(element, Type.isString(options) ? options : ""), function(_, item) {
	                            /* The queue array can contain an "inprogress" string, which we skip. */
	                            if (Type.isFunction(item)) {
	                                item();
	                            }
	                        });

	                        /* Clearing the $.queue() array is achieved by resetting it to []. */
	                        $.queue(element, Type.isString(options) ? options : "", []);
	                    }
	                });

	                var callsToStop = [];

	                /* When the stop action is triggered, the elements' currently active call is immediately stopped. The active call might have
	                   been applied to multiple elements, in which case all of the call's elements will be stopped. When an element
	                   is stopped, the next item in its animation queue is immediately triggered. */
	                /* An additional argument may be passed in to clear an element's remaining queued calls. Either true (which defaults to the "fx" queue)
	                   or a custom queue string can be passed in. */
	                /* Note: The stop command runs prior to Velocity's Queueing phase since its behavior is intended to take effect *immediately*,
	                   regardless of the element's current queue state. */

	                /* Iterate through every active call. */
	                $.each(Velocity.State.calls, function(i, activeCall) {
	                    /* Inactive calls are set to false by the logic inside completeCall(). Skip them. */
	                    if (activeCall) {
	                        /* Iterate through the active call's targeted elements. */
	                        $.each(activeCall[1], function(k, activeElement) {
	                            /* If true was passed in as a secondary argument, clear absolutely all calls on this element. Otherwise, only
	                               clear calls associated with the relevant queue. */
	                            /* Call stopping logic works as follows:
	                               - options === true --> stop current default queue calls (and queue:false calls), including remaining queued ones.
	                               - options === undefined --> stop current queue:"" call and all queue:false calls.
	                               - options === false --> stop only queue:false calls.
	                               - options === "custom" --> stop current queue:"custom" call, including remaining queued ones (there is no functionality to only clear the currently-running queue:"custom" call). */
	                            var queueName = (options === undefined) ? "" : options;

	                            if (queueName !== true && (activeCall[2].queue !== queueName) && !(options === undefined && activeCall[2].queue === false)) {
	                                return true;
	                            }

	                            /* Iterate through the calls targeted by the stop command. */
	                            $.each(elements, function(l, element) {
	                                /* Check that this call was applied to the target element. */
	                                if (element === activeElement) {
	                                    /* Optionally clear the remaining queued calls. If we're doing "finishAll" this won't find anything,
	                                       due to the queue-clearing above. */
	                                    if (options === true || Type.isString(options)) {
	                                        /* Iterate through the items in the element's queue. */
	                                        $.each($.queue(element, Type.isString(options) ? options : ""), function(_, item) {
	                                            /* The queue array can contain an "inprogress" string, which we skip. */
	                                            if (Type.isFunction(item)) {
	                                                /* Pass the item's callback a flag indicating that we want to abort from the queue call.
	                                                   (Specifically, the queue will resolve the call's associated promise then abort.)  */
	                                                item(null, true);
	                                            }
	                                        });

	                                        /* Clearing the $.queue() array is achieved by resetting it to []. */
	                                        $.queue(element, Type.isString(options) ? options : "", []);
	                                    }

	                                    if (propertiesMap === "stop") {
	                                        /* Since "reverse" uses cached start values (the previous call's endValues), these values must be
	                                           changed to reflect the final value that the elements were actually tweened to. */
	                                        /* Note: If only queue:false animations are currently running on an element, it won't have a tweensContainer
	                                           object. Also, queue:false animations can't be reversed. */
	                                        if (Data(element) && Data(element).tweensContainer && queueName !== false) {
	                                            $.each(Data(element).tweensContainer, function(m, activeTween) {
	                                                activeTween.endValue = activeTween.currentValue;
	                                            });
	                                        }

	                                        callsToStop.push(i);
	                                    } else if (propertiesMap === "finish" || propertiesMap === "finishAll") {
	                                        /* To get active tweens to finish immediately, we forcefully shorten their durations to 1ms so that
	                                        they finish upon the next rAf tick then proceed with normal call completion logic. */
	                                        activeCall[2].duration = 1;
	                                    }
	                                }
	                            });
	                        });
	                    }
	                });

	                /* Prematurely call completeCall() on each matched active call. Pass an additional flag for "stop" to indicate
	                   that the complete callback and display:none setting should be skipped since we're completing prematurely. */
	                if (propertiesMap === "stop") {
	                    $.each(callsToStop, function(i, j) {
	                        completeCall(j, true);
	                    });

	                    if (promiseData.promise) {
	                        /* Immediately resolve the promise associated with this stop call since stop runs synchronously. */
	                        promiseData.resolver(elements);
	                    }
	                }

	                /* Since we're stopping, and not proceeding with queueing, exit out of Velocity. */
	                return getChain();

	            default:
	                /* Treat a non-empty plain object as a literal properties map. */
	                if ($.isPlainObject(propertiesMap) && !Type.isEmptyObject(propertiesMap)) {
	                    action = "start";

	                /****************
	                    Redirects
	                ****************/

	                /* Check if a string matches a registered redirect (see Redirects above). */
	                } else if (Type.isString(propertiesMap) && Velocity.Redirects[propertiesMap]) {
	                    var opts = $.extend({}, options),
	                        durationOriginal = opts.duration,
	                        delayOriginal = opts.delay || 0;

	                    /* If the backwards option was passed in, reverse the element set so that elements animate from the last to the first. */
	                    if (opts.backwards === true) {
	                        elements = $.extend(true, [], elements).reverse();
	                    }

	                    /* Individually trigger the redirect for each element in the set to prevent users from having to handle iteration logic in their redirect. */
	                    $.each(elements, function(elementIndex, element) {
	                        /* If the stagger option was passed in, successively delay each element by the stagger value (in ms). Retain the original delay value. */
	                        if (parseFloat(opts.stagger)) {
	                            opts.delay = delayOriginal + (parseFloat(opts.stagger) * elementIndex);
	                        } else if (Type.isFunction(opts.stagger)) {
	                            opts.delay = delayOriginal + opts.stagger.call(element, elementIndex, elementsLength);
	                        }

	                        /* If the drag option was passed in, successively increase/decrease (depending on the presense of opts.backwards)
	                           the duration of each element's animation, using floors to prevent producing very short durations. */
	                        if (opts.drag) {
	                            /* Default the duration of UI pack effects (callouts and transitions) to 1000ms instead of the usual default duration of 400ms. */
	                            opts.duration = parseFloat(durationOriginal) || (/^(callout|transition)/.test(propertiesMap) ? 1000 : DURATION_DEFAULT);

	                            /* For each element, take the greater duration of: A) animation completion percentage relative to the original duration,
	                               B) 75% of the original duration, or C) a 200ms fallback (in case duration is already set to a low value).
	                               The end result is a baseline of 75% of the redirect's duration that increases/decreases as the end of the element set is approached. */
	                            opts.duration = Math.max(opts.duration * (opts.backwards ? 1 - elementIndex/elementsLength : (elementIndex + 1) / elementsLength), opts.duration * 0.75, 200);
	                        }

	                        /* Pass in the call's opts object so that the redirect can optionally extend it. It defaults to an empty object instead of null to
	                           reduce the opts checking logic required inside the redirect. */
	                        Velocity.Redirects[propertiesMap].call(element, element, opts || {}, elementIndex, elementsLength, elements, promiseData.promise ? promiseData : undefined);
	                    });

	                    /* Since the animation logic resides within the redirect's own code, abort the remainder of this call.
	                       (The performance overhead up to this point is virtually non-existant.) */
	                    /* Note: The jQuery call chain is kept intact by returning the complete element set. */
	                    return getChain();
	                } else {
	                    var abortError = "Velocity: First argument (" + propertiesMap + ") was not a property map, a known action, or a registered redirect. Aborting.";

	                    if (promiseData.promise) {
	                        promiseData.rejecter(new Error(abortError));
	                    } else {
	                        console.log(abortError);
	                    }

	                    return getChain();
	                }
	        }

	        /**************************
	            Call-Wide Variables
	        **************************/

	        /* A container for CSS unit conversion ratios (e.g. %, rem, and em ==> px) that is used to cache ratios across all elements
	           being animated in a single Velocity call. Calculating unit ratios necessitates DOM querying and updating, and is therefore
	           avoided (via caching) wherever possible. This container is call-wide instead of page-wide to avoid the risk of using stale
	           conversion metrics across Velocity animations that are not immediately consecutively chained. */
	        var callUnitConversionData = {
	                lastParent: null,
	                lastPosition: null,
	                lastFontSize: null,
	                lastPercentToPxWidth: null,
	                lastPercentToPxHeight: null,
	                lastEmToPx: null,
	                remToPx: null,
	                vwToPx: null,
	                vhToPx: null
	            };

	        /* A container for all the ensuing tween data and metadata associated with this call. This container gets pushed to the page-wide
	           Velocity.State.calls array that is processed during animation ticking. */
	        var call = [];

	        /************************
	           Element Processing
	        ************************/

	        /* Element processing consists of three parts -- data processing that cannot go stale and data processing that *can* go stale (i.e. third-party style modifications):
	           1) Pre-Queueing: Element-wide variables, including the element's data storage, are instantiated. Call options are prepared. If triggered, the Stop action is executed.
	           2) Queueing: The logic that runs once this call has reached its point of execution in the element's $.queue() stack. Most logic is placed here to avoid risking it becoming stale.
	           3) Pushing: Consolidation of the tween data followed by its push onto the global in-progress calls container.
	        */

	        function processElement () {

	            /*************************
	               Part I: Pre-Queueing
	            *************************/

	            /***************************
	               Element-Wide Variables
	            ***************************/

	            var element = this,
	                /* The runtime opts object is the extension of the current call's options and Velocity's page-wide option defaults. */
	                opts = $.extend({}, Velocity.defaults, options),
	                /* A container for the processed data associated with each property in the propertyMap.
	                   (Each property in the map produces its own "tween".) */
	                tweensContainer = {},
	                elementUnitConversionData;

	            /******************
	               Element Init
	            ******************/

	            if (Data(element) === undefined) {
	                Velocity.init(element);
	            }

	            /******************
	               Option: Delay
	            ******************/

	            /* Since queue:false doesn't respect the item's existing queue, we avoid injecting its delay here (it's set later on). */
	            /* Note: Velocity rolls its own delay function since jQuery doesn't have a utility alias for $.fn.delay()
	               (and thus requires jQuery element creation, which we avoid since its overhead includes DOM querying). */
	            if (parseFloat(opts.delay) && opts.queue !== false) {
	                $.queue(element, opts.queue, function(next) {
	                    /* This is a flag used to indicate to the upcoming completeCall() function that this queue entry was initiated by Velocity. See completeCall() for further details. */
	                    Velocity.velocityQueueEntryFlag = true;

	                    /* The ensuing queue item (which is assigned to the "next" argument that $.queue() automatically passes in) will be triggered after a setTimeout delay.
	                       The setTimeout is stored so that it can be subjected to clearTimeout() if this animation is prematurely stopped via Velocity's "stop" command. */
	                    Data(element).delayTimer = {
	                        setTimeout: setTimeout(next, parseFloat(opts.delay)),
	                        next: next
	                    };
	                });
	            }

	            /*********************
	               Option: Duration
	            *********************/

	            /* Support for jQuery's named durations. */
	            switch (opts.duration.toString().toLowerCase()) {
	                case "fast":
	                    opts.duration = 200;
	                    break;

	                case "normal":
	                    opts.duration = DURATION_DEFAULT;
	                    break;

	                case "slow":
	                    opts.duration = 600;
	                    break;

	                default:
	                    /* Remove the potential "ms" suffix and default to 1 if the user is attempting to set a duration of 0 (in order to produce an immediate style change). */
	                    opts.duration = parseFloat(opts.duration) || 1;
	            }

	            /************************
	               Global Option: Mock
	            ************************/

	            if (Velocity.mock !== false) {
	                /* In mock mode, all animations are forced to 1ms so that they occur immediately upon the next rAF tick.
	                   Alternatively, a multiplier can be passed in to time remap all delays and durations. */
	                if (Velocity.mock === true) {
	                    opts.duration = opts.delay = 1;
	                } else {
	                    opts.duration *= parseFloat(Velocity.mock) || 1;
	                    opts.delay *= parseFloat(Velocity.mock) || 1;
	                }
	            }

	            /*******************
	               Option: Easing
	            *******************/

	            opts.easing = getEasing(opts.easing, opts.duration);

	            /**********************
	               Option: Callbacks
	            **********************/

	            /* Callbacks must functions. Otherwise, default to null. */
	            if (opts.begin && !Type.isFunction(opts.begin)) {
	                opts.begin = null;
	            }

	            if (opts.progress && !Type.isFunction(opts.progress)) {
	                opts.progress = null;
	            }

	            if (opts.complete && !Type.isFunction(opts.complete)) {
	                opts.complete = null;
	            }

	            /*********************************
	               Option: Display & Visibility
	            *********************************/

	            /* Refer to Velocity's documentation (VelocityJS.org/#displayAndVisibility) for a description of the display and visibility options' behavior. */
	            /* Note: We strictly check for undefined instead of falsiness because display accepts an empty string value. */
	            if (opts.display !== undefined && opts.display !== null) {
	                opts.display = opts.display.toString().toLowerCase();

	                /* Users can pass in a special "auto" value to instruct Velocity to set the element to its default display value. */
	                if (opts.display === "auto") {
	                    opts.display = Velocity.CSS.Values.getDisplayType(element);
	                }
	            }

	            if (opts.visibility !== undefined && opts.visibility !== null) {
	                opts.visibility = opts.visibility.toString().toLowerCase();
	            }

	            /**********************
	               Option: mobileHA
	            **********************/

	            /* When set to true, and if this is a mobile device, mobileHA automatically enables hardware acceleration (via a null transform hack)
	               on animating elements. HA is removed from the element at the completion of its animation. */
	            /* Note: Android Gingerbread doesn't support HA. If a null transform hack (mobileHA) is in fact set, it will prevent other tranform subproperties from taking effect. */
	            /* Note: You can read more about the use of mobileHA in Velocity's documentation: VelocityJS.org/#mobileHA. */
	            opts.mobileHA = (opts.mobileHA && Velocity.State.isMobile && !Velocity.State.isGingerbread);

	            /***********************
	               Part II: Queueing
	            ***********************/

	            /* When a set of elements is targeted by a Velocity call, the set is broken up and each element has the current Velocity call individually queued onto it.
	               In this way, each element's existing queue is respected; some elements may already be animating and accordingly should not have this current Velocity call triggered immediately. */
	            /* In each queue, tween data is processed for each animating property then pushed onto the call-wide calls array. When the last element in the set has had its tweens processed,
	               the call array is pushed to Velocity.State.calls for live processing by the requestAnimationFrame tick. */
	            function buildQueue (next) {

	                /*******************
	                   Option: Begin
	                *******************/

	                /* The begin callback is fired once per call -- not once per elemenet -- and is passed the full raw DOM element set as both its context and its first argument. */
	                if (opts.begin && elementsIndex === 0) {
	                    /* We throw callbacks in a setTimeout so that thrown errors don't halt the execution of Velocity itself. */
	                    try {
	                        opts.begin.call(elements, elements);
	                    } catch (error) {
	                        setTimeout(function() { throw error; }, 1);
	                    }
	                }

	                /*****************************************
	                   Tween Data Construction (for Scroll)
	                *****************************************/

	                /* Note: In order to be subjected to chaining and animation options, scroll's tweening is routed through Velocity as if it were a standard CSS property animation. */
	                if (action === "scroll") {
	                    /* The scroll action uniquely takes an optional "offset" option -- specified in pixels -- that offsets the targeted scroll position. */
	                    var scrollDirection = (/^x$/i.test(opts.axis) ? "Left" : "Top"),
	                        scrollOffset = parseFloat(opts.offset) || 0,
	                        scrollPositionCurrent,
	                        scrollPositionCurrentAlternate,
	                        scrollPositionEnd;

	                    /* Scroll also uniquely takes an optional "container" option, which indicates the parent element that should be scrolled --
	                       as opposed to the browser window itself. This is useful for scrolling toward an element that's inside an overflowing parent element. */
	                    if (opts.container) {
	                        /* Ensure that either a jQuery object or a raw DOM element was passed in. */
	                        if (Type.isWrapped(opts.container) || Type.isNode(opts.container)) {
	                            /* Extract the raw DOM element from the jQuery wrapper. */
	                            opts.container = opts.container[0] || opts.container;
	                            /* Note: Unlike other properties in Velocity, the browser's scroll position is never cached since it so frequently changes
	                               (due to the user's natural interaction with the page). */
	                            scrollPositionCurrent = opts.container["scroll" + scrollDirection]; /* GET */

	                            /* $.position() values are relative to the container's currently viewable area (without taking into account the container's true dimensions
	                               -- say, for example, if the container was not overflowing). Thus, the scroll end value is the sum of the child element's position *and*
	                               the scroll container's current scroll position. */
	                            scrollPositionEnd = (scrollPositionCurrent + $(element).position()[scrollDirection.toLowerCase()]) + scrollOffset; /* GET */
	                        /* If a value other than a jQuery object or a raw DOM element was passed in, default to null so that this option is ignored. */
	                        } else {
	                            opts.container = null;
	                        }
	                    } else {
	                        /* If the window itself is being scrolled -- not a containing element -- perform a live scroll position lookup using
	                           the appropriate cached property names (which differ based on browser type). */
	                        scrollPositionCurrent = Velocity.State.scrollAnchor[Velocity.State["scrollProperty" + scrollDirection]]; /* GET */
	                        /* When scrolling the browser window, cache the alternate axis's current value since window.scrollTo() doesn't let us change only one value at a time. */
	                        scrollPositionCurrentAlternate = Velocity.State.scrollAnchor[Velocity.State["scrollProperty" + (scrollDirection === "Left" ? "Top" : "Left")]]; /* GET */

	                        /* Unlike $.position(), $.offset() values are relative to the browser window's true dimensions -- not merely its currently viewable area --
	                           and therefore end values do not need to be compounded onto current values. */
	                        scrollPositionEnd = $(element).offset()[scrollDirection.toLowerCase()] + scrollOffset; /* GET */
	                    }

	                    /* Since there's only one format that scroll's associated tweensContainer can take, we create it manually. */
	                    tweensContainer = {
	                        scroll: {
	                            rootPropertyValue: false,
	                            startValue: scrollPositionCurrent,
	                            currentValue: scrollPositionCurrent,
	                            endValue: scrollPositionEnd,
	                            unitType: "",
	                            easing: opts.easing,
	                            scrollData: {
	                                container: opts.container,
	                                direction: scrollDirection,
	                                alternateValue: scrollPositionCurrentAlternate
	                            }
	                        },
	                        element: element
	                    };

	                    if (Velocity.debug) console.log("tweensContainer (scroll): ", tweensContainer.scroll, element);

	                /******************************************
	                   Tween Data Construction (for Reverse)
	                ******************************************/

	                /* Reverse acts like a "start" action in that a property map is animated toward. The only difference is
	                   that the property map used for reverse is the inverse of the map used in the previous call. Thus, we manipulate
	                   the previous call to construct our new map: use the previous map's end values as our new map's start values. Copy over all other data. */
	                /* Note: Reverse can be directly called via the "reverse" parameter, or it can be indirectly triggered via the loop option. (Loops are composed of multiple reverses.) */
	                /* Note: Reverse calls do not need to be consecutively chained onto a currently-animating element in order to operate on cached values;
	                   there is no harm to reverse being called on a potentially stale data cache since reverse's behavior is simply defined
	                   as reverting to the element's values as they were prior to the previous *Velocity* call. */
	                } else if (action === "reverse") {
	                    /* Abort if there is no prior animation data to reverse to. */
	                    if (!Data(element).tweensContainer) {
	                        /* Dequeue the element so that this queue entry releases itself immediately, allowing subsequent queue entries to run. */
	                        $.dequeue(element, opts.queue);

	                        return;
	                    } else {
	                        /*********************
	                           Options Parsing
	                        *********************/

	                        /* If the element was hidden via the display option in the previous call,
	                           revert display to "auto" prior to reversal so that the element is visible again. */
	                        if (Data(element).opts.display === "none") {
	                            Data(element).opts.display = "auto";
	                        }

	                        if (Data(element).opts.visibility === "hidden") {
	                            Data(element).opts.visibility = "visible";
	                        }

	                        /* If the loop option was set in the previous call, disable it so that "reverse" calls aren't recursively generated.
	                           Further, remove the previous call's callback options; typically, users do not want these to be refired. */
	                        Data(element).opts.loop = false;
	                        Data(element).opts.begin = null;
	                        Data(element).opts.complete = null;

	                        /* Since we're extending an opts object that has already been extended with the defaults options object,
	                           we remove non-explicitly-defined properties that are auto-assigned values. */
	                        if (!options.easing) {
	                            delete opts.easing;
	                        }

	                        if (!options.duration) {
	                            delete opts.duration;
	                        }

	                        /* The opts object used for reversal is an extension of the options object optionally passed into this
	                           reverse call plus the options used in the previous Velocity call. */
	                        opts = $.extend({}, Data(element).opts, opts);

	                        /*************************************
	                           Tweens Container Reconstruction
	                        *************************************/

	                        /* Create a deepy copy (indicated via the true flag) of the previous call's tweensContainer. */
	                        var lastTweensContainer = $.extend(true, {}, Data(element).tweensContainer);

	                        /* Manipulate the previous tweensContainer by replacing its end values and currentValues with its start values. */
	                        for (var lastTween in lastTweensContainer) {
	                            /* In addition to tween data, tweensContainers contain an element property that we ignore here. */
	                            if (lastTween !== "element") {
	                                var lastStartValue = lastTweensContainer[lastTween].startValue;

	                                lastTweensContainer[lastTween].startValue = lastTweensContainer[lastTween].currentValue = lastTweensContainer[lastTween].endValue;
	                                lastTweensContainer[lastTween].endValue = lastStartValue;

	                                /* Easing is the only option that embeds into the individual tween data (since it can be defined on a per-property basis).
	                                   Accordingly, every property's easing value must be updated when an options object is passed in with a reverse call.
	                                   The side effect of this extensibility is that all per-property easing values are forcefully reset to the new value. */
	                                if (!Type.isEmptyObject(options)) {
	                                    lastTweensContainer[lastTween].easing = opts.easing;
	                                }

	                                if (Velocity.debug) console.log("reverse tweensContainer (" + lastTween + "): " + JSON.stringify(lastTweensContainer[lastTween]), element);
	                            }
	                        }

	                        tweensContainer = lastTweensContainer;
	                    }

	                /*****************************************
	                   Tween Data Construction (for Start)
	                *****************************************/

	                } else if (action === "start") {

	                    /*************************
	                        Value Transferring
	                    *************************/

	                    /* If this queue entry follows a previous Velocity-initiated queue entry *and* if this entry was created
	                       while the element was in the process of being animated by Velocity, then this current call is safe to use
	                       the end values from the prior call as its start values. Velocity attempts to perform this value transfer
	                       process whenever possible in order to avoid requerying the DOM. */
	                    /* If values aren't transferred from a prior call and start values were not forcefed by the user (more on this below),
	                       then the DOM is queried for the element's current values as a last resort. */
	                    /* Note: Conversely, animation reversal (and looping) *always* perform inter-call value transfers; they never requery the DOM. */
	                    var lastTweensContainer;

	                    /* The per-element isAnimating flag is used to indicate whether it's safe (i.e. the data isn't stale)
	                       to transfer over end values to use as start values. If it's set to true and there is a previous
	                       Velocity call to pull values from, do so. */
	                    if (Data(element).tweensContainer && Data(element).isAnimating === true) {
	                        lastTweensContainer = Data(element).tweensContainer;
	                    }

	                    /***************************
	                       Tween Data Calculation
	                    ***************************/

	                    /* This function parses property data and defaults endValue, easing, and startValue as appropriate. */
	                    /* Property map values can either take the form of 1) a single value representing the end value,
	                       or 2) an array in the form of [ endValue, [, easing] [, startValue] ].
	                       The optional third parameter is a forcefed startValue to be used instead of querying the DOM for
	                       the element's current value. Read Velocity's docmentation to learn more about forcefeeding: VelocityJS.org/#forcefeeding */
	                    function parsePropertyValue (valueData, skipResolvingEasing) {
	                        var endValue = undefined,
	                            easing = undefined,
	                            startValue = undefined;

	                        /* Handle the array format, which can be structured as one of three potential overloads:
	                           A) [ endValue, easing, startValue ], B) [ endValue, easing ], or C) [ endValue, startValue ] */
	                        if (Type.isArray(valueData)) {
	                            /* endValue is always the first item in the array. Don't bother validating endValue's value now
	                               since the ensuing property cycling logic does that. */
	                            endValue = valueData[0];

	                            /* Two-item array format: If the second item is a number, function, or hex string, treat it as a
	                               start value since easings can only be non-hex strings or arrays. */
	                            if ((!Type.isArray(valueData[1]) && /^[\d-]/.test(valueData[1])) || Type.isFunction(valueData[1]) || CSS.RegEx.isHex.test(valueData[1])) {
	                                startValue = valueData[1];
	                            /* Two or three-item array: If the second item is a non-hex string or an array, treat it as an easing. */
	                            } else if ((Type.isString(valueData[1]) && !CSS.RegEx.isHex.test(valueData[1])) || Type.isArray(valueData[1])) {
	                                easing = skipResolvingEasing ? valueData[1] : getEasing(valueData[1], opts.duration);

	                                /* Don't bother validating startValue's value now since the ensuing property cycling logic inherently does that. */
	                                if (valueData[2] !== undefined) {
	                                    startValue = valueData[2];
	                                }
	                            }
	                        /* Handle the single-value format. */
	                        } else {
	                            endValue = valueData;
	                        }

	                        /* Default to the call's easing if a per-property easing type was not defined. */
	                        if (!skipResolvingEasing) {
	                            easing = easing || opts.easing;
	                        }

	                        /* If functions were passed in as values, pass the function the current element as its context,
	                           plus the element's index and the element set's size as arguments. Then, assign the returned value. */
	                        if (Type.isFunction(endValue)) {
	                            endValue = endValue.call(element, elementsIndex, elementsLength);
	                        }

	                        if (Type.isFunction(startValue)) {
	                            startValue = startValue.call(element, elementsIndex, elementsLength);
	                        }

	                        /* Allow startValue to be left as undefined to indicate to the ensuing code that its value was not forcefed. */
	                        return [ endValue || 0, easing, startValue ];
	                    }

	                    /* Cycle through each property in the map, looking for shorthand color properties (e.g. "color" as opposed to "colorRed"). Inject the corresponding
	                       colorRed, colorGreen, and colorBlue RGB component tweens into the propertiesMap (which Velocity understands) and remove the shorthand property. */
	                    $.each(propertiesMap, function(property, value) {
	                        /* Find shorthand color properties that have been passed a hex string. */
	                        if (RegExp("^" + CSS.Lists.colors.join("$|^") + "$").test(property)) {
	                            /* Parse the value data for each shorthand. */
	                            var valueData = parsePropertyValue(value, true),
	                                endValue = valueData[0],
	                                easing = valueData[1],
	                                startValue = valueData[2];

	                            if (CSS.RegEx.isHex.test(endValue)) {
	                                /* Convert the hex strings into their RGB component arrays. */
	                                var colorComponents = [ "Red", "Green", "Blue" ],
	                                    endValueRGB = CSS.Values.hexToRgb(endValue),
	                                    startValueRGB = startValue ? CSS.Values.hexToRgb(startValue) : undefined;

	                                /* Inject the RGB component tweens into propertiesMap. */
	                                for (var i = 0; i < colorComponents.length; i++) {
	                                    var dataArray = [ endValueRGB[i] ];

	                                    if (easing) {
	                                        dataArray.push(easing);
	                                    }

	                                    if (startValueRGB !== undefined) {
	                                        dataArray.push(startValueRGB[i]);
	                                    }

	                                    propertiesMap[property + colorComponents[i]] = dataArray;
	                                }

	                                /* Remove the intermediary shorthand property entry now that we've processed it. */
	                                delete propertiesMap[property];
	                            }
	                        }
	                    });

	                    /* Create a tween out of each property, and append its associated data to tweensContainer. */
	                    for (var property in propertiesMap) {

	                        /**************************
	                           Start Value Sourcing
	                        **************************/

	                        /* Parse out endValue, easing, and startValue from the property's data. */
	                        var valueData = parsePropertyValue(propertiesMap[property]),
	                            endValue = valueData[0],
	                            easing = valueData[1],
	                            startValue = valueData[2];

	                        /* Now that the original property name's format has been used for the parsePropertyValue() lookup above,
	                           we force the property to its camelCase styling to normalize it for manipulation. */
	                        property = CSS.Names.camelCase(property);

	                        /* In case this property is a hook, there are circumstances where we will intend to work on the hook's root property and not the hooked subproperty. */
	                        var rootProperty = CSS.Hooks.getRoot(property),
	                            rootPropertyValue = false;

	                        /* Other than for the dummy tween property, properties that are not supported by the browser (and do not have an associated normalization) will
	                           inherently produce no style changes when set, so they are skipped in order to decrease animation tick overhead.
	                           Property support is determined via prefixCheck(), which returns a false flag when no supported is detected. */
	                        /* Note: Since SVG elements have some of their properties directly applied as HTML attributes,
	                           there is no way to check for their explicit browser support, and so we skip skip this check for them. */
	                        if (!Data(element).isSVG && rootProperty !== "tween" && CSS.Names.prefixCheck(rootProperty)[1] === false && CSS.Normalizations.registered[rootProperty] === undefined) {
	                            if (Velocity.debug) console.log("Skipping [" + rootProperty + "] due to a lack of browser support.");

	                            continue;
	                        }

	                        /* If the display option is being set to a non-"none" (e.g. "block") and opacity (filter on IE<=8) is being
	                           animated to an endValue of non-zero, the user's intention is to fade in from invisible, thus we forcefeed opacity
	                           a startValue of 0 if its startValue hasn't already been sourced by value transferring or prior forcefeeding. */
	                        if (((opts.display !== undefined && opts.display !== null && opts.display !== "none") || (opts.visibility !== undefined && opts.visibility !== "hidden")) && /opacity|filter/.test(property) && !startValue && endValue !== 0) {
	                            startValue = 0;
	                        }

	                        /* If values have been transferred from the previous Velocity call, extract the endValue and rootPropertyValue
	                           for all of the current call's properties that were *also* animated in the previous call. */
	                        /* Note: Value transferring can optionally be disabled by the user via the _cacheValues option. */
	                        if (opts._cacheValues && lastTweensContainer && lastTweensContainer[property]) {
	                            if (startValue === undefined) {
	                                startValue = lastTweensContainer[property].endValue + lastTweensContainer[property].unitType;
	                            }

	                            /* The previous call's rootPropertyValue is extracted from the element's data cache since that's the
	                               instance of rootPropertyValue that gets freshly updated by the tweening process, whereas the rootPropertyValue
	                               attached to the incoming lastTweensContainer is equal to the root property's value prior to any tweening. */
	                            rootPropertyValue = Data(element).rootPropertyValueCache[rootProperty];
	                        /* If values were not transferred from a previous Velocity call, query the DOM as needed. */
	                        } else {
	                            /* Handle hooked properties. */
	                            if (CSS.Hooks.registered[property]) {
	                               if (startValue === undefined) {
	                                    rootPropertyValue = CSS.getPropertyValue(element, rootProperty); /* GET */
	                                    /* Note: The following getPropertyValue() call does not actually trigger a DOM query;
	                                       getPropertyValue() will extract the hook from rootPropertyValue. */
	                                    startValue = CSS.getPropertyValue(element, property, rootPropertyValue);
	                                /* If startValue is already defined via forcefeeding, do not query the DOM for the root property's value;
	                                   just grab rootProperty's zero-value template from CSS.Hooks. This overwrites the element's actual
	                                   root property value (if one is set), but this is acceptable since the primary reason users forcefeed is
	                                   to avoid DOM queries, and thus we likewise avoid querying the DOM for the root property's value. */
	                                } else {
	                                    /* Grab this hook's zero-value template, e.g. "0px 0px 0px black". */
	                                    rootPropertyValue = CSS.Hooks.templates[rootProperty][1];
	                                }
	                            /* Handle non-hooked properties that haven't already been defined via forcefeeding. */
	                            } else if (startValue === undefined) {
	                                startValue = CSS.getPropertyValue(element, property); /* GET */
	                            }
	                        }

	                        /**************************
	                           Value Data Extraction
	                        **************************/

	                        var separatedValue,
	                            endValueUnitType,
	                            startValueUnitType,
	                            operator = false;

	                        /* Separates a property value into its numeric value and its unit type. */
	                        function separateValue (property, value) {
	                            var unitType,
	                                numericValue;

	                            numericValue = (value || "0")
	                                .toString()
	                                .toLowerCase()
	                                /* Match the unit type at the end of the value. */
	                                .replace(/[%A-z]+$/, function(match) {
	                                    /* Grab the unit type. */
	                                    unitType = match;

	                                    /* Strip the unit type off of value. */
	                                    return "";
	                                });

	                            /* If no unit type was supplied, assign one that is appropriate for this property (e.g. "deg" for rotateZ or "px" for width). */
	                            if (!unitType) {
	                                unitType = CSS.Values.getUnitType(property);
	                            }

	                            return [ numericValue, unitType ];
	                        }

	                        /* Separate startValue. */
	                        separatedValue = separateValue(property, startValue);
	                        startValue = separatedValue[0];
	                        startValueUnitType = separatedValue[1];

	                        /* Separate endValue, and extract a value operator (e.g. "+=", "-=") if one exists. */
	                        separatedValue = separateValue(property, endValue);
	                        endValue = separatedValue[0].replace(/^([+-\/*])=/, function(match, subMatch) {
	                            operator = subMatch;

	                            /* Strip the operator off of the value. */
	                            return "";
	                        });
	                        endValueUnitType = separatedValue[1];

	                        /* Parse float values from endValue and startValue. Default to 0 if NaN is returned. */
	                        startValue = parseFloat(startValue) || 0;
	                        endValue = parseFloat(endValue) || 0;

	                        /***************************************
	                           Property-Specific Value Conversion
	                        ***************************************/

	                        /* Custom support for properties that don't actually accept the % unit type, but where pollyfilling is trivial and relatively foolproof. */
	                        if (endValueUnitType === "%") {
	                            /* A %-value fontSize/lineHeight is relative to the parent's fontSize (as opposed to the parent's dimensions),
	                               which is identical to the em unit's behavior, so we piggyback off of that. */
	                            if (/^(fontSize|lineHeight)$/.test(property)) {
	                                /* Convert % into an em decimal value. */
	                                endValue = endValue / 100;
	                                endValueUnitType = "em";
	                            /* For scaleX and scaleY, convert the value into its decimal format and strip off the unit type. */
	                            } else if (/^scale/.test(property)) {
	                                endValue = endValue / 100;
	                                endValueUnitType = "";
	                            /* For RGB components, take the defined percentage of 255 and strip off the unit type. */
	                            } else if (/(Red|Green|Blue)$/i.test(property)) {
	                                endValue = (endValue / 100) * 255;
	                                endValueUnitType = "";
	                            }
	                        }

	                        /***************************
	                           Unit Ratio Calculation
	                        ***************************/

	                        /* When queried, the browser returns (most) CSS property values in pixels. Therefore, if an endValue with a unit type of
	                           %, em, or rem is animated toward, startValue must be converted from pixels into the same unit type as endValue in order
	                           for value manipulation logic (increment/decrement) to proceed. Further, if the startValue was forcefed or transferred
	                           from a previous call, startValue may also not be in pixels. Unit conversion logic therefore consists of two steps:
	                           1) Calculating the ratio of %/em/rem/vh/vw relative to pixels
	                           2) Converting startValue into the same unit of measurement as endValue based on these ratios. */
	                        /* Unit conversion ratios are calculated by inserting a sibling node next to the target node, copying over its position property,
	                           setting values with the target unit type then comparing the returned pixel value. */
	                        /* Note: Even if only one of these unit types is being animated, all unit ratios are calculated at once since the overhead
	                           of batching the SETs and GETs together upfront outweights the potential overhead
	                           of layout thrashing caused by re-querying for uncalculated ratios for subsequently-processed properties. */
	                        /* Todo: Shift this logic into the calls' first tick instance so that it's synced with RAF. */
	                        function calculateUnitRatios () {

	                            /************************
	                                Same Ratio Checks
	                            ************************/

	                            /* The properties below are used to determine whether the element differs sufficiently from this call's
	                               previously iterated element to also differ in its unit conversion ratios. If the properties match up with those
	                               of the prior element, the prior element's conversion ratios are used. Like most optimizations in Velocity,
	                               this is done to minimize DOM querying. */
	                            var sameRatioIndicators = {
	                                    myParent: element.parentNode || document.body, /* GET */
	                                    position: CSS.getPropertyValue(element, "position"), /* GET */
	                                    fontSize: CSS.getPropertyValue(element, "fontSize") /* GET */
	                                },
	                                /* Determine if the same % ratio can be used. % is based on the element's position value and its parent's width and height dimensions. */
	                                samePercentRatio = ((sameRatioIndicators.position === callUnitConversionData.lastPosition) && (sameRatioIndicators.myParent === callUnitConversionData.lastParent)),
	                                /* Determine if the same em ratio can be used. em is relative to the element's fontSize. */
	                                sameEmRatio = (sameRatioIndicators.fontSize === callUnitConversionData.lastFontSize);

	                            /* Store these ratio indicators call-wide for the next element to compare against. */
	                            callUnitConversionData.lastParent = sameRatioIndicators.myParent;
	                            callUnitConversionData.lastPosition = sameRatioIndicators.position;
	                            callUnitConversionData.lastFontSize = sameRatioIndicators.fontSize;

	                            /***************************
	                               Element-Specific Units
	                            ***************************/

	                            /* Note: IE8 rounds to the nearest pixel when returning CSS values, thus we perform conversions using a measurement
	                               of 100 (instead of 1) to give our ratios a precision of at least 2 decimal values. */
	                            var measurement = 100,
	                                unitRatios = {};

	                            if (!sameEmRatio || !samePercentRatio) {
	                                var dummy = Data(element).isSVG ? document.createElementNS("http://www.w3.org/2000/svg", "rect") : document.createElement("div");

	                                Velocity.init(dummy);
	                                sameRatioIndicators.myParent.appendChild(dummy);

	                                /* To accurately and consistently calculate conversion ratios, the element's cascaded overflow and box-sizing are stripped.
	                                   Similarly, since width/height can be artificially constrained by their min-/max- equivalents, these are controlled for as well. */
	                                /* Note: Overflow must be also be controlled for per-axis since the overflow property overwrites its per-axis values. */
	                                $.each([ "overflow", "overflowX", "overflowY" ], function(i, property) {
	                                    Velocity.CSS.setPropertyValue(dummy, property, "hidden");
	                                });
	                                Velocity.CSS.setPropertyValue(dummy, "position", sameRatioIndicators.position);
	                                Velocity.CSS.setPropertyValue(dummy, "fontSize", sameRatioIndicators.fontSize);
	                                Velocity.CSS.setPropertyValue(dummy, "boxSizing", "content-box");

	                                /* width and height act as our proxy properties for measuring the horizontal and vertical % ratios. */
	                                $.each([ "minWidth", "maxWidth", "width", "minHeight", "maxHeight", "height" ], function(i, property) {
	                                    Velocity.CSS.setPropertyValue(dummy, property, measurement + "%");
	                                });
	                                /* paddingLeft arbitrarily acts as our proxy property for the em ratio. */
	                                Velocity.CSS.setPropertyValue(dummy, "paddingLeft", measurement + "em");

	                                /* Divide the returned value by the measurement to get the ratio between 1% and 1px. Default to 1 since working with 0 can produce Infinite. */
	                                unitRatios.percentToPxWidth = callUnitConversionData.lastPercentToPxWidth = (parseFloat(CSS.getPropertyValue(dummy, "width", null, true)) || 1) / measurement; /* GET */
	                                unitRatios.percentToPxHeight = callUnitConversionData.lastPercentToPxHeight = (parseFloat(CSS.getPropertyValue(dummy, "height", null, true)) || 1) / measurement; /* GET */
	                                unitRatios.emToPx = callUnitConversionData.lastEmToPx = (parseFloat(CSS.getPropertyValue(dummy, "paddingLeft")) || 1) / measurement; /* GET */

	                                sameRatioIndicators.myParent.removeChild(dummy);
	                            } else {
	                                unitRatios.emToPx = callUnitConversionData.lastEmToPx;
	                                unitRatios.percentToPxWidth = callUnitConversionData.lastPercentToPxWidth;
	                                unitRatios.percentToPxHeight = callUnitConversionData.lastPercentToPxHeight;
	                            }

	                            /***************************
	                               Element-Agnostic Units
	                            ***************************/

	                            /* Whereas % and em ratios are determined on a per-element basis, the rem unit only needs to be checked
	                               once per call since it's exclusively dependant upon document.body's fontSize. If this is the first time
	                               that calculateUnitRatios() is being run during this call, remToPx will still be set to its default value of null,
	                               so we calculate it now. */
	                            if (callUnitConversionData.remToPx === null) {
	                                /* Default to browsers' default fontSize of 16px in the case of 0. */
	                                callUnitConversionData.remToPx = parseFloat(CSS.getPropertyValue(document.body, "fontSize")) || 16; /* GET */
	                            }

	                            /* Similarly, viewport units are %-relative to the window's inner dimensions. */
	                            if (callUnitConversionData.vwToPx === null) {
	                                callUnitConversionData.vwToPx = parseFloat(window.innerWidth) / 100; /* GET */
	                                callUnitConversionData.vhToPx = parseFloat(window.innerHeight) / 100; /* GET */
	                            }

	                            unitRatios.remToPx = callUnitConversionData.remToPx;
	                            unitRatios.vwToPx = callUnitConversionData.vwToPx;
	                            unitRatios.vhToPx = callUnitConversionData.vhToPx;

	                            if (Velocity.debug >= 1) console.log("Unit ratios: " + JSON.stringify(unitRatios), element);

	                            return unitRatios;
	                        }

	                        /********************
	                           Unit Conversion
	                        ********************/

	                        /* The * and / operators, which are not passed in with an associated unit, inherently use startValue's unit. Skip value and unit conversion. */
	                        if (/[\/*]/.test(operator)) {
	                            endValueUnitType = startValueUnitType;
	                        /* If startValue and endValue differ in unit type, convert startValue into the same unit type as endValue so that if endValueUnitType
	                           is a relative unit (%, em, rem), the values set during tweening will continue to be accurately relative even if the metrics they depend
	                           on are dynamically changing during the course of the animation. Conversely, if we always normalized into px and used px for setting values, the px ratio
	                           would become stale if the original unit being animated toward was relative and the underlying metrics change during the animation. */
	                        /* Since 0 is 0 in any unit type, no conversion is necessary when startValue is 0 -- we just start at 0 with endValueUnitType. */
	                        } else if ((startValueUnitType !== endValueUnitType) && startValue !== 0) {
	                            /* Unit conversion is also skipped when endValue is 0, but *startValueUnitType* must be used for tween values to remain accurate. */
	                            /* Note: Skipping unit conversion here means that if endValueUnitType was originally a relative unit, the animation won't relatively
	                               match the underlying metrics if they change, but this is acceptable since we're animating toward invisibility instead of toward visibility,
	                               which remains past the point of the animation's completion. */
	                            if (endValue === 0) {
	                                endValueUnitType = startValueUnitType;
	                            } else {
	                                /* By this point, we cannot avoid unit conversion (it's undesirable since it causes layout thrashing).
	                                   If we haven't already, we trigger calculateUnitRatios(), which runs once per element per call. */
	                                elementUnitConversionData = elementUnitConversionData || calculateUnitRatios();

	                                /* The following RegEx matches CSS properties that have their % values measured relative to the x-axis. */
	                                /* Note: W3C spec mandates that all of margin and padding's properties (even top and bottom) are %-relative to the *width* of the parent element. */
	                                var axis = (/margin|padding|left|right|width|text|word|letter/i.test(property) || /X$/.test(property) || property === "x") ? "x" : "y";

	                                /* In order to avoid generating n^2 bespoke conversion functions, unit conversion is a two-step process:
	                                   1) Convert startValue into pixels. 2) Convert this new pixel value into endValue's unit type. */
	                                switch (startValueUnitType) {
	                                    case "%":
	                                        /* Note: translateX and translateY are the only properties that are %-relative to an element's own dimensions -- not its parent's dimensions.
	                                           Velocity does not include a special conversion process to account for this behavior. Therefore, animating translateX/Y from a % value
	                                           to a non-% value will produce an incorrect start value. Fortunately, this sort of cross-unit conversion is rarely done by users in practice. */
	                                        startValue *= (axis === "x" ? elementUnitConversionData.percentToPxWidth : elementUnitConversionData.percentToPxHeight);
	                                        break;

	                                    case "px":
	                                        /* px acts as our midpoint in the unit conversion process; do nothing. */
	                                        break;

	                                    default:
	                                        startValue *= elementUnitConversionData[startValueUnitType + "ToPx"];
	                                }

	                                /* Invert the px ratios to convert into to the target unit. */
	                                switch (endValueUnitType) {
	                                    case "%":
	                                        startValue *= 1 / (axis === "x" ? elementUnitConversionData.percentToPxWidth : elementUnitConversionData.percentToPxHeight);
	                                        break;

	                                    case "px":
	                                        /* startValue is already in px, do nothing; we're done. */
	                                        break;

	                                    default:
	                                        startValue *= 1 / elementUnitConversionData[endValueUnitType + "ToPx"];
	                                }
	                            }
	                        }

	                        /*********************
	                           Relative Values
	                        *********************/

	                        /* Operator logic must be performed last since it requires unit-normalized start and end values. */
	                        /* Note: Relative *percent values* do not behave how most people think; while one would expect "+=50%"
	                           to increase the property 1.5x its current value, it in fact increases the percent units in absolute terms:
	                           50 points is added on top of the current % value. */
	                        switch (operator) {
	                            case "+":
	                                endValue = startValue + endValue;
	                                break;

	                            case "-":
	                                endValue = startValue - endValue;
	                                break;

	                            case "*":
	                                endValue = startValue * endValue;
	                                break;

	                            case "/":
	                                endValue = startValue / endValue;
	                                break;
	                        }

	                        /**************************
	                           tweensContainer Push
	                        **************************/

	                        /* Construct the per-property tween object, and push it to the element's tweensContainer. */
	                        tweensContainer[property] = {
	                            rootPropertyValue: rootPropertyValue,
	                            startValue: startValue,
	                            currentValue: startValue,
	                            endValue: endValue,
	                            unitType: endValueUnitType,
	                            easing: easing
	                        };

	                        if (Velocity.debug) console.log("tweensContainer (" + property + "): " + JSON.stringify(tweensContainer[property]), element);
	                    }

	                    /* Along with its property data, store a reference to the element itself onto tweensContainer. */
	                    tweensContainer.element = element;
	                }

	                /*****************
	                    Call Push
	                *****************/

	                /* Note: tweensContainer can be empty if all of the properties in this call's property map were skipped due to not
	                   being supported by the browser. The element property is used for checking that the tweensContainer has been appended to. */
	                if (tweensContainer.element) {
	                    /* Apply the "velocity-animating" indicator class. */
	                    CSS.Values.addClass(element, "velocity-animating");

	                    /* The call array houses the tweensContainers for each element being animated in the current call. */
	                    call.push(tweensContainer);

	                    /* Store the tweensContainer and options if we're working on the default effects queue, so that they can be used by the reverse command. */
	                    if (opts.queue === "") {
	                        Data(element).tweensContainer = tweensContainer;
	                        Data(element).opts = opts;
	                    }

	                    /* Switch on the element's animating flag. */
	                    Data(element).isAnimating = true;

	                    /* Once the final element in this call's element set has been processed, push the call array onto
	                       Velocity.State.calls for the animation tick to immediately begin processing. */
	                    if (elementsIndex === elementsLength - 1) {
	                        /* Add the current call plus its associated metadata (the element set and the call's options) onto the global call container.
	                           Anything on this call container is subjected to tick() processing. */
	                        Velocity.State.calls.push([ call, elements, opts, null, promiseData.resolver ]);

	                        /* If the animation tick isn't running, start it. (Velocity shuts it off when there are no active calls to process.) */
	                        if (Velocity.State.isTicking === false) {
	                            Velocity.State.isTicking = true;

	                            /* Start the tick loop. */
	                            tick();
	                        }
	                    } else {
	                        elementsIndex++;
	                    }
	                }
	            }

	            /* When the queue option is set to false, the call skips the element's queue and fires immediately. */
	            if (opts.queue === false) {
	                /* Since this buildQueue call doesn't respect the element's existing queue (which is where a delay option would have been appended),
	                   we manually inject the delay property here with an explicit setTimeout. */
	                if (opts.delay) {
	                    setTimeout(buildQueue, opts.delay);
	                } else {
	                    buildQueue();
	                }
	            /* Otherwise, the call undergoes element queueing as normal. */
	            /* Note: To interoperate with jQuery, Velocity uses jQuery's own $.queue() stack for queuing logic. */
	            } else {
	                $.queue(element, opts.queue, function(next, clearQueue) {
	                    /* If the clearQueue flag was passed in by the stop command, resolve this call's promise. (Promises can only be resolved once,
	                       so it's fine if this is repeatedly triggered for each element in the associated call.) */
	                    if (clearQueue === true) {
	                        if (promiseData.promise) {
	                            promiseData.resolver(elements);
	                        }

	                        /* Do not continue with animation queueing. */
	                        return true;
	                    }

	                    /* This flag indicates to the upcoming completeCall() function that this queue entry was initiated by Velocity.
	                       See completeCall() for further details. */
	                    Velocity.velocityQueueEntryFlag = true;

	                    buildQueue(next);
	                });
	            }

	            /*********************
	                Auto-Dequeuing
	            *********************/

	            /* As per jQuery's $.queue() behavior, to fire the first non-custom-queue entry on an element, the element
	               must be dequeued if its queue stack consists *solely* of the current call. (This can be determined by checking
	               for the "inprogress" item that jQuery prepends to active queue stack arrays.) Regardless, whenever the element's
	               queue is further appended with additional items -- including $.delay()'s or even $.animate() calls, the queue's
	               first entry is automatically fired. This behavior contrasts that of custom queues, which never auto-fire. */
	            /* Note: When an element set is being subjected to a non-parallel Velocity call, the animation will not begin until
	               each one of the elements in the set has reached the end of its individually pre-existing queue chain. */
	            /* Note: Unfortunately, most people don't fully grasp jQuery's powerful, yet quirky, $.queue() function.
	               Lean more here: http://stackoverflow.com/questions/1058158/can-somebody-explain-jquery-queue-to-me */
	            if ((opts.queue === "" || opts.queue === "fx") && $.queue(element)[0] !== "inprogress") {
	                $.dequeue(element);
	            }
	        }

	        /**************************
	           Element Set Iteration
	        **************************/

	        /* If the "nodeType" property exists on the elements variable, we're animating a single element.
	           Place it in an array so that $.each() can iterate over it. */
	        $.each(elements, function(i, element) {
	            /* Ensure each element in a set has a nodeType (is a real element) to avoid throwing errors. */
	            if (Type.isNode(element)) {
	                processElement.call(element);
	            }
	        });

	        /******************
	           Option: Loop
	        ******************/

	        /* The loop option accepts an integer indicating how many times the element should loop between the values in the
	           current call's properties map and the element's property values prior to this call. */
	        /* Note: The loop option's logic is performed here -- after element processing -- because the current call needs
	           to undergo its queue insertion prior to the loop option generating its series of constituent "reverse" calls,
	           which chain after the current call. Two reverse calls (two "alternations") constitute one loop. */
	        var opts = $.extend({}, Velocity.defaults, options),
	            reverseCallsCount;

	        opts.loop = parseInt(opts.loop);
	        reverseCallsCount = (opts.loop * 2) - 1;

	        if (opts.loop) {
	            /* Double the loop count to convert it into its appropriate number of "reverse" calls.
	               Subtract 1 from the resulting value since the current call is included in the total alternation count. */
	            for (var x = 0; x < reverseCallsCount; x++) {
	                /* Since the logic for the reverse action occurs inside Queueing and therefore this call's options object
	                   isn't parsed until then as well, the current call's delay option must be explicitly passed into the reverse
	                   call so that the delay logic that occurs inside *Pre-Queueing* can process it. */
	                var reverseOptions = {
	                    delay: opts.delay,
	                    progress: opts.progress
	                };

	                /* If a complete callback was passed into this call, transfer it to the loop redirect's final "reverse" call
	                   so that it's triggered when the entire redirect is complete (and not when the very first animation is complete). */
	                if (x === reverseCallsCount - 1) {
	                    reverseOptions.display = opts.display;
	                    reverseOptions.visibility = opts.visibility;
	                    reverseOptions.complete = opts.complete;
	                }

	                animate(elements, "reverse", reverseOptions);
	            }
	        }

	        /***************
	            Chaining
	        ***************/

	        /* Return the elements back to the call chain, with wrapped elements taking precedence in case Velocity was called via the $.fn. extension. */
	        return getChain();
	    };

	    /* Turn Velocity into the animation function, extended with the pre-existing Velocity object. */
	    Velocity = $.extend(animate, Velocity);
	    /* For legacy support, also expose the literal animate method. */
	    Velocity.animate = animate;

	    /**************
	        Timing
	    **************/

	    /* Ticker function. */
	    var ticker = window.requestAnimationFrame || rAFShim;

	    /* Inactive browser tabs pause rAF, which results in all active animations immediately sprinting to their completion states when the tab refocuses.
	       To get around this, we dynamically switch rAF to setTimeout (which the browser *doesn't* pause) when the tab loses focus. We skip this for mobile
	       devices to avoid wasting battery power on inactive tabs. */
	    /* Note: Tab focus detection doesn't work on older versions of IE, but that's okay since they don't support rAF to begin with. */
	    if (!Velocity.State.isMobile && document.hidden !== undefined) {
	        document.addEventListener("visibilitychange", function() {
	            /* Reassign the rAF function (which the global tick() function uses) based on the tab's focus state. */
	            if (document.hidden) {
	                ticker = function(callback) {
	                    /* The tick function needs a truthy first argument in order to pass its internal timestamp check. */
	                    return setTimeout(function() { callback(true) }, 16);
	                };

	                /* The rAF loop has been paused by the browser, so we manually restart the tick. */
	                tick();
	            } else {
	                ticker = window.requestAnimationFrame || rAFShim;
	            }
	        });
	    }

	    /************
	        Tick
	    ************/

	    /* Note: All calls to Velocity are pushed to the Velocity.State.calls array, which is fully iterated through upon each tick. */
	    function tick (timestamp) {
	        /* An empty timestamp argument indicates that this is the first tick occurence since ticking was turned on.
	           We leverage this metadata to fully ignore the first tick pass since RAF's initial pass is fired whenever
	           the browser's next tick sync time occurs, which results in the first elements subjected to Velocity
	           calls being animated out of sync with any elements animated immediately thereafter. In short, we ignore
	           the first RAF tick pass so that elements being immediately consecutively animated -- instead of simultaneously animated
	           by the same Velocity call -- are properly batched into the same initial RAF tick and consequently remain in sync thereafter. */
	        if (timestamp) {
	            /* We ignore RAF's high resolution timestamp since it can be significantly offset when the browser is
	               under high stress; we opt for choppiness over allowing the browser to drop huge chunks of frames. */
	            var timeCurrent = (new Date).getTime();

	            /********************
	               Call Iteration
	            ********************/

	            var callsLength = Velocity.State.calls.length;

	            /* To speed up iterating over this array, it is compacted (falsey items -- calls that have completed -- are removed)
	               when its length has ballooned to a point that can impact tick performance. This only becomes necessary when animation
	               has been continuous with many elements over a long period of time; whenever all active calls are completed, completeCall() clears Velocity.State.calls. */
	            if (callsLength > 10000) {
	                Velocity.State.calls = compactSparseArray(Velocity.State.calls);
	            }

	            /* Iterate through each active call. */
	            for (var i = 0; i < callsLength; i++) {
	                /* When a Velocity call is completed, its Velocity.State.calls entry is set to false. Continue on to the next call. */
	                if (!Velocity.State.calls[i]) {
	                    continue;
	                }

	                /************************
	                   Call-Wide Variables
	                ************************/

	                var callContainer = Velocity.State.calls[i],
	                    call = callContainer[0],
	                    opts = callContainer[2],
	                    timeStart = callContainer[3],
	                    firstTick = !!timeStart,
	                    tweenDummyValue = null;

	                /* If timeStart is undefined, then this is the first time that this call has been processed by tick().
	                   We assign timeStart now so that its value is as close to the real animation start time as possible.
	                   (Conversely, had timeStart been defined when this call was added to Velocity.State.calls, the delay
	                   between that time and now would cause the first few frames of the tween to be skipped since
	                   percentComplete is calculated relative to timeStart.) */
	                /* Further, subtract 16ms (the approximate resolution of RAF) from the current time value so that the
	                   first tick iteration isn't wasted by animating at 0% tween completion, which would produce the
	                   same style value as the element's current value. */
	                if (!timeStart) {
	                    timeStart = Velocity.State.calls[i][3] = timeCurrent - 16;
	                }

	                /* The tween's completion percentage is relative to the tween's start time, not the tween's start value
	                   (which would result in unpredictable tween durations since JavaScript's timers are not particularly accurate).
	                   Accordingly, we ensure that percentComplete does not exceed 1. */
	                var percentComplete = Math.min((timeCurrent - timeStart) / opts.duration, 1);

	                /**********************
	                   Element Iteration
	                **********************/

	                /* For every call, iterate through each of the elements in its set. */
	                for (var j = 0, callLength = call.length; j < callLength; j++) {
	                    var tweensContainer = call[j],
	                        element = tweensContainer.element;

	                    /* Check to see if this element has been deleted midway through the animation by checking for the
	                       continued existence of its data cache. If it's gone, skip animating this element. */
	                    if (!Data(element)) {
	                        continue;
	                    }

	                    var transformPropertyExists = false;

	                    /**********************************
	                       Display & Visibility Toggling
	                    **********************************/

	                    /* If the display option is set to non-"none", set it upfront so that the element can become visible before tweening begins.
	                       (Otherwise, display's "none" value is set in completeCall() once the animation has completed.) */
	                    if (opts.display !== undefined && opts.display !== null && opts.display !== "none") {
	                        if (opts.display === "flex") {
	                            var flexValues = [ "-webkit-box", "-moz-box", "-ms-flexbox", "-webkit-flex" ];

	                            $.each(flexValues, function(i, flexValue) {
	                                CSS.setPropertyValue(element, "display", flexValue);
	                            });
	                        }

	                        CSS.setPropertyValue(element, "display", opts.display);
	                    }

	                    /* Same goes with the visibility option, but its "none" equivalent is "hidden". */
	                    if (opts.visibility !== undefined && opts.visibility !== "hidden") {
	                        CSS.setPropertyValue(element, "visibility", opts.visibility);
	                    }

	                    /************************
	                       Property Iteration
	                    ************************/

	                    /* For every element, iterate through each property. */
	                    for (var property in tweensContainer) {
	                        /* Note: In addition to property tween data, tweensContainer contains a reference to its associated element. */
	                        if (property !== "element") {
	                            var tween = tweensContainer[property],
	                                currentValue,
	                                /* Easing can either be a pre-genereated function or a string that references a pre-registered easing
	                                   on the Velocity.Easings object. In either case, return the appropriate easing *function*. */
	                                easing = Type.isString(tween.easing) ? Velocity.Easings[tween.easing] : tween.easing;

	                            /******************************
	                               Current Value Calculation
	                            ******************************/

	                            /* If this is the last tick pass (if we've reached 100% completion for this tween),
	                               ensure that currentValue is explicitly set to its target endValue so that it's not subjected to any rounding. */
	                            if (percentComplete === 1) {
	                                currentValue = tween.endValue;
	                            /* Otherwise, calculate currentValue based on the current delta from startValue. */
	                            } else {
	                                var tweenDelta = tween.endValue - tween.startValue;
	                                currentValue = tween.startValue + (tweenDelta * easing(percentComplete, opts, tweenDelta));

	                                /* If no value change is occurring, don't proceed with DOM updating. */
	                                if (!firstTick && (currentValue === tween.currentValue)) {
	                                    continue;
	                                }
	                            }

	                            tween.currentValue = currentValue;

	                            /* If we're tweening a fake 'tween' property in order to log transition values, update the one-per-call variable so that
	                               it can be passed into the progress callback. */
	                            if (property === "tween") {
	                                tweenDummyValue = currentValue;
	                            } else {
	                                /******************
	                                   Hooks: Part I
	                                ******************/

	                                /* For hooked properties, the newly-updated rootPropertyValueCache is cached onto the element so that it can be used
	                                   for subsequent hooks in this call that are associated with the same root property. If we didn't cache the updated
	                                   rootPropertyValue, each subsequent update to the root property in this tick pass would reset the previous hook's
	                                   updates to rootPropertyValue prior to injection. A nice performance byproduct of rootPropertyValue caching is that
	                                   subsequently chained animations using the same hookRoot but a different hook can use this cached rootPropertyValue. */
	                                if (CSS.Hooks.registered[property]) {
	                                    var hookRoot = CSS.Hooks.getRoot(property),
	                                        rootPropertyValueCache = Data(element).rootPropertyValueCache[hookRoot];

	                                    if (rootPropertyValueCache) {
	                                        tween.rootPropertyValue = rootPropertyValueCache;
	                                    }
	                                }

	                                /*****************
	                                    DOM Update
	                                *****************/

	                                /* setPropertyValue() returns an array of the property name and property value post any normalization that may have been performed. */
	                                /* Note: To solve an IE<=8 positioning bug, the unit type is dropped when setting a property value of 0. */
	                                var adjustedSetData = CSS.setPropertyValue(element, /* SET */
	                                                                           property,
	                                                                           tween.currentValue + (parseFloat(currentValue) === 0 ? "" : tween.unitType),
	                                                                           tween.rootPropertyValue,
	                                                                           tween.scrollData);

	                                /*******************
	                                   Hooks: Part II
	                                *******************/

	                                /* Now that we have the hook's updated rootPropertyValue (the post-processed value provided by adjustedSetData), cache it onto the element. */
	                                if (CSS.Hooks.registered[property]) {
	                                    /* Since adjustedSetData contains normalized data ready for DOM updating, the rootPropertyValue needs to be re-extracted from its normalized form. ?? */
	                                    if (CSS.Normalizations.registered[hookRoot]) {
	                                        Data(element).rootPropertyValueCache[hookRoot] = CSS.Normalizations.registered[hookRoot]("extract", null, adjustedSetData[1]);
	                                    } else {
	                                        Data(element).rootPropertyValueCache[hookRoot] = adjustedSetData[1];
	                                    }
	                                }

	                                /***************
	                                   Transforms
	                                ***************/

	                                /* Flag whether a transform property is being animated so that flushTransformCache() can be triggered once this tick pass is complete. */
	                                if (adjustedSetData[0] === "transform") {
	                                    transformPropertyExists = true;
	                                }

	                            }
	                        }
	                    }

	                    /****************
	                        mobileHA
	                    ****************/

	                    /* If mobileHA is enabled, set the translate3d transform to null to force hardware acceleration.
	                       It's safe to override this property since Velocity doesn't actually support its animation (hooks are used in its place). */
	                    if (opts.mobileHA) {
	                        /* Don't set the null transform hack if we've already done so. */
	                        if (Data(element).transformCache.translate3d === undefined) {
	                            /* All entries on the transformCache object are later concatenated into a single transform string via flushTransformCache(). */
	                            Data(element).transformCache.translate3d = "(0px, 0px, 0px)";

	                            transformPropertyExists = true;
	                        }
	                    }

	                    if (transformPropertyExists) {
	                        CSS.flushTransformCache(element);
	                    }
	                }

	                /* The non-"none" display value is only applied to an element once -- when its associated call is first ticked through.
	                   Accordingly, it's set to false so that it isn't re-processed by this call in the next tick. */
	                if (opts.display !== undefined && opts.display !== "none") {
	                    Velocity.State.calls[i][2].display = false;
	                }
	                if (opts.visibility !== undefined && opts.visibility !== "hidden") {
	                    Velocity.State.calls[i][2].visibility = false;
	                }

	                /* Pass the elements and the timing data (percentComplete, msRemaining, timeStart, tweenDummyValue) into the progress callback. */
	                if (opts.progress) {
	                    opts.progress.call(callContainer[1],
	                                       callContainer[1],
	                                       percentComplete,
	                                       Math.max(0, (timeStart + opts.duration) - timeCurrent),
	                                       timeStart,
	                                       tweenDummyValue);
	                }

	                /* If this call has finished tweening, pass its index to completeCall() to handle call cleanup. */
	                if (percentComplete === 1) {
	                    completeCall(i);
	                }
	            }
	        }

	        /* Note: completeCall() sets the isTicking flag to false when the last call on Velocity.State.calls has completed. */
	        if (Velocity.State.isTicking) {
	            ticker(tick);
	        }
	    }

	    /**********************
	        Call Completion
	    **********************/

	    /* Note: Unlike tick(), which processes all active calls at once, call completion is handled on a per-call basis. */
	    function completeCall (callIndex, isStopped) {
	        /* Ensure the call exists. */
	        if (!Velocity.State.calls[callIndex]) {
	            return false;
	        }

	        /* Pull the metadata from the call. */
	        var call = Velocity.State.calls[callIndex][0],
	            elements = Velocity.State.calls[callIndex][1],
	            opts = Velocity.State.calls[callIndex][2],
	            resolver = Velocity.State.calls[callIndex][4];

	        var remainingCallsExist = false;

	        /*************************
	           Element Finalization
	        *************************/

	        for (var i = 0, callLength = call.length; i < callLength; i++) {
	            var element = call[i].element;

	            /* If the user set display to "none" (intending to hide the element), set it now that the animation has completed. */
	            /* Note: display:none isn't set when calls are manually stopped (via Velocity("stop"). */
	            /* Note: Display gets ignored with "reverse" calls and infinite loops, since this behavior would be undesirable. */
	            if (!isStopped && !opts.loop) {
	                if (opts.display === "none") {
	                    CSS.setPropertyValue(element, "display", opts.display);
	                }

	                if (opts.visibility === "hidden") {
	                    CSS.setPropertyValue(element, "visibility", opts.visibility);
	                }
	            }

	            /* If the element's queue is empty (if only the "inprogress" item is left at position 0) or if its queue is about to run
	               a non-Velocity-initiated entry, turn off the isAnimating flag. A non-Velocity-initiatied queue entry's logic might alter
	               an element's CSS values and thereby cause Velocity's cached value data to go stale. To detect if a queue entry was initiated by Velocity,
	               we check for the existence of our special Velocity.queueEntryFlag declaration, which minifiers won't rename since the flag
	               is assigned to jQuery's global $ object and thus exists out of Velocity's own scope. */
	            if (opts.loop !== true && ($.queue(element)[1] === undefined || !/\.velocityQueueEntryFlag/i.test($.queue(element)[1]))) {
	                /* The element may have been deleted. Ensure that its data cache still exists before acting on it. */
	                if (Data(element)) {
	                    Data(element).isAnimating = false;
	                    /* Clear the element's rootPropertyValueCache, which will become stale. */
	                    Data(element).rootPropertyValueCache = {};

	                    var transformHAPropertyExists = false;
	                    /* If any 3D transform subproperty is at its default value (regardless of unit type), remove it. */
	                    $.each(CSS.Lists.transforms3D, function(i, transformName) {
	                        var defaultValue = /^scale/.test(transformName) ? 1 : 0,
	                            currentValue = Data(element).transformCache[transformName];

	                        if (Data(element).transformCache[transformName] !== undefined && new RegExp("^\\(" + defaultValue + "[^.]").test(currentValue)) {
	                            transformHAPropertyExists = true;

	                            delete Data(element).transformCache[transformName];
	                        }
	                    });

	                    /* Mobile devices have hardware acceleration removed at the end of the animation in order to avoid hogging the GPU's memory. */
	                    if (opts.mobileHA) {
	                        transformHAPropertyExists = true;
	                        delete Data(element).transformCache.translate3d;
	                    }

	                    /* Flush the subproperty removals to the DOM. */
	                    if (transformHAPropertyExists) {
	                        CSS.flushTransformCache(element);
	                    }

	                    /* Remove the "velocity-animating" indicator class. */
	                    CSS.Values.removeClass(element, "velocity-animating");
	                }
	            }

	            /*********************
	               Option: Complete
	            *********************/

	            /* Complete is fired once per call (not once per element) and is passed the full raw DOM element set as both its context and its first argument. */
	            /* Note: Callbacks aren't fired when calls are manually stopped (via Velocity("stop"). */
	            if (!isStopped && opts.complete && !opts.loop && (i === callLength - 1)) {
	                /* We throw callbacks in a setTimeout so that thrown errors don't halt the execution of Velocity itself. */
	                try {
	                    opts.complete.call(elements, elements);
	                } catch (error) {
	                    setTimeout(function() { throw error; }, 1);
	                }
	            }

	            /**********************
	               Promise Resolving
	            **********************/

	            /* Note: Infinite loops don't return promises. */
	            if (resolver && opts.loop !== true) {
	                resolver(elements);
	            }

	            /****************************
	               Option: Loop (Infinite)
	            ****************************/

	            if (Data(element) && opts.loop === true && !isStopped) {
	                /* If a rotateX/Y/Z property is being animated to 360 deg with loop:true, swap tween start/end values to enable
	                   continuous iterative rotation looping. (Otherise, the element would just rotate back and forth.) */
	                $.each(Data(element).tweensContainer, function(propertyName, tweenContainer) {
	                    if (/^rotate/.test(propertyName) && parseFloat(tweenContainer.endValue) === 360) {
	                        tweenContainer.endValue = 0;
	                        tweenContainer.startValue = 360;
	                    }

	                    if (/^backgroundPosition/.test(propertyName) && parseFloat(tweenContainer.endValue) === 100 && tweenContainer.unitType === "%") {
	                        tweenContainer.endValue = 0;
	                        tweenContainer.startValue = 100;
	                    }
	                });

	                Velocity(element, "reverse", { loop: true, delay: opts.delay });
	            }

	            /***************
	               Dequeueing
	            ***************/

	            /* Fire the next call in the queue so long as this call's queue wasn't set to false (to trigger a parallel animation),
	               which would have already caused the next call to fire. Note: Even if the end of the animation queue has been reached,
	               $.dequeue() must still be called in order to completely clear jQuery's animation queue. */
	            if (opts.queue !== false) {
	                $.dequeue(element, opts.queue);
	            }
	        }

	        /************************
	           Calls Array Cleanup
	        ************************/

	        /* Since this call is complete, set it to false so that the rAF tick skips it. This array is later compacted via compactSparseArray().
	          (For performance reasons, the call is set to false instead of being deleted from the array: http://www.html5rocks.com/en/tutorials/speed/v8/) */
	        Velocity.State.calls[callIndex] = false;

	        /* Iterate through the calls array to determine if this was the final in-progress animation.
	           If so, set a flag to end ticking and clear the calls array. */
	        for (var j = 0, callsLength = Velocity.State.calls.length; j < callsLength; j++) {
	            if (Velocity.State.calls[j] !== false) {
	                remainingCallsExist = true;

	                break;
	            }
	        }

	        if (remainingCallsExist === false) {
	            /* tick() will detect this flag upon its next iteration and subsequently turn itself off. */
	            Velocity.State.isTicking = false;

	            /* Clear the calls array so that its length is reset. */
	            delete Velocity.State.calls;
	            Velocity.State.calls = [];
	        }
	    }

	    /******************
	        Frameworks
	    ******************/

	    /* Both jQuery and Zepto allow their $.fn object to be extended to allow wrapped elements to be subjected to plugin calls.
	       If either framework is loaded, register a "velocity" extension pointing to Velocity's core animate() method.  Velocity
	       also registers itself onto a global container (window.jQuery || window.Zepto || window) so that certain features are
	       accessible beyond just a per-element scope. This master object contains an .animate() method, which is later assigned to $.fn
	       (if jQuery or Zepto are present). Accordingly, Velocity can both act on wrapped DOM elements and stand alone for targeting raw DOM elements. */
	    global.Velocity = Velocity;

	    if (global !== window) {
	        /* Assign the element function to Velocity's core animate() method. */
	        global.fn.velocity = animate;
	        /* Assign the object function's defaults to Velocity's global defaults object. */
	        global.fn.velocity.defaults = Velocity.defaults;
	    }

	    /***********************
	       Packaged Redirects
	    ***********************/

	    /* slideUp, slideDown */
	    $.each([ "Down", "Up" ], function(i, direction) {
	        Velocity.Redirects["slide" + direction] = function (element, options, elementsIndex, elementsSize, elements, promiseData) {
	            var opts = $.extend({}, options),
	                begin = opts.begin,
	                complete = opts.complete,
	                computedValues = { height: "", marginTop: "", marginBottom: "", paddingTop: "", paddingBottom: "" },
	                inlineValues = {};

	            if (opts.display === undefined) {
	                /* Show the element before slideDown begins and hide the element after slideUp completes. */
	                /* Note: Inline elements cannot have dimensions animated, so they're reverted to inline-block. */
	                opts.display = (direction === "Down" ? (Velocity.CSS.Values.getDisplayType(element) === "inline" ? "inline-block" : "block") : "none");
	            }

	            opts.begin = function() {
	                /* If the user passed in a begin callback, fire it now. */
	                begin && begin.call(elements, elements);

	                /* Cache the elements' original vertical dimensional property values so that we can animate back to them. */
	                for (var property in computedValues) {
	                    inlineValues[property] = element.style[property];

	                    /* For slideDown, use forcefeeding to animate all vertical properties from 0. For slideUp,
	                       use forcefeeding to start from computed values and animate down to 0. */
	                    var propertyValue = Velocity.CSS.getPropertyValue(element, property);
	                    computedValues[property] = (direction === "Down") ? [ propertyValue, 0 ] : [ 0, propertyValue ];
	                }

	                /* Force vertical overflow content to clip so that sliding works as expected. */
	                inlineValues.overflow = element.style.overflow;
	                element.style.overflow = "hidden";
	            }

	            opts.complete = function() {
	                /* Reset element to its pre-slide inline values once its slide animation is complete. */
	                for (var property in inlineValues) {
	                    element.style[property] = inlineValues[property];
	                }

	                /* If the user passed in a complete callback, fire it now. */
	                complete && complete.call(elements, elements);
	                promiseData && promiseData.resolver(elements);
	            };

	            Velocity(element, computedValues, opts);
	        };
	    });

	    /* fadeIn, fadeOut */
	    $.each([ "In", "Out" ], function(i, direction) {
	        Velocity.Redirects["fade" + direction] = function (element, options, elementsIndex, elementsSize, elements, promiseData) {
	            var opts = $.extend({}, options),
	                propertiesMap = { opacity: (direction === "In") ? 1 : 0 },
	                originalComplete = opts.complete;

	            /* Since redirects are triggered individually for each element in the animated set, avoid repeatedly triggering
	               callbacks by firing them only when the final element has been reached. */
	            if (elementsIndex !== elementsSize - 1) {
	                opts.complete = opts.begin = null;
	            } else {
	                opts.complete = function() {
	                    if (originalComplete) {
	                        originalComplete.call(elements, elements);
	                    }

	                    promiseData && promiseData.resolver(elements);
	                }
	            }

	            /* If a display was passed in, use it. Otherwise, default to "none" for fadeOut or the element-specific default for fadeIn. */
	            /* Note: We allow users to pass in "null" to skip display setting altogether. */
	            if (opts.display === undefined) {
	                opts.display = (direction === "In" ? "auto" : "none");
	            }

	            Velocity(this, propertiesMap, opts);
	        };
	    });

	    return Velocity;
	}((window.jQuery || window.Zepto || window), window, document);
	}));

	/******************
	   Known Issues
	******************/

	/* The CSS spec mandates that the translateX/Y/Z transforms are %-relative to the element itself -- not its parent.
	Velocity, however, doesn't make this distinction. Thus, converting to or from the % unit with these subproperties
	will produce an inaccurate conversion value. The same issue exists with the cx/cy attributes of SVG circles and ellipses. */

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	module.exports = __webpack_require__(8);



/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	exports.SoundEx = __webpack_require__(9);
	exports.Metaphone = __webpack_require__(18);
	exports.DoubleMetaphone = __webpack_require__(19);
	exports.SoundExDM = __webpack_require__(20);
	exports.PorterStemmer = __webpack_require__(21);
	exports.PorterStemmerFa = __webpack_require__(23);
	exports.PorterStemmerFr = __webpack_require__(27);
	exports.PorterStemmerRu = __webpack_require__(31);
	exports.PorterStemmerEs = __webpack_require__(35);
	exports.PorterStemmerIt = __webpack_require__(39);
	exports.PorterStemmerNo = __webpack_require__(43);
	exports.LancasterStemmer = __webpack_require__(48);
	exports.StemmerFr = __webpack_require__(28);
	exports.StemmerPl = __webpack_require__(50);
	exports.StemmerJa = __webpack_require__(53);
	exports.AggressiveTokenizerNl = __webpack_require__(58);
	exports.AggressiveTokenizerFa = __webpack_require__(26);
	exports.AggressiveTokenizerRu = __webpack_require__(34);
	exports.AggressiveTokenizerEs = __webpack_require__(38);
	exports.AggressiveTokenizerIt = __webpack_require__(42);
	exports.AggressiveTokenizerPl = __webpack_require__(52);
	exports.AggressiveTokenizerPt = __webpack_require__(59);
	exports.AggressiveTokenizerNo = __webpack_require__(46);
	exports.AggressiveTokenizer = __webpack_require__(12);
	exports.RegexpTokenizer = __webpack_require__(60).RegexpTokenizer;
	exports.WordTokenizer = __webpack_require__(60).WordTokenizer;
	exports.WordPunctTokenizer = __webpack_require__(60).WordPunctTokenizer;
	exports.TreebankWordTokenizer = __webpack_require__(62);
	exports.TokenizerJa = __webpack_require__(54);
	exports.BayesClassifier = __webpack_require__(63);
	exports.LogisticRegressionClassifier = __webpack_require__(79);
	exports.NounInflector = __webpack_require__(80);
	exports.NounInflectorFr = __webpack_require__(83);
	exports.NounInflectorJa = __webpack_require__(84);
	exports.PresentVerbInflector = __webpack_require__(85);
	exports.CountInflector = __webpack_require__(86);
	exports.WordNet = __webpack_require__(87);
	exports.TfIdf = __webpack_require__(97);
	exports.Trie = __webpack_require__(98);
	exports.SentenceAnalyzer = __webpack_require__(99);
	exports.stopwords = __webpack_require__(11).words;
	exports.ShortestPathTree = __webpack_require__(100);
	exports.LongestPathTree = __webpack_require__(104);
	exports.EdgeWeightedDigraph = __webpack_require__(101);
	exports.NGrams = __webpack_require__(105);
	exports.NGramsZH = __webpack_require__(106);
	exports.JaroWinklerDistance = __webpack_require__(107);
	exports.LevenshteinDistance = __webpack_require__(108);
	exports.DiceCoefficient = __webpack_require__(109);
	exports.normalize = __webpack_require__(110).normalize_tokens;
	exports.normalize_ja = __webpack_require__(55).normalize_ja;
	exports.removeDiacritics = __webpack_require__(111);
	exports.transliterate_ja = __webpack_require__(112);


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Phonetic = __webpack_require__(10);

	function transformLipps(token) {
	    return token.replace(/[bfpv]/g, '1');
	}

	function transformThroats(token) {
	    return token.replace(/[cgjkqsxz]/g, '2');
	}

	function transformToungue(token) {
	    return token.replace(/[dt]/g, '3');
	}

	function transformL(token) {
	    return token.replace(/l/g, '4');
	}

	function transformHum(token) {
	    return token.replace(/[mn]/g, '5');
	}

	function transformR(token) {
	    return token.replace(/r/g, '6');
	}

	function condense(token) {
	    return token.replace(/(\d)?\1+/g, '$1');
	}

	function padRight0(token) {
	    if(token.length < 4)
	        return token + Array(4 - token.length).join('0');
	    else
	        return token;
	}

	function transform(token) {
	    return transformLipps(transformThroats(
	        transformToungue(transformL(transformHum(transformR(token))))));
	}

	var SoundEx = new Phonetic();
	module.exports = SoundEx;

	SoundEx.process = function(token, maxLength) {
	    token = token.toLowerCase();    
	    var transformed = condense(transform(token.substr(1, token.length - 1))); // anything that isn't a digit goes
	    // deal with duplicate INITIAL consonant SOUNDS
	    transformed = transformed.replace(new RegExp("^" + transform(token.charAt(0))), '');
	    return token.charAt(0).toUpperCase() + padRight0(transformed.replace(/\D/g, '')).substr(0, (maxLength && maxLength - 1) || 3);
	};

	// export for tests;
	SoundEx.transformLipps = transformLipps;
	SoundEx.transformThroats = transformThroats;
	SoundEx.transformToungue = transformToungue;
	SoundEx.transformL = transformL;
	SoundEx.transformHum = transformHum;
	SoundEx.transformR = transformR;
	SoundEx.condense = condense;
	SoundEx.padRight0 = padRight0;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(11);
	var Tokenizer = __webpack_require__(12),
	    tokenizer = new Tokenizer();

	module.exports = function() {
	    this.compare = function(stringA, stringB) {
	        return this.process(stringA) == this.process(stringB);
	    };

	    this.attach = function() {
		var phonetic = this;

	        String.prototype.soundsLike = function(compareTo) {
	            return phonetic.compare(this, compareTo);
	        }
	        
	        String.prototype.phonetics = function() {
	            return phonetic.process(this);
	        }
		
	        String.prototype.tokenizeAndPhoneticize = function(keepStops) {
	            var phoneticizedTokens = [];
	            
	            tokenizer.tokenize(this).forEach(function(token) {
	                if(keepStops || stopwords.words.indexOf(token) < 0)
	                    phoneticizedTokens.push(token.phonetics());
	            });
	            
	            return phoneticizedTokens;
	        }
	    };
	};


/***/ },
/* 11 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	var words = [
	    'about', 'after', 'all', 'also', 'am', 'an', 'and', 'another', 'any', 'are', 'as', 'at', 'be',
	    'because', 'been', 'before', 'being', 'between', 'both', 'but', 'by', 'came', 'can',
	    'come', 'could', 'did', 'do', 'each', 'for', 'from', 'get', 'got', 'has', 'had',
	    'he', 'have', 'her', 'here', 'him', 'himself', 'his', 'how', 'if', 'in', 'into',
	    'is', 'it', 'like', 'make', 'many', 'me', 'might', 'more', 'most', 'much', 'must',
	    'my', 'never', 'now', 'of', 'on', 'only', 'or', 'other', 'our', 'out', 'over',
	    'said', 'same', 'see', 'should', 'since', 'some', 'still', 'such', 'take', 'than',
	    'that', 'the', 'their', 'them', 'then', 'there', 'these', 'they', 'this', 'those',
	    'through', 'to', 'too', 'under', 'up', 'very', 'was', 'way', 'we', 'well', 'were',
	    'what', 'where', 'which', 'while', 'who', 'with', 'would', 'you', 'your',
	    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
	    'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '$', '1',
	    '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];
	    
	// tell the world about the noise words.    
	exports.words = words;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(13),
	    util = __webpack_require__(14);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);    
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.trim(text.split(/\W+/));
	};


/***/ },
/* 13 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	/**
	 * \@todo Use .bind() in Tokenizer.prototype.attach().
	 */

	var Tokenizer = function() {
	};

	Tokenizer.prototype.trim = function(array) {
	  while (array[array.length - 1] == '')
	    array.pop();

	  while (array[0] == '')
	    array.shift();

	  return array;
	};

	// Expose an attach function that will patch String with new methods.
	Tokenizer.prototype.attach = function() {
	  var self = this;

	  String.prototype.tokenize = function() {
	    return self.tokenize(this);
	  }
	};

	Tokenizer.prototype.tokenize = function() {};

	module.exports = Tokenizer;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(16);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(17);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(15)))

/***/ },
/* 15 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 16 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 17 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Phonetic = __webpack_require__(10);

	function dedup(token) {
	    return token.replace(/([^c])\1/g, '$1');
	}

	function dropInitialLetters(token) {
	    if(token.match(/^(kn|gn|pn|ae|wr)/))
	        return token.substr(1, token.length - 1);
	        
	    return token;
	}

	function dropBafterMAtEnd(token) {
	    return token.replace(/mb$/, 'm');
	}

	function cTransform(token) {
	    

	    token = token.replace(/([^s]|^)(c)(h)/g, '$1x$3').trim();


	    token = token.replace(/cia/g, 'xia');
	    token = token.replace(/c(i|e|y)/g, 's$1');
	    token = token.replace(/c/g, 'k'); 
	    
	    return token;
	}

	function dTransform(token) {
	    token = token.replace(/d(ge|gy|gi)/g, 'j$1');
	    token = token.replace(/d/g, 't');
	    
	    return token;
	}

	function dropG(token) {
	    token = token.replace(/gh(^$|[^aeiou])/g, 'h$1');
	    token = token.replace(/g(n|ned)$/g, '$1');    
	    
	    return token;
	}

	function transformG(token) {
	    token = token.replace(/gh/g, 'f'); 
	    token = token.replace(/([^g]|^)(g)(i|e|y)/g, '$1j$3');
	    token = token.replace(/gg/g, 'g');
	    token = token.replace(/g/g, 'k');    
	    
	    return token;
	}

	function dropH(token) {
	    return token.replace(/([aeiou])h([^aeiou]|$)/g, '$1$2');
	}

	function transformCK(token) {
	    return token.replace(/ck/g, 'k');
	}
	function transformPH(token) {
	    return token.replace(/ph/g, 'f');
	}

	function transformQ(token) {
	    return token.replace(/q/g, 'k');
	}

	function transformS(token) {
	    return token.replace(/s(h|io|ia)/g, 'x$1');
	}

	function transformT(token) {
	    token = token.replace(/t(ia|io)/g, 'x$1');
	    token = token.replace(/th/, '0');
	    
	    return token;
	}

	function dropT(token) {
	    return token.replace(/tch/g, 'ch');
	}

	function transformV(token) {
	    return token.replace(/v/g, 'f');
	}

	function transformWH(token) {
	    return token.replace(/^wh/, 'w');
	}

	function dropW(token) {
	    return token.replace(/w([^aeiou]|$)/g, '$1');
	}

	function transformX(token) {
	    token = token.replace(/^x/, 's');
	    token = token.replace(/x/g, 'ks');
	    return token;
	}

	function dropY(token) {
	    return token.replace(/y([^aeiou]|$)/g, '$1');
	}

	function transformZ(token) {
	    return token.replace(/z/, 's');
	}

	function dropVowels(token) {
	    return token.charAt(0) + token.substr(1, token.length).replace(/[aeiou]/g, '');
	}

	var Metaphone = new Phonetic();
	module.exports = Metaphone;

	Metaphone.process = function(token, maxLength) {
	    maxLength == maxLength || 32;
	    token = token.toLowerCase();
	    token = dedup(token);
	    token = dropInitialLetters(token);
	    token = dropBafterMAtEnd(token);
	    token = transformCK(token);
	    token = cTransform(token);
	    token = dTransform(token);
	    token = dropG(token);
	    token = transformG(token);
	    token = dropH(token);
	    token = transformPH(token);
	    token = transformQ(token);
	    token = transformS(token);
	    token = transformX(token);    
	    token = transformT(token);
	    token = dropT(token);
	    token = transformV(token);
	    token = transformWH(token);
	    token = dropW(token);
	    token = dropY(token);
	    token = transformZ(token);
	    token = dropVowels(token);
	    
	    token.toUpperCase();
	    if(token.length >= maxLength)
	        token = token.substring(0, maxLength);        

	    return token.toUpperCase();
	};

	// expose functions for testing    
	Metaphone.dedup = dedup;
	Metaphone.dropInitialLetters = dropInitialLetters;
	Metaphone.dropBafterMAtEnd = dropBafterMAtEnd;
	Metaphone.cTransform = cTransform;
	Metaphone.dTransform = dTransform;
	Metaphone.dropG = dropG;
	Metaphone.transformG = transformG;
	Metaphone.dropH = dropH;
	Metaphone.transformCK = transformCK;
	Metaphone.transformPH = transformPH;
	Metaphone.transformQ = transformQ;
	Metaphone.transformS = transformS;
	Metaphone.transformT = transformT;
	Metaphone.dropT = dropT;
	Metaphone.transformV = transformV;
	Metaphone.transformWH = transformWH;
	Metaphone.dropW = dropW;
	Metaphone.transformX = transformX;
	Metaphone.dropY = dropY;
	Metaphone.transformZ = transformZ;
	Metaphone.dropVowels = dropVowels;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Phonetic = __webpack_require__(10);

	var DoubleMetaphone = new Phonetic();
	module.exports = DoubleMetaphone;

	function isVowel(c) {
		return c && c.match(/[aeiouy]/i);
	}

	function truncate(string, length) {
	    if(string.length >= length)
	        string = string.substring(0, length);
	        
	    return string;
	}

	function process(token, maxLength) {
		token = token.toUpperCase();
		var primary = '', secondary = '';	
	    var pos = 0;
	    maxLength == maxLength || 32;

	    function subMatch(startOffset, stopOffset, terms) {
	        return subMatchAbsolute(pos + startOffset, pos + stopOffset, terms);
	    }

	    function subMatchAbsolute(startOffset, stopOffset, terms) {
	        return terms.indexOf(token.substring(startOffset, stopOffset)) > -1;
	    }

	    function addSecondary(primaryAppendage, secondaryAppendage) {
	    	primary += primaryAppendage;
	    	secondary += secondaryAppendage;
	    }

	    function add(primaryAppendage) {
	    	addSecondary(primaryAppendage, primaryAppendage);
	    }

	    function addCompressedDouble(c, encoded) {
	    	if(token[pos + 1] == c)
	    		pos++;
	    	add(encoded || c);
	    }

	    function handleC() {

	        if(pos >= 1 && !isVowel(token[pos - 2]) 
	                && token[pos - 1] == 'A' && token[pos + 1] == 'H'
	                    && (token[pos + 2] != 'I' && token[pos + 2] != 'I')
	                        || subMatch(-2, 4, ['BACHER', 'MACHER'])) {
	            add('K');
	            pos++;
	        } else if(pos == 0 && token.substring(1, 6) == 'EASAR') {
	            add('S');
	            add('S');
	            add('R');
	            pos += 6;
	        } else if(token.substring(pos + 1, pos + 4) == 'HIA') {
	            add('K');
	            pos++;
	        } else if(token[pos + 1] == 'H') {
	            if(pos > 0 && token.substring(pos + 2, pos + 4) == 'AE') {
	                addSecondary('K', 'X');
	                pos++;
	            } else if(pos == 0 
	                        && (subMatch(1, 6, ['HARAC', 'HARIS']) 
	                            || subMatch(1, 4, ['HOR', 'HUM', 'HIA', 'HEM']))
	                        && token.substring(pos + 1, pos + 5) != 'HORE') {
	                add('K');
	                pos++;
	            } else {
	                if((subMatchAbsolute(0, 3, ['VAN', 'VON']) || token.substring(0,  3) == 'SCH')
	                    || subMatch(-2, 4, ['ORCHES', 'ARCHIT', 'ORCHID'])
	                    || subMatch(2, 3, ['T', 'S'])
	                    || ((subMatch(-1, 0, ['A', 'O', 'U', 'E']) || pos == 0) 
	                        && subMatch(2, 3, ['B', 'F', 'H', 'L', 'M', 'N', 'R', 'V', 'W']))) {
	                    add('K');
	                } else if(pos > 0) {

	                    if(token.substring(0, 2) == 'MC') {
	                        add('K');
	                    } else {
	                        addSecondary('X', 'K');   
	                    }
	                } else {
	                    add('X');
	                }

	                pos++;
	            } 
	        } else if(token.substring(pos, pos + 2) == 'CZ' 
	                && token.substring(pos - 2, pos + 1) != 'WICZ') {
	            addSecondary('S', 'X');
	            pos++;
	        } else if(token.substring(pos, pos + 3) == 'CIA') {
	            add('X');
	            pos += 2;
	        } else if(token[pos + 1] == 'C' && pos != 1 && token[0] != 'M') {
	            if(['I', 'E', 'H'].indexOf(token[pos + 2]) > -1 
	                    && token.substring(pos + 2, pos + 4) != 'HU') {
	                if(pos == 1 && token[pos - 1] == 'A'
	                        || subMatch(-1, 4, ['UCCEE', 'UCCES'])) {
	                    add('KS');
	                } else {
	                   add('X');
	                }

	               pos +=2;
	            } else {
	                add('K');
	                pos++;
	            }
	        } else if(['K', 'G', 'Q'].indexOf(token[pos + 1]) > -1) {
	            add('K');
	            pos++;
	        } else if(['E', 'I', 'Y'].indexOf(token[pos + 1]) > -1) {
	            if(subMatch(1, 3, ['IA', 'IE', 'IO'])) {
	                addSecondary('S', 'X');   
	            } else {
	                add('S');
	            }
	            pos++;
	        } else {            
	            add('K');
	            if(token[pos + 1] == ' ' && ['C', 'Q', 'G'].indexOf(token[pos + 2])) {
	                pos += 2;
	            } else if(['C', 'K', 'Q'].indexOf(token[pos + 1]) > -1
	                    && !subMatch(1, 3, ['CE', 'CI'])) {
	                pos++;
	            } 
	        }
	    }

	    function handleD() {
	    	if(token[pos + 1] == 'G') {
	    		if(['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1)  {
	    			add('J');
	    			pos += 2;
	    		} else {
	    			add('TK');
	    			pos++;
	    		}
		    } else if(token[pos + 1] == 'T') {
	    		add('T');
		    	pos++;    		
	    	} else
	    		addCompressedDouble('D', 'T');
	    }

	    function handleG() {
	        if(token[pos + 1] == 'H') {
	            if(pos > 0 && !isVowel(token[pos - 1])) {
	                add('K');
	                pos++;
	            } else if(pos == 0) {
	                if(token[pos + 2] == 'I') {
	                    add('J');
	                } else {
	                    add('K');
	                }
	                pos++;
	            } else if(pos > 1 
	                && (['B', 'H', 'D'].indexOf(token[pos - 2]) > -1
	                    || ['B', 'H', 'D'].indexOf(token[pos - 3]) > -1
	                    || ['B', 'H'].indexOf(token[pos - 4]) > -1)) {
	                pos++;
	            } else {
	                if(pos > 2
	                        && token[pos - 1] == 'U'
	                        && ['C', 'G', 'L', 'R', 'T'].indexOf(token[pos - 3]) > -1) {
	                    add('F');
	                } else if(token[pos - 1] != 'I') {
	                    add('K');
	                }

	                pos++;
	            }
	        } else if(token[pos + 1] == 'N') {
	            if(pos == 1 && startsWithVowel && !slavoGermanic) {
	                addSecondary('KN', 'N');
	            } else {
	                if(token.substring(pos + 2, pos + 4) != 'EY'
	                        && (token[pos + 1] != 'Y'
	                            && !slavoGermanic)) {
	                    addSecondary('N', 'KN');
	                } else
	                    add('KN');
	            }
	            pos++;
	        } else if(token.substring(pos + 1, pos + 3) == 'LI' && !slavoGermanic) {
	            addSecondary('KL', 'L');
	            pos++;
	        } else if(pos == 0 && (token[pos + 1] == 'Y'                
	                || subMatch(1, 3, ['ES', 'EP', 'EB', 'EL', 'EY', 'IB', 'IL', 'IN', 'IE', 'EI', 'ER']))) {
	            addSecondary('K', 'J')
	        } else {
	            addCompressedDouble('G', 'K');
	        }
	    }

	    function handleH() {
			// keep if starts a word or is surrounded by vowels
			if((pos == 0 || isVowel(token[pos - 1])) && isVowel(token[pos + 1])) {
				add('H');
				pos++;
			}    	
	    }    

	    function handleJ() {
	        var jose = (token.substring(pos + 1, pos + 4) == 'OSE');

	        if(san || jose) {
	            if((pos == 0 && token[pos + 4] == ' ') 
	                    || san) {
	                add('H');            
	            } else
	                add('J', 'H');
	        } else {
	            if(pos == 0/* && !jose*/) {
	                addSecondary('J', 'A');
	            } else if(isVowel(token[pos - 1]) && !slavoGermanic 
	                    && (token[pos + 1] == 'A' || token[pos + 1] == 'O')) {
	                addSecondary('J', 'H');
	            } else if(pos == token.length - 1) {
	                addSecondary('J', ' ');
	            } else
	                addCompressedDouble('J');
	        }
	    }

	    function handleL() {
	    	if(token[pos + 1] == 'L') {
	    		if(pos == token.length - 3 && (
	    					subMatch(-1, 3, ['ILLO', 'ILLA', 'ALLE']) || (
	    						token.substring(pos - 1, pos + 3) == 'ALLE' &&
	    						(subMatch(-2, -1, ['AS', 'OS']) > -1 ||
	    						['A', 'O'].indexOf(token[token.length - 1]) > -1)))) {
	    			addSecondary('L', '');
	    			pos++;
	    			return;
	    		}
	    		pos++;	
	    	}
	    	add('L');
	    }

	    function handleM() {
	    	addCompressedDouble('M');
	    	if(token[pos - 1] == 'U' && token[pos + 1] == 'B' && 
	    			((pos == token.length - 2  || token.substring(pos + 2, pos + 4) == 'ER')))
	    		pos++;
	    }

	    function handleP() {
	    	if(token[pos + 1] == 'H') {
	    		add('F');
	    		pos++;	
	    	} else {
	    		addCompressedDouble('P');
	    		    		
				if(token[pos + 1] == 'B')
	    			pos++;
	    	}
	    }

	    function handleR() {
	    	if(pos == token.length - 1 && !slavoGermanic
	    			&& token.substring(pos - 2, pos) == 'IE'
	    			&& !subMatch(-4, -3, ['ME', 'MA'])) {
	    		addSecondary('', 'R');
	    	} else
		    	addCompressedDouble('R');    		
	    }

	    function handleS() {
	        if(pos == 0 && token.substring(0, 5) == 'SUGAR') {
	            addSecondary('X', 'S');
	        } else if(token[pos + 1] == 'H') {
	            if(subMatch(2, 5, ['EIM', 'OEK', 'OLM', 'OLZ'])) {
	                add('S');
	            } else {
	                add('X');
	            }
	            pos++;
	        } else if(subMatch(1, 3, ['IO', 'IA'])) {
	            if(slavoGermanic) {
	                add('S');
	            } else {
	                addSecondary('S', 'X');
	            }
	            pos++;
	        } else if((pos == 0 && ['M', 'N', 'L', 'W'].indexOf(token[pos + 1]) > -1) 
	                || token[pos + 1] == 'Z') {
	            addSecondary('S', 'X');
	            if(token[pos + 1] == 'Z')
	                pos++;
	        } else if(token.substring(pos, pos + 2) == 'SC') {
	            if(token[pos + 2] == 'H') {
	                if(subMatch(3, 5, ['ER', 'EN'])) {
	                    addSecondary('X', 'SK');
	                } else if(subMatch(3, 5, ['OO', 'UY', 'ED', 'EM'])) {
	                    add('SK');
	                } else if(pos == 0 && !isVowel(token[3]) && token[3] != 'W') {
	                    addSecondary('X', 'S');
	                } else {
	                    add('X');   
	                } 
	            } else if(['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1) {
	                add('S');
	            } else {
	                add('SK');
	            }

	            pos += 2;            
	        } else if(pos == token.length - 1
	                && subMatch(-2, 0, ['AI', 'OI'])) {
	            addSecondary('', 'S');            
	        } else if(token[pos + 1] != 'L' && (
	                token[pos - 1] != 'A' && token[pos - 1] != 'I')) {
	            addCompressedDouble('S');
	            if(token[pos + 1] == 'Z')
	                pos++;
	        }
	    }

	    function handleT() {
	        if(token.substring(pos + 1, pos + 4) == 'ION') {
	            add('XN');
	            pos += 3;
	        } else if(subMatch(1, 3, ['IA', 'CH'])) {
	            add('X');
	            pos += 2;
	        } else if(token[pos + 1] == 'H' 
	                || token.substring(1, 2) == 'TH') {
	            if(subMatch(2, 4, ['OM', 'AM']) 
	                    || ['VAN ', 'VON '].indexOf(token.substring(0, 4)) > -1
	                    || token.substring(0, 3) == 'SCH') {
	                add('T');            
	            } else
	                addSecondary('0', 'T');
	            pos++;
	        } else {
	            addCompressedDouble('T');

	            if(token[pos + 1] == 'D')
	                pos++;
	        }
	    }

	    function handleX() {
	    	if(pos == 0) {
	    		add('S');
	    	} else if(!(pos == token.length - 1 
		    		&& (['IAU', 'EAU', 'IEU'].indexOf(token.substring(pos - 3, pos)) > -1
		    			|| ['AU', 'OU'].indexOf(token.substring(pos - 2, pos)) > -1))) {
	    		add('KS');
	    	}
	    }

	    function handleW() {
	        if(pos == 0) {
	            if(token[1] == 'H') {
	                add('A');
	            } else if (isVowel(token[1])) {
	                addSecondary('A', 'F');
	            }
	        } else if((pos == token.length - 1 && isVowel(token[pos - 1]) 
	                    || subMatch(-1, 4, ['EWSKI', 'EWSKY', 'OWSKI', 'OWSKY'])
	                    || token.substring(0, 3) == 'SCH')) {
	                addSecondary('', 'F');
	                pos++;
	        } else if(['ICZ', 'ITZ'].indexOf(token.substring(pos + 1, pos + 4)) > -1) {
	            addSecondary('TS', 'FX');
	            pos += 3;
	        }
	    }

	    function handleZ() {
	        if(token[pos + 1] == 'H') {
	            add('J');
	            pos++;            
	        } else if(subMatch(1, 3, ['ZO', 'ZI', 'ZA']) 
	                || (slavoGermanic && pos > 0 && token[pos - 1] != 'T')) {
	            addSecondary('S', 'TS');
	            pos++; 
	        } else
	            addCompressedDouble('Z', 'S');
	    }

	    var san = (token.substring(0, 3) == 'SAN');
	    var startsWithVowel = isVowel(token[0]);
	    var slavoGermanic = token.match(/(W|K|CZ|WITZ)/);

	    if(subMatch(0, 2, ['GN', 'KN', 'PN', 'WR', 'PS'])) {
	    	pos++;
	    }

	    while(pos < token.length) {

	    	switch(token[pos]) {
		        case 'A': case 'E': case 'I': case 'O': case 'U': case 'Y': 	        
		        case 'Ê': case 'É': case 'É': case'À':
			        if(pos == 0)
			        	add('A');
			        break;
			    case 'B':
			    	addCompressedDouble('B', 'P');
			    	break;
	            case 'C':
	                handleC();
	                break;
		        case 'Ç':
		            add("S");
		            break;
		        case 'D':
		        	handleD();
		        	break;
		        case 'F': case 'K': case 'N':
		        	addCompressedDouble(token[pos]);
		        	break;
	            case 'G':
	                handleG();
	                break;
		        case 'H':
		        	handleH();
		        	break;
	            case 'J':
	                handleJ();
	                break;
		        case 'L':
		        	handleL();
		        	break;
		        case 'M':
		        	handleM();
		        	break;
		        case 'Ñ':
		        	add('N');
		        	break;
		        case 'P':
		        	handleP();
		        	break;
		        case 'Q':
		        	addCompressedDouble('Q', 'K');
		        	break;
		        case 'R':
		        	handleR();
		        	break;
	            case 'S':
	                handleS();
	                break;
	            case 'T':
	                handleT();
	                break;
		        case 'V':
		        	addCompressedDouble('V', 'F');
		        	break;
	            case 'W':
	                handleW();
	                break;
		        case 'X':
		        	handleX();
		        	break;
		        case 'Z':
		        	handleZ();
		        	break;
	    	}

	        if(primary.length >= maxLength && secondary.length >= maxLength) {
	            break;
	        }

	    	pos++;
	    }

	    return [truncate(primary, maxLength), truncate(secondary, maxLength)];
	}

	function compare(stringA, stringB) {
	    var encodingsA = process(stringA),
	        encodingsB = process(stringB);

	    return encodingsA[0] == encodingsB[0] || 
	        encodingsA[1] == encodingsB[1];
	};

	DoubleMetaphone.compare = compare
	DoubleMetaphone.process = process;
	DoubleMetaphone.isVowel = isVowel;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2012, Alexy Maslenninkov

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	/*
	 * Daitch-Mokotoff Soundex Coding
	 *
	 * The Daitch-Mokotoff Soundex System was created by Randy Daitch and Gary
	 * Mokotoff of the Jewish Genealogical Society because they concluded the system
	 * developed by Robert Russell in 1918, and in use today by the U.S. National
	 * Archives and Records Administration (NARA) does not apply well to many Slavic
	 * and Yiddish surnames.  It also includes refinements that are independent of
	 * ethnic considerations.
	 *
	 * The rules for converting surnames into D-M Code numbers are listed below.
	 * They are followed by the coding chart.
	 *
	 * 1. Names are coded to six digits, each digit representing a sound listed in
	 * the coding chart (below).
	 *
	 * 2. When a name lacks enough coded sounds for six digits, use zeros to fill to
	 * six digits. GOLDEN which has only four coded sounds [G-L-D-N] is coded as
	 * 583600.
	 *
	 * 3. The letters A, E, I, O, U, J, and Y are always coded at the beginning of a
	 * name as in Alpert 087930. In any other situation, they are ignored except
	 * when two of them form a pair and the pair comes before a vowel, as in Breuer
	 * 791900 but not Freud.
	 *
	 * 4. The letter H is coded at the beginning of a name, as in Haber 579000, or
	 * preceding a vowel, as in Manheim 665600, otherwise it is not coded.
	 *
	 * 5. When adjacent sounds can combine to form a larger sound, they are given
	 * the code number of the larger sound.  Mintz which is not coded MIN-T-Z but
	 * MIN-TZ 664000.
	 *
	 * 6. When adjacent letters have the same code number, they are coded as one
	 * sound, as in TOPF, which is not coded TO-P-F 377000 but TO-PF 370000.
	 * Exceptions to this rule are the letter combinations MN and NM, whose letters
	 * are coded separately, as in Kleinman, which is coded 586660 not 586600.
	 *
	 * 7. When a surname consists or more than one word, it is coded as if one word,
	 * such as Ben Aron which is treated as Benaron.
	 *
	 * 8. Several letter and letter combinations pose the problem that they may
	 * sound in one of two ways.  The letter and letter combinations CH, CK, C, J,
	 * and RS are assigned two possible code numbers.
	 *
	 * For more info, see http://www.jewishgen.org/InfoFiles/soundex.html
	 */

	/**
	 * D-M transformation table in the form of finite-state machine.
	 * Every element of the table having member with zero index represents
	 * legal FSM state; every non-zero key is the transition rule.
	 *
	 * Every legal state comprises tree values chosen according to the position
	 * of the letter combination in the word:
	 *   0: start of a word;
	 *   1: before a vowel;
	 *   2: any other situation.
	 */
	var codes = {
	    A: {
	        0: [0, -1, -1],
	        I: [[0, 1, -1]],
	        J: [[0, 1, -1]],
	        Y: [[0, 1, -1]],
	        U: [[0, 7, -1]]},
	    B: [[7, 7, 7]],
	    C: {
	        0: [5, 5, 5],
	        Z: {0: [4, 4, 4], S: [[4, 4, 4]]},
	        S: {0: [4, 4, 4], Z: [[4, 4, 4]]},
	        K: [[5, 5, 5], [45, 45, 45]],
	        H: {0: [5, 5, 5], S: [[5, 54, 54]]}},
	    D: {
	        0: [3, 3, 3],
	        T: [[3, 3, 3]],
	        Z: {0: [4, 4, 4], H: [[4, 4, 4]], S: [[4, 4, 4]]},
	        S: {0: [4, 4, 4], H: [[4, 4, 4]], Z: [[4, 4, 4]]},
	        R: {S: [[4, 4, 4]], Z: [[4, 4, 4]]}},
	    E: {
	        0: [0, -1, -1],
	        I: [[0, 1, -1]],
	        J: [[0, 1, -1]],
	        Y: [[0, 1, -1]],
	        U: [[1, 1, -1]],
	        W: [[1, 1, -1]]},
	    F: {
	        0: [7, 7, 7],
	        B: [[7, 7, 7]]},
	    G: [[5, 5, 5]],
	    H: [[5, 5, -1]],
	    I: {
	        0: [0, -1, -1],
	        A: [[1, -1, -1]],
	        E: [[1, -1, -1]],
	        O: [[1, -1, -1]],
	        U: [[1, -1, -1]]},
	    J: [[4, 4, 4]],
	    K: {
	        0: [5, 5, 5],
	        H: [[5, 5, 5]],
	        S: [[5, 54, 54]]},
	    L: [[8, 8, 8]],
	    M: {
	        0: [6, 6, 6],
	        N: [[66, 66, 66]]},
	    N: {
	        0: [6, 6, 6],
	        M: [[66, 66, 66]]},
	    O: {
	        0: [0, -1, -1],
	        I: [[0, 1, -1]],
	        J: [[0, 1, -1]],
	        Y: [[0, 1, -1]]},
	    P: {
	        0: [7, 7, 7],
	        F: [[7, 7, 7]],
	        H: [[7, 7, 7]]},
	    Q: [[5, 5, 5]],
	    R: {
	        0: [9, 9, 9],
	        Z: [[94, 94, 94], [94, 94, 94]],
	        S: [[94, 94, 94], [94, 94, 94]]},
	    S: {
	        0: [4, 4, 4],
	        Z: {0: [4, 4, 4], T: [[2, 43, 43]], C: {Z: [[2, 4, 4]], S: [[2, 4, 4]]}, D: [[2, 43, 43]]},
	        D: [[2, 43, 43]],
	        T: {0: [2, 43, 43], R: {Z: [[2, 4, 4]], S: [[2, 4, 4]]}, C: {H: [[2, 4, 4]]}, S: {H: [[2, 4, 4]], C: {H: [[2, 4, 4]]}}},
	        C: {0: [2, 4, 4], H: {0: [4, 4, 4], T: {0: [2, 43, 43], S: {C: {H: [[2, 4, 4]]}, H: [[2, 4, 4]]}, C: {H: [[2, 4, 4]]}}, D: [[2, 43, 43]]}},
	        H: {0: [4, 4, 4], T: {0: [2, 43, 43], C: {H: [[2, 4, 4]]}, S: {H: [[2, 4, 4]]}}, C: {H: [[2, 4, 4]]}, D: [[2, 43, 43]]}},
	    T: {
	        0: [3, 3, 3],
	        C: {0: [4, 4, 4], H: [[4, 4, 4]]},
	        Z: {0: [4, 4, 4], S: [[4, 4, 4]]},
	        S: {0: [4, 4, 4], Z: [[4, 4, 4]], H: [[4, 4, 4]], C: {H: [[4, 4, 4]]}},
	        T: {S: {0: [4, 4, 4], Z: [[4, 4, 4]], C: {H: [[4, 4, 4]]}}, C: {H: [[4, 4, 4]]}, Z: [[4, 4, 4]]},
	        H: [[3, 3, 3]],
	        R: {Z: [[4, 4, 4]], S: [[4, 4, 4]]}},
	    U: {
	        0: [0, -1, -1],
	        E: [[0, -1, -1]],
	        I: [[0, 1, -1]],
	        J: [[0, 1, -1]],
	        Y: [[0, 1, -1]]},
	    V: [[7, 7, 7]],
	    W: [[7, 7, 7]],
	    X: [[5, 54, 54]],
	    Y: [[1, -1, -1]],
	    Z: {
	        0: [4, 4, 4],
	        D: {0: [2, 43, 43], Z: {0: [2, 4, 4], H: [[2, 4, 4]]}},
	        H: {0: [4, 4, 4], D: {0: [2, 43, 43], Z: {H: [[2, 4, 4]]}}},
	        S: {0: [4, 4, 4], H: [[4, 4, 4]], C: {H: [[4, 4, 4]]}}}
	};


	function process(word, codeLength) {
		codeLength = codeLength || 6;
	    word = word.toUpperCase();
	    var output = '';

	    var pos = 0, lastCode = -1;
	    while (pos < word.length) {
	        var substr = word.slice(pos);
	        var rules = findRules(substr);

	        var code;
	        if (pos == 0) {
	            // at the beginning of the word
	            code = rules.mapping[0];
	        } else if (substr[rules.length] && findRules(substr[rules.length]).mapping[0] == 0) {
	            // before a vowel
	            code = rules.mapping[1];
	        } else {
	            // any other situation
	            code = rules.mapping[2];
	        }

	        if ((code != -1) && (code != lastCode)) output += code;
	        lastCode = code;
	        pos += rules.length;

	    }

	    return normalizeLength(output, codeLength);
	}


	function findRules(str) {
	    var state = codes[str[0]];
	    var legalState = state || [[-1,-1,-1]],
	        charsInvolved = 1;

	    for (var offs = 1; offs < str.length; offs++) {
	        if (!state || !state[str[offs]]) break;

	        state = state[str[offs]];
	        if (state[0]) {
	            legalState = state;
	            charsInvolved = offs + 1;
	        }
	    }

	    return {
	        length: charsInvolved,
	        mapping: legalState[0]
	    };
	}


	/**
	 * Pad right with zeroes or cut excess symbols to fit length
	 */
	function normalizeLength(token, length) {
		length = length || 6;
		if (token.length < length) {
			token += (new Array(length - token.length + 1)).join('0');
		}
	    return token.slice(0, length);
	}

	var Phonetic = __webpack_require__(10);
	var soundex = new Phonetic();
	soundex.process = process;
	module.exports = soundex;



/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Stemmer = __webpack_require__(22);

	// denote groups of consecutive consonants with a C and consecutive vowels
	// with a V.
	function categorizeGroups(token) {
	    return token.replace(/[^aeiouy]+y/g, 'CV').replace(/[aeiou]+/g, 'V').replace(/[^V]+/g, 'C');
	}

	// denote single consonants with a C and single vowels with a V
	function categorizeChars(token) {
	    return token.replace(/[^aeiouy]y/g, 'CV').replace(/[aeiou]/g, 'V').replace(/[^V]/g, 'C');
	}

	// calculate the "measure" M of a word. M is the count of VC sequences dropping
	// an initial C if it exists and a trailing V if it exists.
	function measure(token) {
	    if(!token)
	    	return -1;

	    return categorizeGroups(token).replace(/^C/, '').replace(/V$/, '').length / 2;
	}

	// determine if a token end with a double consonant i.e. happ
	function endsWithDoublCons(token) {
	    return token.match(/([^aeiou])\1$/);
	}

	// replace a pattern in a word. if a replacement occurs an optional callback
	// can be called to post-process the result. if no match is made NULL is
	// returned.
	function attemptReplace(token, pattern, replacement, callback) {
	    var result = null;
	    
	    if((typeof pattern == 'string') && token.substr(0 - pattern.length) == pattern)
	        result = token.replace(new RegExp(pattern + '$'), replacement);
	    else if((pattern instanceof RegExp) && token.match(pattern))
	        result = token.replace(pattern, replacement);
	        
	    if(result && callback)
	        return callback(result);
	    else
	        return result;
	}

	// attempt to replace a list of patterns/replacements on a token for a minimum
	// measure M.
	function attemptReplacePatterns(token, replacements, measureThreshold) {
	    var replacement = token;

	    for(var i = 0; i < replacements.length; i++) {   
	    	if(measureThreshold == null || measure(attemptReplace(token, replacements[i][0], replacements[i][1])) > measureThreshold) {
	    	    replacement = attemptReplace(replacement, replacements[i][0], replacements[i][2]) || replacement;
	        }
	    }
	    
	    return replacement;
	}

	// replace a list of patterns/replacements on a word. if no match is made return
	// the original token.
	function replacePatterns(token, replacements, measureThreshold) {
	    return attemptReplacePatterns(token, replacements, measureThreshold) || token;
	}

	// TODO: this should replace all of the messy replacement stuff above
	function replaceRegex(token, regex, includeParts, minimumMeasure) {
	    var parts;
	    var result = '';

	    if(regex.test(token)) {
	        parts = regex.exec(token);

	        includeParts.forEach(function(i) {
	            result += parts[i];
	        });
	    }

	    if(measure(result) > minimumMeasure) {
	        return result;
	    }

	    return null;
	}

	// step 1a as defined for the porter stemmer algorithm. 
	function step1a(token) {    
	    if(token.match(/(ss|i)es$/)) {
	        return token.replace(/(ss|i)es$/, '$1');
	    }

	    if(token.substr(-1) == 's' && token.substr(-2, 1) != 's' && token.length > 2) {
	        return token.replace(/s?$/, '');
	    }

	    return token;
	}

	// step 1b as defined for the porter stemmer algorithm. 
	function step1b(token) {   
	    if(token.substr(-3) == 'eed') {
	        if(measure(token.substr(0, token.length - 3)) > 0)
	            return token.replace(/eed$/, 'ee');
	    } else {
	        var result = attemptReplace(token, /(ed|ing)$/, '', function(token) {
	            if(categorizeGroups(token).indexOf('V') >= 0) {
	                result = attemptReplacePatterns(token, [['at', '', 'ate'],  ['bl', '', 'ble'], ['iz', '', 'ize']]);

	                if(result != token) {
	        		    return result;
	        		} else {
	        		  if(endsWithDoublCons(token) && token.match(/[^lsz]$/)) {
	        			 return token.replace(/([^aeiou])\1$/, '$1');
	                    }

	        		  if(measure(token) == 1 && categorizeChars(token).substr(-3) == 'CVC' && token.match(/[^wxy]$/)) {
	        			 return token + 'e';
	                    }
	        		}                

	        		return token;
	    	    }
	    	    
	    	    return null;
	    	});
	    	
	    	if(result) {
	    	    return result;
	        }
	    }

	    return token;   
	}

	// step 1c as defined for the porter stemmer algorithm. 
	function step1c(token) {
	    var categorizedGroups = categorizeGroups(token);

	    if(token.substr(-1) == 'y' && categorizedGroups.substr(0, categorizedGroups.length - 1).indexOf('V') > -1) {
	        return token.replace(/y$/, 'i');
	    }

	    return token;
	}

	// step 2 as defined for the porter stemmer algorithm. 
	function step2(token) {
	    token = replacePatterns(token, [['ational', '', 'ate'], ['tional', '', 'tion'], ['enci', '', 'ence'], ['anci', '', 'ance'],
	        ['izer', '', 'ize'], ['abli', '', 'able'], ['bli', '', 'ble'], ['alli', '', 'al'], ['entli', '', 'ent'], ['eli', '', 'e'],
	        ['ousli', '', 'ous'], ['ization', '', 'ize'], ['ation', '', 'ate'], ['ator', '', 'ate'],['alism', '', 'al'],
	        ['iveness', '', 'ive'], ['fulness', '', 'ful'], ['ousness', '', 'ous'], ['aliti', '', 'al'],
	        ['iviti', '', 'ive'], ['biliti', '', 'ble'], ['logi', '', 'log']], 0);

	    return token;
	}

	// step 3 as defined for the porter stemmer algorithm. 
	function step3(token) {
	    return replacePatterns(token, [['icate', '', 'ic'], ['ative', '', ''], ['alize', '', 'al'],
					   ['iciti', '', 'ic'], ['ical', '', 'ic'], ['ful', '', ''], ['ness', '', '']], 0);
	}

	// step 4 as defined for the porter stemmer algorithm. 
	function step4(token) {
	    return replaceRegex(token, /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/, [1], 1) || 
	        replaceRegex(token, /^(.+?)(s|t)(ion)$/, [1, 2], 1) ||
	        token; 
	}

	// step 5a as defined for the porter stemmer algorithm. 
	function step5a(token) {
	    var m = measure(token.replace(/e$/, ''));



	    if(m > 1 || (m == 1 && !(categorizeChars(token).substr(-4, 3) == 'CVC' && token.match(/[^wxy].$/)))) {
	        token = token.replace(/e$/, '');
	    }

	    return token;
	}

	// step 5b as defined for the porter stemmer algorithm. 
	function step5b(token) {
	    if(measure(token) > 1) {
	       return token.replace(/ll$/, 'l'); 
	    }
	    
	    return token;
	}

	var PorterStemmer = new Stemmer();
	module.exports = PorterStemmer;


	// perform full stemming algorithm on a single word
	PorterStemmer.stem = function(token) {
	    if(token.length < 3) return token;
	    return step5b(step5a(step4(step3(step2(step1c(step1b(step1a(token.toLowerCase())))))))).toString();
	};

	//exports for tests
	PorterStemmer.categorizeGroups = categorizeGroups;
	PorterStemmer.measure = measure;
	PorterStemmer.step1a = step1a;
	PorterStemmer.step1b = step1b;
	PorterStemmer.step1c = step1c;
	PorterStemmer.step2 = step2;
	PorterStemmer.step3 = step3;
	PorterStemmer.step4 = step4;
	PorterStemmer.step5a = step5a;
	PorterStemmer.step5b = step5b;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(11);
	var Tokenizer = __webpack_require__(12);

	module.exports = function() {
	    var stemmer = this;

	    stemmer.stem = function(token) {
	        return token;
	    };

	    stemmer.addStopWord = function(stopWord) {
	        stopwords.words.push(stopWord);
	    };

	    stemmer.addStopWords = function(moreStopWords) {
	        stopwords.words = stopwords.words.concat(moreStopWords);
	    };

	    stemmer.tokenizeAndStem = function(text, keepStops) {
	        var stemmedTokens = [];
	        
	        new Tokenizer().tokenize(text).forEach(function(token) {
	            if(keepStops || stopwords.words.indexOf(token) == -1)
	                stemmedTokens.push(stemmer.stem(token));
	        });
	        
	        return stemmedTokens;
	    };

	    stemmer.attach = function() {
	        String.prototype.stem = function() {
	            return stemmer.stem(this);
	        };
	        
	        String.prototype.tokenizeAndStem = function(keepStops) {
	            return stemmer.tokenizeAndStem(this, keepStops);
	        };
	    };
	}


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel
	Farsi Porter Stemmer by Fardin Koochaki <me@fardinak.com>

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Stemmer = __webpack_require__(24);

	var PorterStemmer = new Stemmer();
	module.exports = PorterStemmer;

	// disabled stemming for Farsi
	// Farsi stemming will be supported soon
	PorterStemmer.stem = function(token) {
	    return token;
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel
	Farsi Stemmer by Fardin Koochaki <me@fardinak.com>

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(25);
	var Tokenizer = __webpack_require__(26);

	module.exports = function() {
	    var stemmer = this;

	    stemmer.stem = function(token) {
	        return token;
	    };

	    stemmer.tokenizeAndStem = function(text, keepStops) {
	        var stemmedTokens = [];
	        
	        new Tokenizer().tokenize(text).forEach(function(token) {
	            if(keepStops || stopwords.words.indexOf(token) == -1)
	                stemmedTokens.push(stemmer.stem(token));
	        });
	        
	        return stemmedTokens;
	    };

	    stemmer.attach = function() {
	        String.prototype.stem = function() {
	            return stemmer.stem(this);
	        };
	        
	        String.prototype.tokenizeAndStem = function(keepStops) {
	            return stemmer.tokenizeAndStem(this, keepStops);
	        };
	    };
	}


/***/ },
/* 25 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel
	Farsi Stop Words by Fardin Koochaki <me@fardinak.com>

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	var words = [
	    // Words
	    'از', 'با', 'یه', 'برای', 'و', 'باید', 'شاید',

	    // Symbols
	    '؟', '!', '٪', '.', '،', '؛', ':', ';', ',',
	    
	    // Numbers
	    '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹', '۰'
	];
	    
	// tell the world about the noise words.    
	exports.words = words;


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel
	Farsi Aggressive Tokenizer by Fardin Koochaki <me@fardinak.com>

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(13),
	    util = __webpack_require__(14);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);    
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.clearEmptyString = function(array) {
		return array.filter(function(a) {
			return a != '';
		});
	};

	AggressiveTokenizer.prototype.clearText = function(text) {
		return text.replace(new RegExp('\.\:\+\-\=\(\)\"\'\!\?\،\,\؛\;', 'g'), ' ');
	};

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    text = this.clearText(text);
	    return this.clearEmptyString(text.split(/\s+/));
	};


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/*
	Copyright (c) 2014, Ismaël Héry

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	/*
	 * Spec for the French Porter Stemmer can be found at:
	 * http://snowball.tartarus.org/algorithms/french/stemmer.html
	 */

	var Stemmer = __webpack_require__(28);

	var PorterStemmer = new Stemmer();
	module.exports = PorterStemmer;

	// Export
	PorterStemmer.stem = stem;

	// Exports for test purpose
	PorterStemmer.prelude = prelude;
	PorterStemmer.regions = regions;
	PorterStemmer.endsinArr = endsinArr;

	/**
	 * Stem a word thanks to Porter Stemmer rules
	 * @param  {String} token Word to be stemmed
	 * @return {String}       Stemmed word
	 */
	function stem(token) {
	  token = prelude(token.toLowerCase());

	  if (token.length == 1)
	    return token;

	  var regs = regions(token);

	  var r1_txt, r2_txt, rv_txt;
	  r1_txt = token.substring(regs.r1);
	  r2_txt = token.substring(regs.r2);
	  rv_txt = token.substring(regs.rv);

	  // Step 1
	  var beforeStep1 = token;
	  var suf, pref2, pref3, letterBefore, letter2Before, i;
	  var doStep2a = false;

	  if ((suf = endsinArr(r2_txt, ['ance', 'iqUe', 'isme', 'able', 'iste', 'eux', 'ances', 'iqUes', 'ismes', 'ables', 'istes'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(token, ['icatrice', 'icateur', 'ication', 'icatrices', 'icateurs', 'ications'])) != '') {
	    if (endsinArr(r2_txt, ['icatrice', 'icateur', 'ication', 'icatrices', 'icateurs', 'ications']) != '') {
	      token = token.slice(0, -suf.length); // delete
	    } else {
	      token = token.slice(0, -suf.length) + 'iqU'; // replace by iqU
	    }
	  } else if ((suf = endsinArr(r2_txt, ['atrice', 'ateur', 'ation', 'atrices', 'ateurs', 'ations'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(r2_txt, ['logie', 'logies'])) != '') {
	    token = token.slice(0, -suf.length) + 'log'; // replace with log
	  } else if ((suf = endsinArr(r2_txt, ['usion', 'ution', 'usions', 'utions'])) != '') {
	    token = token.slice(0, -suf.length) + 'u'; // replace with u
	  } else if ((suf = endsinArr(r2_txt, ['ence', 'ences'])) != '') {
	    token = token.slice(0, -suf.length) + 'ent'; // replace with ent
	  }
	  // ement(s)
	  else if ((suf = endsinArr(r1_txt, ['issement', 'issements'])) != '') {
	    if (!isVowel(token[token.length - suf.length - 1])) {
	      token = token.slice(0, -suf.length); // delete
	      r1_txt = token.substring(regs.r1);
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }
	  } else if ((suf = endsinArr(r2_txt, ['ativement', 'ativements'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(r2_txt, ['ivement', 'ivements'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(token, ['eusement', 'eusements'])) != '') {
	    if ((suf = endsinArr(r2_txt, ['eusement', 'eusements'])) != '')
	      token = token.slice(0, -suf.length); // delete
	    else if ((suf = endsinArr(r1_txt, ['eusement', 'eusements'])) != '')
	      token = token.slice(0, -suf.length) + 'eux'; // replace by eux
	    else if ((suf = endsinArr(rv_txt, ['ement', 'ements'])) != '')
	      token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(r2_txt, ['ablement', 'ablements', 'iqUement', 'iqUements'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(rv_txt, ['ièrement', 'ièrements', 'Ièrement', 'Ièrements'])) != '') {
	    token = token.slice(0, -suf.length) + 'i'; // replace by i
	  } else if ((suf = endsinArr(rv_txt, ['ement', 'ements'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  }
	  // ité(s)
	  else if ((suf = endsinArr(token, ['icité', 'icités'])) != '') {
	    if (endsinArr(r2_txt, ['icité', 'icités']) != '')
	      token = token.slice(0, -suf.length); // delete
	    else
	      token = token.slice(0, -suf.length) + 'iqU'; // replace by iqU
	  } else if ((suf = endsinArr(token, ['abilité', 'abilités'])) != '') {
	    if (endsinArr(r2_txt, ['abilité', 'abilités']) != '')
	      token = token.slice(0, -suf.length); // delete
	    else
	      token = token.slice(0, -suf.length) + 'abl'; // replace by abl
	  } else if ((suf = endsinArr(r2_txt, ['ité', 'ités'])) != '') {
	    token = token.slice(0, -suf.length); // delete if in R2
	  } else if ((suf = endsinArr(token, ['icatif', 'icative', 'icatifs', 'icatives'])) != '') {
	    if ((suf = endsinArr(r2_txt, ['icatif', 'icative', 'icatifs', 'icatives'])) != '') {
	      token = token.slice(0, -suf.length); // delete
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }
	    if ((suf = endsinArr(r2_txt, ['atif', 'ative', 'atifs', 'atives'])) != '') {
	      token = token.slice(0, -suf.length - 2) + 'iqU'; // replace with iqU
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }
	  } else if ((suf = endsinArr(r2_txt, ['atif', 'ative', 'atifs', 'atives'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(r2_txt, ['if', 'ive', 'ifs', 'ives'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(token, ['eaux'])) != '') {
	    token = token.slice(0, -suf.length) + 'eau'; // replace by eau
	  } else if ((suf = endsinArr(r1_txt, ['aux'])) != '') {
	    token = token.slice(0, -suf.length) + 'al'; // replace by al
	  } else if ((suf = endsinArr(r2_txt, ['euse', 'euses'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(r1_txt, ['euse', 'euses'])) != '') {
	    token = token.slice(0, -suf.length) + 'eux'; // replace by eux
	  } else if ((suf = endsinArr(rv_txt, ['amment'])) != '') {
	    token = token.slice(0, -suf.length) + 'ant'; // replace by ant
	    doStep2a = true;
	  } else if ((suf = endsinArr(rv_txt, ['emment'])) != '') {
	    token = token.slice(0, -suf.length) + 'ent'; // replace by ent
	    doStep2a = true;
	  } else if ((suf = endsinArr(rv_txt, ['ment', 'ments'])) != '') {
	    // letter before must be a vowel in RV
	    letterBefore = token[token.length - suf.length - 1];
	    if (isVowel(letterBefore) && endsin(rv_txt, letterBefore + suf)) {
	      token = token.slice(0, -suf.length); // delete
	      doStep2a = true;
	    }
	  }

	  // re compute regions
	  r1_txt = token.substring(regs.r1);
	  r2_txt = token.substring(regs.r2);
	  rv_txt = token.substring(regs.rv);

	  // Step 2a
	  var beforeStep2a = token;
	  var step2aDone = false;
	  if (beforeStep1 === token || doStep2a) {
	    step2aDone = true;
	    if ((suf = endsinArr(rv_txt, ['îmes', 'ît', 'îtes', 'i', 'ie', 'Ie', 'ies', 'ir', 'ira', 'irai', 'iraIent', 'irais', 'irait', 'iras', 'irent', 'irez', 'iriez', 'irions', 'irons', 'iront', 'is', 'issaIent', 'issais', 'issait', 'issant', 'issante', 'issantes', 'issants', 'isse', 'issent', 'isses', 'issez', 'issiez', 'issions', 'issons', 'it'])) != '') {
	      letterBefore = token[token.length - suf.length - 1];
	      if (!isVowel(letterBefore) && endsin(rv_txt, letterBefore + suf))
	        token = token.slice(0, -suf.length); // delete
	    }
	  }

	  // Step 2b
	  if (step2aDone && token === beforeStep2a) {
	    if ((suf = endsinArr(rv_txt, ['é', 'ée', 'ées', 'és', 'èrent', 'er', 'era', 'erai', 'eraIent', 'erais', 'erait', 'eras', 'erez', 'eriez', 'erions', 'erons', 'eront', 'ez', 'iez', 'Iez'])) != '') {
	      token = token.slice(0, -suf.length); // delete
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    } else if ((suf = endsinArr(rv_txt, ['ions'])) != '' && endsinArr(r2_txt, ['ions'])) {
	      token = token.slice(0, -suf.length); // delete
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }
	    // add 'Ie' suffix to pass test for 'évanouie'
	    else if ((suf = endsinArr(rv_txt, ['âmes', 'ât', 'âtes', 'a', 'ai', 'aIent', 'ais', 'ait', 'ant', 'ante', 'antes', 'ants', 'as', 'asse', 'assent', 'asses', 'assiez', 'assions'])) != '') {
	      token = token.slice(0, -suf.length); // delete

	      letterBefore = token[token.length - 1];
	      if (letterBefore === 'e' && endsin(rv_txt, 'e' + suf))
	        token = token.slice(0, -1);

	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }
	  }

	  // Step 3
	  if (!(token === beforeStep1)) {
	    if (token[token.length - 1] === 'Y')
	      token = token.slice(0, -1) + 'i';
	    if (token[token.length - 1] === 'ç')
	      token = token.slice(0, -1) + 'c';
	  } // Step 4
	  else {
	    letterBefore = token[token.length - 1];
	    letter2Before = token[token.length - 2];

	    if (letterBefore === 's' && ['a', 'i', 'o', 'u', 'è', 's'].indexOf(letter2Before) == -1) {
	      token = token.slice(0, -1);
	      r1_txt = token.substring(regs.r1);
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }

	    if ((suf = endsinArr(r2_txt, ['ion'])) != '') {
	      letterBefore = token[token.length - suf.length - 1];
	      if (letterBefore === 's' || letterBefore === 't') {
	        token = token.slice(0, -suf.length); // delete
	        r1_txt = token.substring(regs.r1);
	        r2_txt = token.substring(regs.r2);
	        rv_txt = token.substring(regs.rv);
	      }
	    }

	    if ((suf = endsinArr(rv_txt, ['ier', 'ière', 'Ier', 'Ière'])) != '') {
	      token = token.slice(0, -suf.length) + 'i'; // replace by i
	      r1_txt = token.substring(regs.r1);
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }
	    if ((suf = endsinArr(rv_txt, 'e')) != '') {
	      token = token.slice(0, -suf.length); // delete
	      r1_txt = token.substring(regs.r1);
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }
	    if ((suf = endsinArr(rv_txt, 'ë')) != '') {
	      if (token.slice(token.length - 3, -1) === 'gu')
	        token = token.slice(0, -suf.length); // delete
	    }
	  }

	  // Step 5
	  if ((suf = endsinArr(token, ['enn', 'onn', 'ett', 'ell', 'eill'])) != '') {
	    token = token.slice(0, -1); // delete last letter
	  }

	  // Step 6
	  i = token.length - 1;
	  while (i > 0) {
	    if (!isVowel(token[i])) {
	      i--;
	    } else if (i !== token.length - 1 && (token[i] === 'é' || token[i] === 'è')) {
	      token = token.substring(0, i) + 'e' + token.substring(i + 1, token.length);
	      break;
	    } else {
	      break;
	    }
	  }

	  return token.toLowerCase();

	};

	/**
	 * Compute r1, r2, rv regions as required by french porter stemmer algorithm
	 * @param  {String} token Word to compute regions on
	 * @return {Object}       Regions r1, r2, rv as offsets from the begining of the word
	 */
	function regions(token) {
	  var r1, r2, rv, len;
	  var i;

	  r1 = r2 = rv = len = token.length;

	  // R1 is the region after the first non-vowel following a vowel,
	  for (var i = 0; i < len - 1 && r1 == len; i++) {
	    if (isVowel(token[i]) && !isVowel(token[i + 1])) {
	      r1 = i + 2;
	    }
	  }
	  // Or is the null region at the end of the word if there is no such non-vowel.

	  // R2 is the region after the first non-vowel following a vowel in R1
	  for (i = r1; i < len - 1 && r2 == len; i++) {
	    if (isVowel(token[i]) && !isVowel(token[i + 1])) {
	      r2 = i + 2;
	    }
	  }
	  // Or is the null region at the end of the word if there is no such non-vowel.

	  // RV region
	  var three = token.slice(0, 3);
	  if (isVowel(token[0]) && isVowel(token[1])) {
	    rv = 3;
	  }
	  if (three === 'par' || three == 'col' || three === 'tap')
	    rv = 3;
	  // the region after the first vowel not at the beginning of the word or null
	  else {
	    for (i = 1; i < len - 1 && rv == len; i++) {
	      if (isVowel(token[i])) {
	        rv = i + 1;
	      }
	    }
	  }

	  return {
	    r1: r1,
	    r2: r2,
	    rv: rv
	  };
	};

	/**
	 * Pre-process/prepare words as required by french porter stemmer algorithm
	 * @param  {String} token Word to be prepared
	 * @return {String}       Prepared word
	 */
	function prelude(token) {
	  token = token.toLowerCase();

	  var result = '';
	  var i = 0;

	  // special case for i = 0 to avoid '-1' index
	  if (token[i] === 'y' && isVowel(token[i + 1])) {
	    result += token[i].toUpperCase();
	  } else {
	    result += token[i];
	  }

	  for (i = 1; i < token.length; i++) {
	    if ((token[i] === 'u' || token[i] === 'i') && isVowel(token[i - 1]) && isVowel(token[i + 1])) {
	      result += token[i].toUpperCase();
	    } else if (token[i] === 'y' && (isVowel(token[i - 1]) || isVowel(token[i + 1]))) {
	      result += token[i].toUpperCase();
	    } else if (token[i] === 'u' && token[i - 1] === 'q') {
	      result += token[i].toUpperCase();
	    } else {
	      result += token[i];
	    }
	  }

	  return result;
	};

	/**
	 * Return longest matching suffixes for a token or '' if no suffix match
	 * @param  {String} token    Word to find matching suffix
	 * @param  {Array} suffixes  Array of suffixes to test matching
	 * @return {String}          Longest found matching suffix or ''
	 */
	function endsinArr(token, suffixes) {
	  var i, longest = '';
	  for (i = 0; i < suffixes.length; i++) {
	    if (endsin(token, suffixes[i]) && suffixes[i].length > longest.length)
	      longest = suffixes[i];
	  }

	  return longest;
	};


	function isVowel(letter) {
	  return (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' || letter == 'y' || letter == 'â' || letter == 'à' || letter == 'ë' ||
	    letter == 'é' || letter == 'ê' || letter == 'è' || letter == 'ï' || letter == 'î' || letter == 'ô' || letter == 'û' || letter == 'ù');
	};

	function endsin(token, suffix) {
	  if (token.length < suffix.length) return false;
	  return (token.slice(-suffix.length) == suffix);
	};

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Ismaël Héry

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(29);
	var Tokenizer = __webpack_require__(30);

	module.exports = function() {
	   var stemmer = this;

	   stemmer.stem = function(token) {
	      return token;
	   };

	   stemmer.tokenizeAndStem = function(text, keepStops) {
	      var stemmedTokens = [];

	      new Tokenizer().tokenize(text).forEach(function(token) {
	         if (keepStops || stopwords.words.indexOf(token) == -1) {
	            var resultToken = token.toLowerCase();
	            if (resultToken.match(/[a-zâàëéêèïîôûùç0-9]/gi)) {
	               resultToken = stemmer.stem(resultToken);
	            }
	            stemmedTokens.push(resultToken);
	         }
	      });

	      return stemmedTokens;
	   };

	   stemmer.attach = function() {
	      String.prototype.stem = function() {
	         return stemmer.stem(this);
	      };

	      String.prototype.tokenizeAndStem = function(keepStops) {
	         return stemmer.tokenizeAndStem(this, keepStops);
	      };
	   };
	}


/***/ },
/* 29 */
/***/ function(module, exports) {

	/*
	 Copyright (c) 2014, Ismaël Héry

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	// A list of commonly used french words that have little meaning and can be excluded
	// from analysis.

	var words = ['être', 'avoir', 'faire',
	    'a',
	    'au',
	    'aux',
	    'avec',
	    'ce',
	    'ces',
	    'dans',
	    'de',
	    'des',
	    'du',
	    'elle',
	    'en',
	    'et',
	    'eux',
	    'il',
	    'je',
	    'la',
	    'le',
	    'leur',
	    'lui',
	    'ma',
	    'mais',
	    'me',
	    'même',
	    'mes',
	    'moi',
	    'mon',
	    'ne',
	    'nos',
	    'notre',
	    'nous',
	    'on',
	    'ou',
	    'où',
	    'par',
	    'pas',
	    'pour',
	    'qu',
	    'que',
	    'qui',
	    'sa',
	    'se',
	    'ses',
	    'son',
	    'sur',
	    'ta',
	    'te',
	    'tes',
	    'toi',
	    'ton',
	    'tu',
	    'un',
	    'une',
	    'vos',
	    'votre',
	    'vous',
	    'c',
	    'd',
	    'j',
	    'l',
	    'à',
	    'm',
	    'n',
	    's',
	    't',
	    'y',
	    'été',
	    'étée',
	    'étées',
	    'étés',
	    'étant',
	    'suis',
	    'es',
	    'est',
	    'sommes',
	    'êtes',
	    'sont',
	    'serai',
	    'seras',
	    'sera',
	    'serons',
	    'serez',
	    'seront',
	    'serais',
	    'serait',
	    'serions',
	    'seriez',
	    'seraient',
	    'étais',
	    'était',
	    'étions',
	    'étiez',
	    'étaient',
	    'fus',
	    'fut',
	    'fûmes',
	    'fûtes',
	    'furent',
	    'sois',
	    'soit',
	    'soyons',
	    'soyez',
	    'soient',
	    'fusse',
	    'fusses',
	    'fût',
	    'fussions',
	    'fussiez',
	    'fussent',
	    'ayant',
	    'eu',
	    'eue',
	    'eues',
	    'eus',
	    'ai',
	    'as',
	    'avons',
	    'avez',
	    'ont',
	    'aurai',
	    'auras',
	    'aura',
	    'aurons',
	    'aurez',
	    'auront',
	    'aurais',
	    'aurait',
	    'aurions',
	    'auriez',
	    'auraient',
	    'avais',
	    'avait',
	    'avions',
	    'aviez',
	    'avaient',
	    'eut',
	    'eûmes',
	    'eûtes',
	    'eurent',
	    'aie',
	    'aies',
	    'ait',
	    'ayons',
	    'ayez',
	    'aient',
	    'eusse',
	    'eusses',
	    'eût',
	    'eussions',
	    'eussiez',
	    'eussent',
	    'ceci',
	    'cela',
	    'cet',
	    'cette',
	    'ici',
	    'ils',
	    'les',
	    'leurs',
	    'quel',
	    'quels',
	    'quelle',
	    'quelles',
	    'sans',
	    'soi'
	];

	exports.words = words;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(13),
	    util = __webpack_require__(14);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);    
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.trim(text.split(/[^a-z0-9äâàéèëêïîöôùüûœç]+/i));
	};


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2012, Polyakov Vladimir, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Stemmer = __webpack_require__(32);

	var PorterStemmer = new Stemmer();
	module.exports = PorterStemmer;

	function attemptReplacePatterns(token, patterns) {
		var replacement = null;
		var i = 0, isReplaced = false;
		while ((i < patterns.length) && !isReplaced) {
			if (patterns[i][0].test(token)) {
				replacement = token.replace(patterns[i][0], patterns[i][1]);
				isReplaced = true;
			}
			i++;
		}
		return replacement;
	};

	function perfectiveGerund(token) {
		var result = attemptReplacePatterns(token, [
				[/[ая]в(ши|шись)$/g, ''],
				[/(ив|ивши|ившись|ывши|ывшись|ыв)$/g, '']
			]);
		return result;
	};

	function adjectival(token) {
		var result = adjective(token);
		if (result != null) {
			var pariticipleResult = participle(result);
			result = pariticipleResult ? pariticipleResult : result;
		}
		return result;
	};

	function adjective(token) {
		var result = attemptReplacePatterns(token, [
				[/(ее|ие|ые|ое|ими|ыми|ей|ий|ый|ой|ем|им|ым|ом|его|ого|ему|ому|их|ых|ую|юю|ая|яя|ою|ею)$/g, '']
			]);
		return result;
	};

	function participle(token) {
		var result = attemptReplacePatterns(token, [
			[/([ая])(ем|нн|вш|ющ|щ)$/g, '$1'],
			[/(ивш|ывш|ующ)$/g, '']
		]);
		return result;
	};

	function reflexive(token) {
		var result = attemptReplacePatterns(token, [
			[/(ся|сь)$/g, '']
		]);
		return result;
	};

	function verb(token) {
		var result = attemptReplacePatterns(token, [
			[/([ая])(ла|на|ете|йте|ли|й|л|ем|н|ло|но|ет|ют|ны|ть|ешь|нно)$/g, '$1'],
			[/(ила|ыла|ена|ейте|уйте|ите|или|ыли|ей|уй|ил|ыл|им|ым|ен|ило|ыло|ено|ят|ует|ит|ыт|ены|ить|ыть|ишь|ую|ю)$/g, '']
		]);
		return result;
	};

	function noun(token) {
		var result = attemptReplacePatterns(token, [
			[/(а|ев|ов|ие|ье|е|иями|ями|ами|еи|ии|и|ией|ей|ой|ий|й|иям|ям|ием|ем|ам|ом|о|у|ах|иях|ях|ы|ь|ию|ью|ю|ия|ья|я)$/g, '']
		]);
		return result;
	};

	function superlative (token) {
		var result = attemptReplacePatterns(token, [
			[/(ейш|ейше)$/g, '']
		]);
		return result;
	};

	function derivational (token) {
		var result = attemptReplacePatterns(token, [
			[/(ост|ость)$/g, '']
		]);
		return result;
	};

	// perform full stemming algorithm on a single word
	PorterStemmer.stem = function(token) {
		token = token.toLowerCase().replace(/ё/g, 'е');
		var volwesRegexp = /^(.*?[аеиоюяуыиэ])(.*)$/g;
		var RV = volwesRegexp.exec(token);
		if (!RV || RV.length < 3) {
			return token;
		}
		var head = RV[1];
		RV = RV[2];
		volwesRegexp.lastIndex = 0;
		var R2 = volwesRegexp.exec(RV);
		var result = perfectiveGerund(RV);
		if (result === null) {
			var resultReflexive = reflexive(RV) || RV;
			result = adjectival(resultReflexive);
			if (result === null) {
				result = verb(resultReflexive);
				if (result === null) {
					result = noun(resultReflexive);
					if (result === null) {
						result = resultReflexive;
					}
				}
			}
		}
		result = result.replace(/и$/g, '');
		var derivationalResult = result
		if (R2 && R2[2]) {
			derivationalResult = derivational(R2[2]);
			if (derivationalResult != null) {
				derivationalResult = derivational(result);
			} else {
				derivationalResult = result;
			}
		}

		var superlativeResult = superlative(derivationalResult) || derivationalResult;

		superlativeResult = superlativeResult.replace(/(н)н/g, '$1');
		superlativeResult = superlativeResult.replace(/ь$/g, '');
		return head + superlativeResult;
	};


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2012, Polyakov Vladimir, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(33);
	var Tokenizer = __webpack_require__(34);

	module.exports = function() {
	    var stemmer = this;

	    stemmer.stem = function(token) {
	        return token;
	    };

	    stemmer.tokenizeAndStem = function(text, keepStops) {
	        var stemmedTokens = [];
	        
	        new Tokenizer().tokenize(text).forEach(function(token) {
	            if (keepStops || stopwords.words.indexOf(token) == -1) {
	                var resultToken = token.toLowerCase();
	                if (resultToken.match(new RegExp('[а-яё0-9]+', 'gi'))) {
	                    resultToken = stemmer.stem(resultToken);
	                }
	                stemmedTokens.push(resultToken);
	            }
	        });
	        
	        return stemmedTokens;
	    };

	    stemmer.attach = function() {
	        String.prototype.stem = function() {
	            return stemmer.stem(this);
	        };
	        
	        String.prototype.tokenizeAndStem = function(keepStops) {
	            return stemmer.tokenizeAndStem(this, keepStops);
	        };
	    };
	}


/***/ },
/* 33 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Polyakov Vladimir, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	var words = [
	    'о', 'после', 'все', 'также', 'и', 'другие', 'все', 'как', 'во', 'быть',
	    'потому', 'был', 'до', 'являюсь', 'между', 'все', 'но', 'от', 'иди', 'могу',
	    'подойди', 'мог', 'делал', 'делаю', 'каждый', 'для', 'откуда', 'иметь', 'имел',
	    'он', 'имеет', 'её', 'здесь', 'его', 'как', 'если', 'в', 'оно', 'за',
	    'делать', 'много', 'я', 'может быть', 'более', 'самый', 'должен',
	    'мой', 'никогда', 'сейчас', 'из', 'на', 'только', 'или', 'другой', 'другая',
	    'другое', 'наше', 'вне', 'конец', 'сказал', 'сказала', 'также', 'видел', 'c',
	    'немного', 'все еще', 'так', 'затем', 'тот', 'их', 'там', 'этот', 'они', 'те',
	    'через', 'тоже', 'под', 'над', 'очень', 'был', 'путь', 'мы', 'хорошо',
	    'что', 'где', 'который', 'пока', 'кто', 'с кем', 'хотел бы', 'ты', 'твои',
	    'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н',
	    'o', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь',
	    'э', 'ю', 'я','$', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];
	    
	// tell the world about the noise words.    
	exports.words = words;


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(13),
	    util = __webpack_require__(14);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);    
	};

	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.withoutEmpty = function(array) {
		return array.filter(function(a) {return a;});
	};

	AggressiveTokenizer.prototype.clearText = function(text) {
		return text.replace(/[^a-zа-яё0-9]/gi, ' ').replace(/[\s\n]+/g, ' ').trim();
	};

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.withoutEmpty(this.clearText(text).split(' '));
	};


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2012, David Przybilla, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Stemmer = __webpack_require__(36);

	var PorterStemmer = new Stemmer();
	module.exports = PorterStemmer;


	function isVowel(letter){
		return (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' || letter == 'á' || letter == 'é' ||
				letter == 'í' || letter == 'ó' || letter == 'ú');
	};

	function getNextVowelPos(token,start){
		length=token.length
				for (var i = start; i < length; i++)
					if (isVowel(token[i])) return i;
				return length;
	};

	function getNextConsonantPos(token,start){
		length=token.length
				for (var i = start; i < length; i++)
					if (!isVowel(token[i])) return i;
				return length;
	};


	function endsin(token, suffix) {
		if (token.length < suffix.length) return false;
		return (token.slice(-suffix.length) == suffix);
	};

	function endsinArr(token, suffixes) {
		for(var i=0;i<suffixes.length;i++){
			if (endsin(token, suffixes[i])) return suffixes[i];
		}
		return '';
	};

	function removeAccent(token) {
		var str=token.replace(/á/gi,'a');
		str=str.replace(/é/gi,'e');
		str=str.replace(/í/gi,'i');
		str=str.replace(/ó/gi,'o');
		str=str.replace(/ú/gi,'u');
		return str;
	};

	// perform full stemming algorithm on a single word
	PorterStemmer.stem = function(token) {
		token = token.toLowerCase();

		if (token.length<3){
			return token;
		}

		var r1,r2,rv,len= token.length;
		//looking for regions after vowels

		for(var i=0; i< token.length-1 && r1==len;i++){
	 		if(isVowel(token[i]) && !isVowel(token[i+1]) ){
	 			r1=i+2;
	 		}

		}

		for(var i=r1; i< token.length-1 && r2==len;i++){
			if(isVowel(token[i]) && !isVowel(token[i+1])){
				r2=i+2;
			}
		}

		if (len > 3) {
				if(isVowel(token[1])) {
					// If the second letter is a consonant, RV is the region after the next following vowel
					rv = getNextVowelPos(token, 2) +1;
				} else if (isVowel(token[0]) && isVowel(token[1])) {
					// or if the first two letters are vowels, RV is the region after the next consonant
					rv = getNextConsonantPos(token, 2) + 1;
				} else {
					//otherwise (consonant-vowel case) RV is the region after the third letter. But RV is the end of the word if these positions cannot be found.
					rv = 3;
				}
			}

		var r1_txt = token.substring(r1-1);
		var r2_txt = token.substring(r2-1);
		var rv_txt = token.substring(rv-1);


		var token_orig = token;

		// Step 0: Attached pronoun
		var pronoun_suf = new Array('me', 'se', 'sela', 'selo', 'selas', 'selos', 'la', 'le', 'lo', 'las', 'les', 'los', 'nos');
		var pronoun_suf_pre1 = new Array('éndo', 'ándo', 'ár', 'ér', 'ír');
		var pronoun_suf_pre2 = new Array('ando', 'iendo', 'ar', 'er', 'ir');
		var suf = endsinArr(token, pronoun_suf);


		if (suf!='') {

			var pre_suff = endsinArr(rv_txt.slice(0,-suf.length),pronoun_suf_pre1);

			if (pre_suff != '') {

					token = removeAccent(token.slice(0,-suf.length));
			} else {
				var pre_suff = endsinArr(rv_txt.slice(0,-suf.length),pronoun_suf_pre2);

				if (pre_suff != '' ||
					(endsin(token, 'yendo' ) &&
					(token.slice(-suf.length-6,1) == 'u'))) {
					token = token.slice(0,-suf.length);
				}
			}
		}

			if (token != token_orig) {
				r1_txt = token.substring(r1-1);
				r2_txt = token.substring(r2-1);
				rv_txt = token.substring(rv-1);
			}
			var token_after0 = token;

			if ((suf = endsinArr(r2_txt, new Array('anza', 'anzas', 'ico', 'ica', 'icos', 'icas', 'ismo', 'ismos', 'able', 'ables', 'ible', 'ibles', 'ista', 'istas', 'oso', 'osa', 'osos', 'osas', 'amiento', 'amientos', 'imiento', 'imientos'))) != '') {
				token = token.slice(0, -suf.length);
			} else if ((suf = endsinArr(r2_txt, new  Array('icadora', 'icador', 'icación', 'icadoras', 'icadores', 'icaciones', 'icante', 'icantes', 'icancia', 'icancias', 'adora', 'ador', 'ación', 'adoras', 'adores', 'aciones', 'ante', 'antes', 'ancia', 'ancias'))) != '') {
				token = token.slice(0,  -suf.length);
			} else if ((suf = endsinArr(r2_txt, new  Array('logía', 'logías'))) != '') {
				token = token.slice(0,  -suf.length)+ 'log';
			} else if ((suf =endsinArr(r2_txt, new  Array('ución', 'uciones'))) != '') {
				token = token.slice(0,  -suf.length) + 'u';
			} else if ((suf = endsinArr(r2_txt, new  Array('encia', 'encias'))) != '') {
				token = token.slice(0,  -suf.length)+ 'ente';
			} else if ((suf = endsinArr(r2_txt, new  Array('ativamente', 'ivamente', 'osamente', 'icamente', 'adamente'))) != '') {
				token = token.slice(0,  -suf.length);
			} else if ((suf = endsinArr(r1_txt, new  Array('amente'))) != '') {
				token = token.slice(0,  -suf.length);
			} else if ((suf = endsinArr(r2_txt, new  Array('antemente', 'ablemente', 'iblemente', 'mente'))) != '') {
				token = token.slice(0,  -suf.length);
			} else if ((suf = endsinArr(r2_txt, new  Array('abilidad', 'abilidades', 'icidad', 'icidades', 'ividad', 'ividades', 'idad', 'idades'))) != '') {
				token = token.slice(0,  -suf.length);
			} else if ((suf = endsinArr(r2_txt, new  Array('ativa', 'ativo', 'ativas', 'ativos', 'iva', 'ivo', 'ivas', 'ivos'))) != '') {
				token = token.slice(0,  -suf.length);
			}

			if (token != token_after0) {
				r1_txt = token.substring(r1-1);
				r2_txt = token.substring(r2-1);
				rv_txt = token.substring(rv-1);
			}
			var token_after1 = token;

			if (token_after0 == token_after1) {
				// Do step 2a if no ending was removed by step 1.
				if ((suf = endsinArr(rv_txt, new Array('ya', 'ye', 'yan', 'yen', 'yeron', 'yendo', 'yo', 'yó', 'yas', 'yes', 'yais', 'yamos'))) != '' && (token.substring(suf.length-1,1) == 'u')) {
					token = token.slice(0, -suf.length);
				}

				if (token != token_after1) {
					r1_txt = token.substring(r1-1);
					r2_txt = token.substring(r2-1);
					rv_txt = token.substring(rv-1);
				}
				var token_after2a = token;

				// Do Step 2b if step 2a was done, but failed to remove a suffix.
				if (token_after2a == token_after1) {

					if ((suf = endsinArr(rv_txt,new Array('en', 'es', 'éis', 'emos'))) != '') {
						token = token.slice(0,-suf.length);
						if (endsin(token, 'gu')) {
							token = token.slice(0,-1);
						}
					} else if ((suf = endsinArr(rv_txt, new Array('arían', 'arías', 'arán', 'arás', 'aríais', 'aría', 'aréis', 'aríamos', 'aremos', 'ará', 'aré', 'erían', 'erías', 'erán', 'erás', 'eríais', 'ería', 'eréis', 'eríamos', 'eremos', 'erá', 'eré', 'irían', 'irías', 'irán', 'irás', 'iríais', 'iría', 'iréis', 'iríamos', 'iremos', 'irá', 'iré', 'aba', 'ada', 'ida', 'ía', 'ara', 'iera', 'ad', 'ed', 'id', 'ase', 'iese', 'aste', 'iste', 'an', 'aban', 'ían', 'aran', 'ieran', 'asen', 'iesen', 'aron', 'ieron', 'ado', 'ido', 'ando', 'iendo', 'ió', 'ar', 'er', 'ir', 'as', 'abas', 'adas', 'idas', 'ías', 'aras', 'ieras', 'ases', 'ieses', 'ís', 'áis', 'abais', 'íais', 'arais', 'ierais', '  aseis', 'ieseis', 'asteis', 'isteis', 'ados', 'idos', 'amos', 'ábamos', 'íamos', 'imos', 'áramos', 'iéramos', 'iésemos', 'ásemos'))) != '') {

						token = token.slice(0, -suf.length);

					}
				}
			}

			// Always do step 3.
			r1_txt = token.substring(r1-1);
			r2_txt = token.substring(r2-1);
			rv_txt = token.substring(rv-1);

			if ((suf = endsinArr(rv_txt, new Array('os', 'a', 'o', 'á', 'í', 'ó'))) != '') {
				token = token.slice(0, -suf.length);
			} else if ((suf = endsinArr(rv_txt ,new Array('e','é'))) != '') {
				token = token.slice(0,-1);
				rv_txt = token.substring(rv-1);
				if (endsin(rv_txt,'u') && endsin(token,'gu')) {
					token = token.slice(0,-1);
				}
			}

			return removeAccent(token);

	};


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2012, David Przybilla, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(37);
	var Tokenizer = __webpack_require__(38);

	module.exports = function() {
	    var stemmer = this;

	    stemmer.stem = function(token) {
	        return token;
	    };

	    stemmer.tokenizeAndStem = function(text, keepStops) {
	        var stemmedTokens = [];
	        
	        new Tokenizer().tokenize(text).forEach(function(token) {
	            if (keepStops || stopwords.words.indexOf(token) == -1) {
	                var resultToken = token.toLowerCase();
	                if (resultToken.match(new RegExp('[a-záéíóúüñ0-9]+', 'gi'))) {
	                    resultToken = stemmer.stem(resultToken);
	                }
	                stemmedTokens.push(resultToken);
	            }
	        });
	        
	        return stemmedTokens;
	    };

	    stemmer.attach = function() {
	        String.prototype.stem = function() {
	            return stemmer.stem(this);
	        };
	        
	        String.prototype.tokenizeAndStem = function(keepStops) {
	            return stemmer.tokenizeAndStem(this, keepStops);
	        };
	    };
	}


/***/ },
/* 37 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, David Przybilla, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	var words = [
	    'a','un','el','ella','y','sobre','de','la','que','en',
	    'los','del','se','las','por','un','para','con','no',
	    'una','su','al','lo','como','más','pero','sus','le',
	    'ya','o','porque','cuando','muy','sin','sobre','también',
	    'me','hasta','donde','quien','desde','nos','durante','uno',
	    'ni','contra','ese','eso','mí','qué','otro','él','cual',
	    'poco','mi','tú','te','ti','sí',
	     '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];
	    
	// tell the world about the noise words.    
	exports.words = words;


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel,David Przybilla

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(13),
	    util = __webpack_require__(14);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);    
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.trim(text.split(/[^a-zA-Zá-úÁ-ÚñÑüÜ]+/));
	};


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2012, Leonardo Fenu, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Stemmer = __webpack_require__(40);

	var PorterStemmer = new Stemmer();
	module.exports = PorterStemmer;


	function isVowel(letter){
		return (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' || letter == 'à' ||
				letter == 'è' || letter == 'ì' || letter == 'ò' || letter == 'ù');
	};

	function getNextVowelPos(token,start){
		start = start + 1;
		var length = token.length;
		for (var i = start; i < length; i++) {
			if (isVowel(token[i])) {
				return i;
			}
		}
		return length;
	};

	function getNextConsonantPos(token,start){
		length=token.length
				for (var i = start; i < length; i++)
					if (!isVowel(token[i])) return i;
				return length;
	};


	function endsin(token, suffix) {
		if (token.length < suffix.length) return false;
		return (token.slice(-suffix.length) == suffix);
	};

	function endsinArr(token, suffixes) {
		for(var i=0;i<suffixes.length;i++){
			if (endsin(token, suffixes[i])) return suffixes[i];
		}
		return '';
	};

	function replaceAcute(token) {
		var str=token.replace(/á/gi,'à');
		str=str.replace(/é/gi,'è');
		str=str.replace(/í/gi,'ì');
		str=str.replace(/ó/gi,'ò');
		str=str.replace(/ú/gi,'ù');
		return str;
	};

	function vowelMarking(token) {
		function replacer(match, p1, p2, p3){
	  		return p1+p2.toUpperCase()+p3;
		};	
		str=token.replace(/([aeiou])(i|u)([aeiou])/g, replacer);	
		return str;
	}


	// perform full stemming algorithm on a single word
	PorterStemmer.stem = function(token) {
		
		token = token.toLowerCase();
		token = replaceAcute(token);
		token = token.replace(/qu/g,'qU');	
		token = vowelMarking(token);
		
		if (token.length<3){
			return token;
		}

		var r1 = r2 = rv = len = token.length;
		// R1 is the region after the first non-vowel following a vowel, 
		for(var i=0; i < token.length-1 && r1==len;i++){
	 		if(isVowel(token[i]) && !isVowel(token[i+1]) ){
	 			r1=i+2;
	 		}
		}
		// Or is the null region at the end of the word if there is no such non-vowel.  

		// R2 is the region after the first non-vowel following a vowel in R1
		for(var i=r1; i< token.length-1 && r2==len;i++){
			if(isVowel(token[i]) && !isVowel(token[i+1])){
				r2=i+2;
			}
		}

		// Or is the null region at the end of the word if there is no such non-vowel. 

		// If the second letter is a consonant, RV is the region after the next following vowel, 
		
		// RV as follow

		if (len > 3) {
			if(!isVowel(token[1])) {
				// If the second letter is a consonant, RV is the region after the next following vowel
				rv = getNextVowelPos(token, 1) +1;
			} else if (isVowel(token[0]) && isVowel(token[1])) { 
				// or if the first two letters are vowels, RV is the region after the next consonant
				rv = getNextConsonantPos(token, 2) + 1;
			} else {
				//otherwise (consonant-vowel case) RV is the region after the third letter. But RV is the end of the word if these positions cannot be found.
				rv = 3;
			}
		}

		var r1_txt = token.substring(r1);
		var r2_txt = token.substring(r2);
		var rv_txt = token.substring(rv);

		var token_orig = token;

		// Step 0: Attached pronoun

		var pronoun_suf = new Array('glieli','glielo','gliene','gliela','gliele','sene','tene','cela','cele','celi','celo','cene','vela','vele','veli','velo','vene','mela','mele','meli','melo','mene','tela','tele','teli','telo','gli','ci', 'la','le','li','lo','mi','ne','si','ti','vi');	
		var pronoun_suf_pre1 = new Array('ando','endo');	
		var pronoun_suf_pre2 = new Array('ar', 'er', 'ir');
		var suf = endsinArr(token, pronoun_suf);

		if (suf!='') {
			var pre_suff1 = endsinArr(rv_txt.slice(0,-suf.length),pronoun_suf_pre1);
			var pre_suff2 = endsinArr(rv_txt.slice(0,-suf.length),pronoun_suf_pre2);	
			
			if (pre_suff1 != '') {
				token = token.slice(0,-suf.length);
			}
			if (pre_suff2 != '') {
				token = token.slice(0,  -suf.length)+ 'e';
			}
		}

		if (token != token_orig) {
			r1_txt = token.substring(r1);
			r2_txt = token.substring(r2);
			rv_txt = token.substring(rv);
		}

		var token_after0 = token;

		// Step 1:  Standard suffix removal
		
		if ((suf = endsinArr(r2_txt, new  Array('ativamente','abilamente','ivamente','osamente','icamente'))) != '') {
			token = token.slice(0, -suf.length);	// delete
		} else if ((suf = endsinArr(r2_txt, new  Array('icazione','icazioni','icatore','icatori','azione','azioni','atore','atori'))) != '') {
			token = token.slice(0,  -suf.length);	// delete
		} else if ((suf = endsinArr(r2_txt, new  Array('logia','logie'))) != '') {
			token = token.slice(0,  -suf.length)+ 'log'; // replace with log
		} else if ((suf =endsinArr(r2_txt, new  Array('uzione','uzioni','usione','usioni'))) != '') {
			token = token.slice(0,  -suf.length) + 'u'; // replace with u
		} else if ((suf = endsinArr(r2_txt, new  Array('enza','enze'))) != '') {
			token = token.slice(0,  -suf.length)+ 'ente'; // replace with ente
		} else if ((suf = endsinArr(rv_txt, new  Array('amento', 'amenti', 'imento', 'imenti'))) != '') {
			token = token.slice(0,  -suf.length);	// delete
		} else if ((suf = endsinArr(r1_txt, new  Array('amente'))) != '') {
			token = token.slice(0,  -suf.length); // delete
		} else if ((suf = endsinArr(r2_txt, new Array('atrice','atrici','abile','abili','ibile','ibili','mente','ante','anti','anza','anze','iche','ichi','ismo','ismi','ista','iste','isti','istà','istè','istì','ico','ici','ica','ice','oso','osi','osa','ose'))) != '') {
			token = token.slice(0,  -suf.length); // delete
		} else if ((suf = endsinArr(r2_txt, new  Array('abilità', 'icità', 'ività', 'ità'))) != '') {
			token = token.slice(0,  -suf.length); // delete
		} else if ((suf = endsinArr(r2_txt, new  Array('icativa','icativo','icativi','icative','ativa','ativo','ativi','ative','iva','ivo','ivi','ive'))) != '') {
			token = token.slice(0,  -suf.length);
		}
		
		
		if (token != token_after0) {
			r1_txt = token.substring(r1);
			r2_txt = token.substring(r2);
			rv_txt = token.substring(rv);
		}
		

		var token_after1 = token;
		
		// Step 2:  Verb suffixes

		if (token_after0 == token_after1) {
			if ((suf = endsinArr(rv_txt, new Array('erebbero','irebbero','assero','assimo','eranno','erebbe','eremmo','ereste','eresti','essero','iranno','irebbe','iremmo','ireste','iresti','iscano','iscono','issero','arono','avamo','avano','avate','eremo','erete','erono','evamo','evano','evate','iremo','irete','irono','ivamo','ivano','ivate','ammo','ando','asse','assi','emmo','enda','ende','endi','endo','erai','Yamo','iamo','immo','irai','irei','isca','isce','isci','isco','erei','uti','uto','ita','ite','iti','ito','iva','ivi','ivo','ono','uta','ute','ano','are','ata','ate','ati','ato','ava','avi','avo','erà','ere','erò','ete','eva','evi','evo','irà','ire','irò','ar','ir'))) != '') {
				token = token.slice(0, -suf.length);
			}
		}

		
		r1_txt = token.substring(r1);
		r2_txt = token.substring(r2);
		rv_txt = token.substring(rv);

		// Always do step 3. 

		if ((suf = endsinArr(rv_txt, new Array('ia', 'ie', 'ii', 'io', 'ià', 'iè','iì', 'iò','a','e','i','o','à','è','ì','ò'))) != '') {
			token = token.slice(0, -suf.length);
		} 

		r1_txt = token.substring(r1);
		r2_txt = token.substring(r2);
		rv_txt = token.substring(rv);
		
		if ((suf =endsinArr(rv_txt, new  Array('ch'))) != '') {
			token = token.slice(0,  -suf.length) + 'c'; // replace with c
		} else if ((suf =endsinArr(rv_txt, new  Array('gh'))) != '') {
			token = token.slice(0,  -suf.length) + 'g'; // replace with g
		}

		
		r1_txt = token.substring(r1);
		r2_txt = token.substring(r2);
		rv_txt = token.substring(rv);

		return token.toLowerCase();

	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var stopwords = __webpack_require__(41);
	var Tokenizer = __webpack_require__(42);

	module.exports = function() {
	    var stemmer = this;

	    stemmer.stem = function(token) {
	        return token;
	    };

	    stemmer.tokenizeAndStem = function(text, keepStops) {
	        var stemmedTokens = [];
	        
	        new Tokenizer().tokenize(text).forEach(function(token) {
	            if (keepStops || stopwords.words.indexOf(token) == -1) {
	                var resultToken = token.toLowerCase();
	                if (resultToken.match(/[a-zàèìòù0-9]/gi)) {
	                    resultToken = stemmer.stem(resultToken);
	                }
	                stemmedTokens.push(resultToken);
	            }
	        });
	        
	        return stemmedTokens;
	    };

	    stemmer.attach = function() {
	        String.prototype.stem = function() {
	            return stemmer.stem(this);
	        };
	        
	        String.prototype.tokenizeAndStem = function(keepStops) {
	            return stemmer.tokenizeAndStem(this, keepStops);
	        };
	    };
	}

/***/ },
/* 41 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, David Przybilla, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	var words = [
	    'ad','al','allo','ai','agli','all','agl','alla','alle','con','col','coi','da','dal','dallo',
	    'dai','dagli','dall','dagl','dalla','dalle','di','del','dello','dei','degli','dell','degl',
	    'della','delle','in','nel','nello','nei','negli','nell','negl','nella','nelle','su','sul',
	    'sullo','sui','sugli','sull','sugl','sulla','sulle','per','tra','contro','io','tu','lui',
	    'lei','noi','voi','loro','mio','mia','miei','mie','tuo','tua','tuoi','tue','suo','sua','suoi',
	    'sue','nostro','nostra','nostri','nostre','vostro','vostra','vostri','vostre','mi','ti','ci',
	    'vi','lo','la','li','le','gli','ne','il','un','uno','una','ma','ed','se','perché','anche','come',
	    'dov','dove','che','chi','cui','non','più','quale','quanto','quanti','quanta','quante','quello',
	    'quelli','quella','quelle','questo','questi','questa','queste','si','tutto','tutti','a','c','e',
	    'i','l','o','ho','hai','ha','abbiamo','avete','hanno','abbia','abbiate','abbiano','avrò','avrai',
	    'avrà','avremo','avrete','avranno','avrei','avresti','avrebbe','avremmo','avreste','avrebbero',
	    'avevo','avevi','aveva','avevamo','avevate','avevano','ebbi','avesti','ebbe','avemmo','aveste',
	    'ebbero','avessi','avesse','avessimo','avessero','avendo','avuto','avuta','avuti','avute','sono',
	    'sei','è','siamo','siete','sia','siate','siano','sarò','sarai','sarà','saremo','sarete','saranno',
	    'sarei','saresti','sarebbe','saremmo','sareste','sarebbero','ero','eri','era','eravamo','eravate',
	    'erano','fui','fosti','fu','fummo','foste','furono','fossi','fosse','fossimo','fossero','essendo',
	    'faccio','fai','facciamo','fanno','faccia','facciate','facciano','farò','farai','farà','faremo',
	    'farete','faranno','farei','faresti','farebbe','faremmo','fareste','farebbero','facevo','facevi',
	    'faceva','facevamo','facevate','facevano','feci','facesti','fece','facemmo','faceste','fecero',
	    'facessi','facesse','facessimo','facessero','facendo','sto','stai','sta','stiamo','stanno','stia',
	    'stiate','stiano','starò','starai','starà','staremo','starete','staranno','starei','staresti',
	    'starebbe','staremmo','stareste','starebbero','stavo','stavi','stava','stavamo','stavate','stavano',
	    'stetti','stesti','stette','stemmo','steste','stettero','stessi','stesse','stessimo','stessero','stando',
	     '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];
	    
	// tell the world about the noise words.    
	exports.words = words;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel,David Przybilla

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(13),
	    util = __webpack_require__(14);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);    
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.trim(text.split(/\W+/));
	};


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Kristoffer Brabrand

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Stemmer = __webpack_require__(44);

	// Get the part of the token after the first non-vowel following a vowel
	function getR1(token) {
	    var match = token.match(/[aeiouyæåø]{1}[^aeiouyæåø]([A-Za-z0-9_æøåÆØÅäÄöÖüÜ]+)/);

	    if (match) {
	        var preR1Length = match.index + 2;

	        if (preR1Length < 3 && preR1Length > 0) {
	            return token.slice(3);
	        } else if (preR1Length >= 3) {
	            return match[1];
	        } else {
	            return token;
	        }
	    }

	    return null;
	}

	function step1(token) {
	    // Perform step 1a-c
	    var step1aResult = step1a(token),
	        step1bResult = step1b(token),
	        step1cResult = step1c(token);

	    // Returne the shortest result string (from 1a, 1b and 1c)
	    if (step1aResult.length < step1bResult.length) {
	        return (step1aResult.length < step1cResult.length) ? step1aResult : step1cResult;
	    } else {
	        return (step1bResult.length < step1cResult.length) ? step1bResult : step1cResult;
	    }
	}

	// step 1a as defined for the porter stemmer algorithm.
	function step1a(token) {
	    var r1 = getR1(token);

	    if (!r1) {
	        return token;
	    }

	    var r1Match = r1.match(/(a|e|ede|ande|ende|ane|ene|hetene|en|heten|ar|er|heter|as|es|edes|endes|enes|hetenes|ens|hetens|ers|ets|et|het|ast)$/);

	    if (r1Match) {
	        return token.replace(new RegExp(r1Match[1] + '$'), '');
	    }

	    return token;
	}

	// step 1b as defined for the porter stemmer algorithm.
	function step1b(token) {
	    var r1 = getR1(token);

	    if (!r1) {
	        return token;
	    }

	    if (token.match(/(b|c|d|f|g|h|j|l|m|n|o|p|r|t|v|y|z)s$/)) {
	        return token.slice(0, -1);
	    }

	    if (token.match(/([^aeiouyæåø]k)s$/)) {
	        return token.slice(0, -1);
	    }

	    return token;
	}

	// step 1c as defined for the porter stemmer algorithm.
	function step1c(token) {
	    var r1 = getR1(token);

	    if (!r1) {
	        return token;
	    }

	    if (r1.match(/(erte|ert)$/)) {
	        return token.replace(/(erte|ert)$/, 'er');
	    }

	    return token;
	}

	// step 2 as defined for the porter stemmer algorithm.
	function step2(token) {
	    var r1 = getR1(token);

	    if (!r1) {
	        return token;
	    }

	    if (r1.match(/(d|v)t$/)) {
	        return token.slice(0, -1);
	    }

	    return token;
	}

	// step 3 as defined for the porter stemmer algorithm.
	function step3(token) {
	    var r1 = getR1(token);

	    if (!r1)
	        return token;

	    var r1Match = r1.match(/(leg|eleg|ig|eig|lig|elig|els|lov|elov|slov|hetslov)$/);

	    if (r1Match) {
	        return token.replace(new RegExp(r1Match[1] + '$'), '');
	    }

	    return token;
	}

	var PorterStemmer = new Stemmer();
	module.exports = PorterStemmer;

	// perform full stemming algorithm on a single word
	PorterStemmer.stem = function(token) {
	    return step3(step2(step1(token.toLowerCase()))).toString();
	};

	//exports for tests
	PorterStemmer.getR1  = getR1;
	PorterStemmer.step1  = step1;
	PorterStemmer.step1a = step1a;
	PorterStemmer.step1b = step1b;
	PorterStemmer.step1c = step1c;
	PorterStemmer.step2  = step2;
	PorterStemmer.step3  = step3;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Kristoffer Brabrand

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(45);
	var Tokenizer = __webpack_require__(46);

	module.exports = function() {
	    var stemmer = this;

	    stemmer.stem = function(token) {
	        return token;
	    };

	    stemmer.addStopWord = function(stopWord) {
	        stopwords.words.push(stopWord);
	    };

	    stemmer.addStopWords = function(moreStopWords) {
	        stopwords.words = stopwords.words.concat(moreStopWords);
	    };

	    stemmer.tokenizeAndStem = function(text, keepStops) {
	        var stemmedTokens = [];

	        new Tokenizer().tokenize(text).forEach(function(token) {
	            if(keepStops || stopwords.words.indexOf(token.toLowerCase()) == -1)
	                stemmedTokens.push(stemmer.stem(token));
	        });

	        return stemmedTokens;
	    };

	    stemmer.attach = function() {
	        String.prototype.stem = function() {
	            return stemmer.stem(this);
	        };

	        String.prototype.tokenizeAndStem = function(keepStops) {
	            return stemmer.tokenizeAndStem(this, keepStops);
	        };
	    };
	}


/***/ },
/* 45 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2014, Kristoffer Brabrand

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	var words = [
	    'og','i','jeg','det','at','en','et','den','til','er','som',
	    'på','de','med','han','av','ikke','der','så','var','meg',
	    'seg','men','ett','har','om','vi','min','mitt','ha','hadde',
	    'hun','nå','over','da','ved','fra','du','ut','sin','dem',
	    'oss','opp','man','kan','hans','hvor','eller','hva','skal',
	    'selv','sjøl','her','alle','vil','bli','ble','blitt','kunne',
	    'inn','når','være','kom','noen','noe','ville','dere','som',
	    'deres','kun','ja','etter','ned','skulle','denne','for','deg',
	    'si','sine','sitt','mot','å','meget','hvorfor','dette','disse',
	    'uten','hvordan','ingen','din','ditt','blir','samme','hvilken',
	    'hvilke','sånn','inni','mellom','vår','hver','hvem','vors',
	    'hvis','både','bare','enn','fordi','før','mange','også','slik',
	    'vært','være','begge','siden','henne','hennar','hennes',
	    '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];

	// tell the world about the noise words.
	exports.words = words;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Kristoffer Brabrand

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(13),
	    normalizer = __webpack_require__(47),
	    util = __webpack_require__(14);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    text = normalizer.remove_diacritics(text);

	    // break a string up into an array of tokens by anything non-word
	    return this.trim(text.split(/[^A-Za-z0-9_æøåÆØÅäÄöÖüÜ]+/));
	};


/***/ },
/* 47 */
/***/ function(module, exports) {

	/*
	 Copyright (c) 2014, Kristoffer Brabrand

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * Remove commonly used diacritic marks from a string as these
	 * are not used in a consistent manner. Leave only ä, ö, ü.
	 */
	var remove_diacritics = function(text) {
	    text = text.replace('à', 'a');
	    text = text.replace('À', 'A');
	    text = text.replace('á', 'a');
	    text = text.replace('Á', 'A');
	    text = text.replace('â', 'a');
	    text = text.replace('Â', 'A');
	    text = text.replace('ç', 'c');
	    text = text.replace('Ç', 'C');
	    text = text.replace('è', 'e');
	    text = text.replace('È', 'E');
	    text = text.replace('é', 'e');
	    text = text.replace('É', 'E');
	    text = text.replace('ê', 'e');
	    text = text.replace('Ê', 'E');
	    text = text.replace('î', 'i');
	    text = text.replace('Î', 'I');
	    text = text.replace('ñ', 'n');
	    text = text.replace('Ñ', 'N');
	    text = text.replace('ó', 'o');
	    text = text.replace('Ó', 'O');
	    text = text.replace('ô', 'o');
	    text = text.replace('Ô', 'O');
	    text = text.replace('û', 'u');
	    text = text.replace('Û', 'U');
	    text = text.replace('š', 's');
	    text = text.replace('Š', 'S');

	    return text;
	};

	// export the relevant stuff.
	exports.remove_diacritics = remove_diacritics;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Stemmer = __webpack_require__(22);
	var ruleTable = __webpack_require__(49).rules;

	function acceptable(candidate) {
	    if (candidate.match(/^[aeiou]/))
	        return (candidate.length > 1);
	    else
	        return (candidate.length > 2 && candidate.match(/[aeiouy]/));
	}

	// take a token, look up the applicatble rule section and attempt some stemming!
	function applyRuleSection(token, intact) {
	    var section = token.substr( - 1);
	    var rules = ruleTable[section];

	    if (rules) {
	        for (var i = 0; i < rules.length; i++) {
	            if ((intact || !rules[i].intact)
	            // only apply intact rules to intact tokens
	            && token.substr(0 - rules[i].pattern.length) == rules[i].pattern) {
	                // hack off only as much as the rule indicates
	                var result = token.substr(0, token.length - rules[i].size);

	                // if the rules wants us to apply an appendage do so
	                if (rules[i].appendage)
	                    result += rules[i].appendage;

	                if (acceptable(result)) {
	                    token = result;

	                    // see what the rules wants to do next
	                    if (rules[i].continuation) {
	                        // this rule thinks there still might be stem left. keep at it.
	                        // since we've applied a change we'll pass false in for intact
	                        return applyRuleSection(result, false);
	                    } else {
	                        // the rule thinks we're done stemming. drop out.
	                        return result;
	                    }
	                }
	            }
	        }
	    }

	    return token;
	}

	var LancasterStemmer = new Stemmer();
	module.exports = LancasterStemmer;

	LancasterStemmer.stem = function(token) {
	    return applyRuleSection(token.toLowerCase(), true);
	}

/***/ },
/* 49 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	exports.rules = {
	    "a": [
	        {
	            "continuation": false, 
	            "intact": true, 
	            "pattern": "ia", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": true, 
	            "pattern": "a", 
	            "size": "1"
	        }
	    ], 
	    "b": [
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "bb", 
	            "size": "1"
	        }
	    ], 
	    "c": [
	        {
	            "appendage": "s", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ytic", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ic", 
	            "size": "2"
	       }, 
	        {
	            "appendage": "t", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "nc", 
	            "size": "1"
	        }
	    ], 
	    "d": [
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "dd", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "y", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ied", 
	            "size": "3"
	        }, 
	        {
	            "appendage": "ss", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ceed", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "eed", 
	            "size": "1"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ed", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "hood", 
	            "size": "4"
	        }
	    ], 
	    "e": [
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "e", 
	            "size": "1"
	        }
	    ], 
	    "f": [
	        {
	            "appendage": "v", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "lief", 
	            "size": "1"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "if", 
	            "size": "2"
	        }
	    ], 
	    "g": [
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ing", 
	            "size": "3"
	        }, 
	        {
	            "appendage": "y", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "iag", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ag", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "gg", 
	            "size": "1"
	        }
	    ], 
	    "h": [
	        {
	            "continuation": false, 
	            "intact": true, 
	            "pattern": "th", 
	            "size": "2"
	        }, 
	        {
	            "appendage": "ct", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "guish", 
	            "size": "5"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ish", 
	            "size": "3"
	        }
	    ], 
	    "i": [
	        {
	            "continuation": false, 
	            "intact": true, 
	            "pattern": "i", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "y", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "i", 
	            "size": "1"
	        }
	    ], 
	    "j": [
	        {
	            "appendage": "d", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ij", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "s", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "fuj", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "d", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "uj", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "d", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "oj", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "r", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "hej", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "t", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "verj", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "t", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "misj", 
	            "size": "2"
	        }, 
	        {
	            "appendage": "d", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "nj", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "s", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "j", 
	            "size": "1"
	        }
	    ], 
	    "l": [
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ifiabl", 
	            "size": "6"
	        }, 
	        {
	            "appendage": "y", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "iabl", 
	            "size": "4"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "abl", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ibl", 
	            "size": "3"
	        }, 
	        {
	            "appendage": "l", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "bil", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "cl", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "y", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "iful", 
	            "size": "4"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ful", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ul", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ial", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ual", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "al", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ll", 
	            "size": "1"
	        }
	    ], 
	    "m": [
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ium", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": true, 
	            "pattern": "um", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ism", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "mm", 
	            "size": "1"
	        }
	    ], 
	    "n": [
	        {
	            "appendage": "j", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "sion", 
	            "size": "4"
	        }, 
	        {
	            "appendage": "ct", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "xion", 
	            "size": "4"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ion", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ian", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "an", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "een", 
	            "size": "0"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "en", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "nn", 
	            "size": "1"
	        }
	    ], 
	    "p": [
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ship", 
	            "size": "4"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "pp", 
	            "size": "1"
	        }
	    ], 
	    "r": [
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "er", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ear", 
	            "size": "0"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ar", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "or", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ur", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "rr", 
	            "size": "1"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "tr", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "y", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ier", 
	            "size": "3"
	        }
	    ], 
	    "s": [
	        {
	            "appendage": "y", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ies", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "sis", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "is", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ness", 
	            "size": "4"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ss", 
	            "size": "0"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ous", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": true, 
	            "pattern": "us", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": true, 
	            "pattern": "s", 
	            "size": "1"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "s", 
	            "size": "0"
	        }
	    ], 
	    "t": [
	        {
	            "appendage": "y", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "plicat", 
	            "size": "4"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "at", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ment", 
	            "size": "4"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ent", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ant", 
	            "size": "3"
	        }, 
	        {
	            "appendage": "b", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ript", 
	            "size": "2"
	        }, 
	        {
	            "appendage": "b", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "orpt", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "duct", 
	            "size": "1"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "sumpt", 
	            "size": "2"
	        }, 
	        {
	            "appendage": "iv", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "cept", 
	            "size": "2"
	        }, 
	        {
	            "appendage": "v", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "olut", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "sist", 
	            "size": "0"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ist", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "tt", 
	            "size": "1"
	        }
	    ], 
	    "u": [
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "iqu", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ogu", 
	            "size": "1"
	        }
	    ], 
	    "v": [
	        {
	            "appendage": "j", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "siv", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "eiv", 
	            "size": "0"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "iv", 
	            "size": "2"
	        }
	    ], 
	    "y": [
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "bly", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "y", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ily", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ply", 
	            "size": "0"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ly", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ogy", 
	            "size": "1"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "phy", 
	            "size": "1"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "omy", 
	            "size": "1"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "opy", 
	            "size": "1"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ity", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ety", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "lty", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "istry", 
	            "size": "5"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ary", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ory", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ify", 
	            "size": "3"
	        }, 
	        {
	            "appendage": "t", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ncy", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "acy", 
	            "size": "3"
	        }
	    ], 
	    "z": [
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "iz", 
	            "size": "2"
	        }, 
	        {
	            "appendage": "s", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "yz", 
	            "size": "1"
	        }
	    ]
	};



/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2013, Paweł Łaskarzewski

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(51);
	var Tokenizer = __webpack_require__(52);

	module.exports = function() {
	    var stemmer = this;

	    stemmer.stem = function(token) {
	        return token;
	    };

	    stemmer.tokenizeAndStem = function(text, keepStops) {
	        var stemmedTokens = [];

	        new Tokenizer().tokenize(text).forEach(function(token) {
	            if (keepStops || stopwords.words.indexOf(token) == -1) {
	                var resultToken = token.toLowerCase();
	                if (resultToken.match(new RegExp('[a-zążśźęćńół0-9]+', 'gi'))) {
	                    resultToken = stemmer.stem(resultToken);
	                }
	                stemmedTokens.push(resultToken);
	            }
	        });

	        return stemmedTokens;
	    };

	    stemmer.attach = function() {
	        String.prototype.stem = function() {
	            return stemmer.stem(this);
	        };

	        String.prototype.tokenizeAndStem = function(keepStops) {
	            return stemmer.tokenizeAndStem(this, keepStops);
	        };
	    };
	}


/***/ },
/* 51 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2013, Paweł Łaskarzewski

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	// list based on: http://pl.wikipedia.org/wiki/Wikipedia:Stopwords
	var words = [
	    'a', 'aby', 'ach', 'acz', 'aczkolwiek', 'aj', 'albo', 'ale', 'ależ', 'ani',
	    'aż', 'bardziej', 'bardzo', 'bo', 'bowiem', 'by', 'byli', 'bynajmniej',
	    'być', 'był', 'była', 'było', 'były', 'będzie', 'będą', 'cali', 'cała',
	    'cały', 'ci', 'cię', 'ciebie', 'co', 'cokolwiek', 'coś', 'czasami',
	    'czasem', 'czemu', 'czy', 'czyli', 'daleko', 'dla', 'dlaczego', 'dlatego',
	    'do', 'dobrze', 'dokąd', 'dość', 'dużo', 'dwa', 'dwaj', 'dwie', 'dwoje',
	    'dziś', 'dzisiaj', 'gdy', 'gdyby', 'gdyż', 'gdzie', 'gdziekolwiek',
	    'gdzieś', 'i', 'ich', 'ile', 'im', 'inna', 'inne', 'inny', 'innych', 'iż',
	    'ja', 'ją', 'jak', 'jakaś', 'jakby', 'jaki', 'jakichś', 'jakie', 'jakiś',
	    'jakiż', 'jakkolwiek', 'jako', 'jakoś', 'je', 'jeden', 'jedna', 'jedno',
	    'jednak', 'jednakże', 'jego', 'jej', 'jemu', 'jest', 'jestem', 'jeszcze',
	    'jeśli', 'jeżeli', 'już', 'ją', 'każdy', 'kiedy', 'kilka', 'kimś', 'kto',
	    'ktokolwiek', 'ktoś', 'która', 'które', 'którego', 'której', 'który',
	    'których', 'którym', 'którzy', 'ku', 'lat', 'lecz', 'lub', 'ma', 'mają',
	    'mało', 'mam', 'mi', 'mimo', 'między', 'mną', 'mnie', 'mogą', 'moi', 'moim',
	    'moja', 'moje', 'może', 'możliwe', 'można', 'mój', 'mu', 'musi', 'my', 'na',
	    'nad', 'nam', 'nami', 'nas', 'nasi', 'nasz', 'nasza', 'nasze', 'naszego',
	    'naszych', 'natomiast', 'natychmiast', 'nawet', 'nią', 'nic', 'nich', 'nie',
	    'niech', 'niego', 'niej', 'niemu', 'nigdy', 'nim', 'nimi', 'niż', 'no', 'o',
	    'obok', 'od', 'około', 'on', 'ona', 'one', 'oni', 'ono', 'oraz', 'oto',
	    'owszem', 'pan', 'pana', 'pani', 'po', 'pod', 'podczas', 'pomimo', 'ponad',
	    'ponieważ', 'powinien', 'powinna', 'powinni', 'powinno', 'poza', 'prawie',
	    'przecież', 'przed', 'przede', 'przedtem', 'przez', 'przy', 'roku',
	    'również', 'sam', 'sama', 'są', 'się', 'skąd', 'sobie', 'sobą', 'sposób',
	    'swoje', 'ta', 'tak', 'taka', 'taki', 'takie', 'także', 'tam', 'te', 'tego',
	    'tej', 'temu', 'ten', 'teraz', 'też', 'to', 'tobą', 'tobie', 'toteż',
	    'trzeba', 'tu', 'tutaj', 'twoi', 'twoim', 'twoja', 'twoje', 'twym', 'twój',
	    'ty', 'tych', 'tylko', 'tym', 'u', 'w', 'wam', 'wami', 'was', 'wasz', 'zaś',
	    'wasza', 'wasze', 'we', 'według', 'wiele', 'wielu', 'więc', 'więcej', 'tę',
	    'wszyscy', 'wszystkich', 'wszystkie', 'wszystkim', 'wszystko', 'wtedy',
	    'wy', 'właśnie', 'z', 'za', 'zapewne', 'zawsze', 'ze', 'zł', 'znowu',
	    'znów', 'został', 'żaden', 'żadna', 'żadne', 'żadnych', 'że', 'żeby',
	    '$', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];

	// tell the world about the noise words.
	exports.words = words;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2013, Paweł Łaskarzewski

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(13),
	    util = __webpack_require__(14);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);
	};

	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.withoutEmpty = function(array) {
		return array.filter(function(a) {return a;});
	};

	AggressiveTokenizer.prototype.clearText = function(text) {
		return text.replace(/[^a-zążśźęćńół0-9]/gi, ' ').replace(/[\s\n]+/g, ' ').trim();
	};

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.withoutEmpty(this.clearText(text).split(' '));
	};


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2012, Guillaume Marty

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * A very basic stemmer that performs the following steps:
	 * * Stem katakana.
	 * Inspired by:
	 * http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseKatakanaStemFilter.java
	 *
	 * This script assumes input is normalized using normalizer_ja().
	 *
	 * \@todo Use .bind() in StemmerJa.prototype.attach().
	 */

	var Tokenizer = __webpack_require__(54);
	var stopwords = __webpack_require__(57);



	/**
	 * @constructor
	 */
	var StemmerJa = function() {
	};


	/**
	 * Tokenize and stem a text.
	 * Stop words are excluded except if the second argument is true.
	 *
	 * @param {string} text
	 * @param {boolean} keepStops Whether to keep stop words from the output or not.
	 * @return {Array.<string>}
	 */
	StemmerJa.prototype.tokenizeAndStem = function(text, keepStops) {
	  var self = this;
	  var stemmedTokens = [];
	  var tokens = new Tokenizer().tokenize(text);

	  // This is probably faster than an if at each iteration.
	  if (keepStops) {
	    tokens.forEach(function(token) {
	      var resultToken = token.toLowerCase();
	      resultToken = self.stem(resultToken);
	      stemmedTokens.push(resultToken);
	    });
	  } else {
	    tokens.forEach(function(token) {
	      if (stopwords.indexOf(token) == -1) {
	        var resultToken = token.toLowerCase();
	        resultToken = self.stem(resultToken);
	        stemmedTokens.push(resultToken);
	      }
	    });
	  }

	  return stemmedTokens;
	};


	/**
	 * Stem a term.
	 *
	 * @param {string} token
	 * @return {string}
	 */
	StemmerJa.prototype.stem = function(token) {
	  token = this.stemKatakana(token);

	  return token;
	};


	/**
	 * Remove the final prolonged sound mark on katakana if length is superior to
	 * a threshold.
	 *
	 * @param {string} token A katakana string to stem.
	 * @return {string} A katakana string stemmed.
	 */
	StemmerJa.prototype.stemKatakana = function(token) {
	  var HIRAGANA_KATAKANA_PROLONGED_SOUND_MARK = 'ー';
	  var DEFAULT_MINIMUM_LENGTH = 4;

	  if (token.length >= DEFAULT_MINIMUM_LENGTH
	      && token.slice(-1) === HIRAGANA_KATAKANA_PROLONGED_SOUND_MARK
	      && this.isKatakana(token)) {
	    token = token.slice(0, token.length - 1);
	  }
	  return token;
	};


	/**
	 * Is a string made of fullwidth katakana only?
	 * This implementation is the fastest I know:
	 * http://jsperf.com/string-contain-katakana-only/2
	 *
	 * @param {string} str A string.
	 * @return {boolean} True if the string has katakana only.
	 */
	StemmerJa.prototype.isKatakana = function(str) {
	  return !!str.match(/^[゠-ヿ]+$/);
	};

	// Expose an attach function that will patch String with new methods.
	StemmerJa.prototype.attach = function() {
	  var self = this;

	  String.prototype.stem = function() {
	    return self.stem(this);
	  };

	  String.prototype.tokenizeAndStem = function(keepStops) {
	    return self.tokenizeAndStem(this, keepStops);
	  };
	};

	module.exports = StemmerJa;


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	// Original copyright:
	/*
	 Copyright (c) 2008, Taku Kudo

	 All rights reserved.

	 Redistribution and use in source and binary forms, with or without
	 modification, are permitted provided that the following conditions are met:

	 * Redistributions of source code must retain the above copyright notice,
	 this list of conditions and the following disclaimer.
	 * Redistributions in binary form must reproduce the above copyright
	 notice, this list of conditions and the following disclaimer in the
	 documentation and/or other materials provided with the distribution.
	 * Neither the name of the <ORGANIZATION> nor the names of its
	 contributors may be used to endorse or promote products derived from this
	 software without specific prior written permission.

	 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
	 CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
	 EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
	 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	// This version:
	/*
	 Copyright (c) 2012, Guillaume Marty

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	// TinySegmenter 0.1 -- Super compact Japanese tokenizer in Javascript
	// (c) 2008 Taku Kudo <taku@chasen.org>
	// TinySegmenter is freely distributable under the terms of a new BSD licence.
	// For details, see http://chasen.org/~taku/software/TinySegmenter/LICENCE.txt

	var Tokenizer = __webpack_require__(13),
	    normalize = __webpack_require__(55).normalize_ja,
	    util = __webpack_require__(14);



	/**
	 * @constructor
	 */
	var TokenizerJa = function() {
	  this.chartype_ = [
	    [/[〇一二三四五六七八九十百千万億兆]/, 'M'],
	    [/[一-鿌〆]/, 'H'],
	    [/[ぁ-ゟ]/, 'I'],
	    [/[゠-ヿ]/, 'K'],
	    [/[a-zA-Z]/, 'A'],
	    [/[0-9]/, 'N']
	  ];

	  this.BIAS__ = -332;
	  this.BC1__ = {'HH': 6, 'II': 2461, 'KH': 406, 'OH': -1378};
	  this.BC2__ = {'AA': -3267, 'AI': 2744, 'AN': -878, 'HH': -4070, 'HM': -1711, 'HN': 4012, 'HO': 3761, 'IA': 1327, 'IH': -1184, 'II': -1332, 'IK': 1721, 'IO': 5492, 'KI': 3831, 'KK': -8741, 'MH': -3132, 'MK': 3334, 'OO': -2920};
	  this.BC3__ = {'HH': 996, 'HI': 626, 'HK': -721, 'HN': -1307, 'HO': -836, 'IH': -301, 'KK': 2762, 'MK': 1079, 'MM': 4034, 'OA': -1652, 'OH': 266};
	  this.BP1__ = {'BB': 295, 'OB': 304, 'OO': -125, 'UB': 352};
	  this.BP2__ = {'BO': 60, 'OO': -1762};
	  this.BQ1__ = {'BHH': 1150, 'BHM': 1521, 'BII': -1158, 'BIM': 886, 'BMH': 1208, 'BNH': 449, 'BOH': -91, 'BOO': -2597, 'OHI': 451, 'OIH': -296, 'OKA': 1851, 'OKH': -1020, 'OKK': 904, 'OOO': 2965};
	  this.BQ2__ = {'BHH': 118, 'BHI': -1159, 'BHM': 466, 'BIH': -919, 'BKK': -1720, 'BKO': 864, 'OHH': -1139, 'OHM': -181, 'OIH': 153, 'UHI': -1146};
	  this.BQ3__ = {'BHH': -792, 'BHI': 2664, 'BII': -299, 'BKI': 419, 'BMH': 937, 'BMM': 8335, 'BNN': 998, 'BOH': 775, 'OHH': 2174, 'OHM': 439, 'OII': 280, 'OKH': 1798, 'OKI': -793, 'OKO': -2242, 'OMH': -2402, 'OOO': 11699};
	  this.BQ4__ = {'BHH': -3895, 'BIH': 3761, 'BII': -4654, 'BIK': 1348, 'BKK': -1806, 'BMI': -3385, 'BOO': -12396, 'OAH': 926, 'OHH': 266, 'OHK': -2036, 'ONN': -973};
	  this.BW1__ = {'，と': 660, '，同': 727, 'B1あ': 1404, 'B1同': 542, '、と': 660, '、同': 727, '｣と': 1682, 'あっ': 1505, 'いう': 1743, 'いっ': -2055, 'いる': 672, 'うし': -4817, 'うん': 665, 'から': 3472, 'がら': 600, 'こう': -790, 'こと': 2083, 'こん': -1262, 'さら': -4143, 'さん': 4573, 'した': 2641, 'して': 1104, 'すで': -3399, 'そこ': 1977, 'それ': -871, 'たち': 1122, 'ため': 601, 'った': 3463, 'つい': -802, 'てい': 805, 'てき': 1249, 'でき': 1127, 'です': 3445, 'では': 844, 'とい': -4915, 'とみ': 1922, 'どこ': 3887, 'ない': 5713, 'なっ': 3015, 'など': 7379, 'なん': -1113, 'にし': 2468, 'には': 1498, 'にも': 1671, 'に対': -912, 'の一': -501, 'の中': 741, 'ませ': 2448, 'まで': 1711, 'まま': 2600, 'まる': -2155, 'やむ': -1947, 'よっ': -2565, 'れた': 2369, 'れで': -913, 'をし': 1860, 'を見': 731, '亡く': -1886, '京都': 2558, '取り': -2784, '大き': -2604, '大阪': 1497, '平方': -2314, '引き': -1336, '日本': -195, '本当': -2423, '毎日': -2113, '目指': -724};
	  this.BW2__ = {'11': -669, '．．': -11822, '――': -5730, '−−': -13175, 'いう': -1609, 'うか': 2490, 'かし': -1350, 'かも': -602, 'から': -7194, 'かれ': 4612, 'がい': 853, 'がら': -3198, 'きた': 1941, 'くな': -1597, 'こと': -8392, 'この': -4193, 'させ': 4533, 'され': 13168, 'さん': -3977, 'しい': -1819, 'しか': -545, 'した': 5078, 'して': 972, 'しな': 939, 'その': -3744, 'たい': -1253, 'たた': -662, 'ただ': -3857, 'たち': -786, 'たと': 1224, 'たは': -939, 'った': 4589, 'って': 1647, 'っと': -2094, 'てい': 6144, 'てき': 3640, 'てく': 2551, 'ては': -3110, 'ても': -3065, 'でい': 2666, 'でき': -1528, 'でし': -3828, 'です': -4761, 'でも': -4203, 'とい': 1890, 'とこ': -1746, 'とと': -2279, 'との': 720, 'とみ': 5168, 'とも': -3941, 'ない': -2488, 'なが': -1313, 'など': -6509, 'なの': 2614, 'なん': 3099, 'にお': -1615, 'にし': 2748, 'にな': 2454, 'によ': -7236, 'に対': -14943, 'に従': -4688, 'に関': -11388, 'のか': 2093, 'ので': -7059, 'のに': -6041, 'のの': -6125, 'はい': 1073, 'はが': -1033, 'はず': -2532, 'ばれ': 1813, 'まし': -1316, 'まで': -6621, 'まれ': 5409, 'めて': -3153, 'もい': 2230, 'もの': -10713, 'らか': -944, 'らし': -1611, 'らに': -1897, 'りし': 651, 'りま': 1620, 'れた': 4270, 'れて': 849, 'れば': 4114, 'ろう': 6067, 'われ': 7901, 'を通': -11877, 'んだ': 728, 'んな': -4115, '一人': 602, '一方': -1375, '一日': 970, '一部': -1051, '上が': -4479, '会社': -1116, '出て': 2163, '分の': -7758, '同党': 970, '同日': -913, '大阪': -2471, '委員': -1250, '少な': -1050, '年度': -8669, '年間': -1626, '府県': -2363, '手権': -1982, '新聞': -4066, '日新': -722, '日本': -7068, '日米': 3372, '曜日': -601, '朝鮮': -2355, '本人': -2697, '東京': -1543, '然と': -1384, '社会': -1276, '立て': -990, '第に': -1612, '米国': -4268};
	  this.BW3__ = {'あた': -2194, 'あり': 719, 'ある': 3846, 'い．': -1185, 'い。': -1185, 'いい': 5308, 'いえ': 2079, 'いく': 3029, 'いた': 2056, 'いっ': 1883, 'いる': 5600, 'いわ': 1527, 'うち': 1117, 'うと': 4798, 'えと': 1454, 'か．': 2857, 'か。': 2857, 'かけ': -743, 'かっ': -4098, 'かに': -669, 'から': 6520, 'かり': -2670, 'が，': 1816, 'が、': 1816, 'がき': -4855, 'がけ': -1127, 'がっ': -913, 'がら': -4977, 'がり': -2064, 'きた': 1645, 'けど': 1374, 'こと': 7397, 'この': 1542, 'ころ': -2757, 'さい': -714, 'さを': 976, 'し，': 1557, 'し、': 1557, 'しい': -3714, 'した': 3562, 'して': 1449, 'しな': 2608, 'しま': 1200, 'す．': -1310, 'す。': -1310, 'する': 6521, 'ず，': 3426, 'ず、': 3426, 'ずに': 841, 'そう': 428, 'た．': 8875, 'た。': 8875, 'たい': -594, 'たの': 812, 'たり': -1183, 'たる': -853, 'だ．': 4098, 'だ。': 4098, 'だっ': 1004, 'った': -4748, 'って': 300, 'てい': 6240, 'てお': 855, 'ても': 302, 'です': 1437, 'でに': -1482, 'では': 2295, 'とう': -1387, 'とし': 2266, 'との': 541, 'とも': -3543, 'どう': 4664, 'ない': 1796, 'なく': -903, 'など': 2135, 'に，': -1021, 'に、': -1021, 'にし': 1771, 'にな': 1906, 'には': 2644, 'の，': -724, 'の、': -724, 'の子': -1000, 'は，': 1337, 'は、': 1337, 'べき': 2181, 'まし': 1113, 'ます': 6943, 'まっ': -1549, 'まで': 6154, 'まれ': -793, 'らし': 1479, 'られ': 6820, 'るる': 3818, 'れ，': 854, 'れ、': 854, 'れた': 1850, 'れて': 1375, 'れば': -3246, 'れる': 1091, 'われ': -605, 'んだ': 606, 'んで': 798, 'カ月': 990, '会議': 860, '入り': 1232, '大会': 2217, '始め': 1681, '市': 965, '新聞': -5055, '日，': 974, '日、': 974, '社会': 2024};
	  this.TC1__ = {'AAA': 1093, 'HHH': 1029, 'HHM': 580, 'HII': 998, 'HOH': -390, 'HOM': -331, 'IHI': 1169, 'IOH': -142, 'IOI': -1015, 'IOM': 467, 'MMH': 187, 'OOI': -1832};
	  this.TC2__ = {'HHO': 2088, 'HII': -1023, 'HMM': -1154, 'IHI': -1965, 'KKH': 703, 'OII': -2649};
	  this.TC3__ = {'AAA': -294, 'HHH': 346, 'HHI': -341, 'HII': -1088, 'HIK': 731, 'HOH': -1486, 'IHH': 128, 'IHI': -3041, 'IHO': -1935, 'IIH': -825, 'IIM': -1035, 'IOI': -542, 'KHH': -1216, 'KKA': 491, 'KKH': -1217, 'KOK': -1009, 'MHH': -2694, 'MHM': -457, 'MHO': 123, 'MMH': -471, 'NNH': -1689, 'NNO': 662, 'OHO': -3393};
	  this.TC4__ = {'HHH': -203, 'HHI': 1344, 'HHK': 365, 'HHM': -122, 'HHN': 182, 'HHO': 669, 'HIH': 804, 'HII': 679, 'HOH': 446, 'IHH': 695, 'IHO': -2324, 'IIH': 321, 'III': 1497, 'IIO': 656, 'IOO': 54, 'KAK': 4845, 'KKA': 3386, 'KKK': 3065, 'MHH': -405, 'MHI': 201, 'MMH': -241, 'MMM': 661, 'MOM': 841};
	  this.TQ1__ = {'BHHH': -227, 'BHHI': 316, 'BHIH': -132, 'BIHH': 60, 'BIII': 1595, 'BNHH': -744, 'BOHH': 225, 'BOOO': -908, 'OAKK': 482, 'OHHH': 281, 'OHIH': 249, 'OIHI': 200, 'OIIH': -68};
	  this.TQ2__ = {'BIHH': -1401, 'BIII': -1033, 'BKAK': -543, 'BOOO': -5591};
	  this.TQ3__ = {'BHHH': 478, 'BHHM': -1073, 'BHIH': 222, 'BHII': -504, 'BIIH': -116, 'BIII': -105, 'BMHI': -863, 'BMHM': -464, 'BOMH': 620, 'OHHH': 346, 'OHHI': 1729, 'OHII': 997, 'OHMH': 481, 'OIHH': 623, 'OIIH': 1344, 'OKAK': 2792, 'OKHH': 587, 'OKKA': 679, 'OOHH': 110, 'OOII': -685};
	  this.TQ4__ = {'BHHH': -721, 'BHHM': -3604, 'BHII': -966, 'BIIH': -607, 'BIII': -2181, 'OAAA': -2763, 'OAKK': 180, 'OHHH': -294, 'OHHI': 2446, 'OHHO': 480, 'OHIH': -1573, 'OIHH': 1935, 'OIHI': -493, 'OIIH': 626, 'OIII': -4007, 'OKAK': -8156};
	  this.TW1__ = {'につい': -4681, '東京都': 2026};
	  this.TW2__ = {'ある程': -2049, 'いった': -1256, 'ころが': -2434, 'しょう': 3873, 'その後': -4430, 'だって': -1049, 'ていた': 1833, 'として': -4657, 'ともに': -4517, 'もので': 1882, '一気に': -792, '初めて': -1512, '同時に': -8097, '大きな': -1255, '対して': -2721, '社会党': -3216};
	  this.TW3__ = {'いただ': -1734, 'してい': 1314, 'として': -4314, 'につい': -5483, 'にとっ': -5989, 'に当た': -6247, 'ので，': -727, 'ので、': -727, 'のもの': -600, 'れから': -3752, '十二月': -2287};
	  this.TW4__ = {'いう．': 8576, 'いう。': 8576, 'からな': -2348, 'してい': 2958, 'たが，': 1516, 'たが、': 1516, 'ている': 1538, 'という': 1349, 'ました': 5543, 'ません': 1097, 'ようと': -4258, 'よると': 5865};
	  this.UC1__ = {'A': 484, 'K': 93, 'M': 645, 'O': -505};
	  this.UC2__ = {'A': 819, 'H': 1059, 'I': 409, 'M': 3987, 'N': 5775, 'O': 646};
	  this.UC3__ = {'A': -1370, 'I': 2311};
	  this.UC4__ = {'A': -2643, 'H': 1809, 'I': -1032, 'K': -3450, 'M': 3565, 'N': 3876, 'O': 6646};
	  this.UC5__ = {'H': 313, 'I': -1238, 'K': -799, 'M': 539, 'O': -831};
	  this.UC6__ = {'H': -506, 'I': -253, 'K': 87, 'M': 247, 'O': -387};
	  this.UP1__ = {'O': -214};
	  this.UP2__ = {'B': 69, 'O': 935};
	  this.UP3__ = {'B': 189};
	  this.UQ1__ = {'BH': 21, 'BI': -12, 'BK': -99, 'BN': 142, 'BO': -56, 'OH': -95, 'OI': 477, 'OK': 410, 'OO': -2422};
	  this.UQ2__ = {'BH': 216, 'BI': 113, 'OK': 1759};
	  this.UQ3__ = {'BA': -479, 'BH': 42, 'BI': 1913, 'BK': -7198, 'BM': 3160, 'BN': 6427, 'BO': 14761, 'OI': -827, 'ON': -3212};
	  this.UW1__ = {'，': 156, '、': 156, '｢': -463, 'あ': -941, 'う': -127, 'が': -553, 'き': 121, 'こ': 505, 'で': -201, 'と': -547, 'ど': -123, 'に': -789, 'の': -185, 'は': -847, 'も': -466, 'や': -470, 'よ': 182, 'ら': -292, 'り': 208, 'れ': 169, 'を': -446, 'ん': -137, '・': -135, '主': -402, '京': -268, '区': -912, '午': 871, '国': -460, '大': 561, '委': 729, '市': -411, '日': -141, '理': 361, '生': -408, '県': -386, '都': -718};
	  this.UW2__ = {'，': -829, '、': -829, '〇': 892, '｢': -645, '｣': 3145, 'あ': -538, 'い': 505, 'う': 134, 'お': -502, 'か': 1454, 'が': -856, 'く': -412, 'こ': 1141, 'さ': 878, 'ざ': 540, 'し': 1529, 'す': -675, 'せ': 300, 'そ': -1011, 'た': 188, 'だ': 1837, 'つ': -949, 'て': -291, 'で': -268, 'と': -981, 'ど': 1273, 'な': 1063, 'に': -1764, 'の': 130, 'は': -409, 'ひ': -1273, 'べ': 1261, 'ま': 600, 'も': -1263, 'や': -402, 'よ': 1639, 'り': -579, 'る': -694, 'れ': 571, 'を': -2516, 'ん': 2095, 'ア': -587, 'カ': 306, 'キ': 568, 'ッ': 831, '三': -758, '不': -2150, '世': -302, '中': -968, '主': -861, '事': 492, '人': -123, '会': 978, '保': 362, '入': 548, '初': -3025, '副': -1566, '北': -3414, '区': -422, '大': -1769, '天': -865, '太': -483, '子': -1519, '学': 760, '実': 1023, '小': -2009, '市': -813, '年': -1060, '強': 1067, '手': -1519, '揺': -1033, '政': 1522, '文': -1355, '新': -1682, '日': -1815, '明': -1462, '最': -630, '朝': -1843, '本': -1650, '東': -931, '果': -665, '次': -2378, '民': -180, '気': -1740, '理': 752, '発': 529, '目': -1584, '相': -242, '県': -1165, '立': -763, '第': 810, '米': 509, '自': -1353, '行': 838, '西': -744, '見': -3874, '調': 1010, '議': 1198, '込': 3041, '開': 1758, '間': -1257};
	  this.UW3__ = {'1': -800, '，': 4889, '−': -1723, '、': 4889, '々': -2311, '〇': 5827, '｣': 2670, '〓': -3573, 'あ': -2696, 'い': 1006, 'う': 2342, 'え': 1983, 'お': -4864, 'か': -1163, 'が': 3271, 'く': 1004, 'け': 388, 'げ': 401, 'こ': -3552, 'ご': -3116, 'さ': -1058, 'し': -395, 'す': 584, 'せ': 3685, 'そ': -5228, 'た': 842, 'ち': -521, 'っ': -1444, 'つ': -1081, 'て': 6167, 'で': 2318, 'と': 1691, 'ど': -899, 'な': -2788, 'に': 2745, 'の': 4056, 'は': 4555, 'ひ': -2171, 'ふ': -1798, 'へ': 1199, 'ほ': -5516, 'ま': -4384, 'み': -120, 'め': 1205, 'も': 2323, 'や': -788, 'よ': -202, 'ら': 727, 'り': 649, 'る': 5905, 'れ': 2773, 'わ': -1207, 'を': 6620, 'ん': -518, 'ア': 551, 'グ': 1319, 'ス': 874, 'ッ': -1350, 'ト': 521, 'ム': 1109, 'ル': 1591, 'ロ': 2201, 'ン': 278, '・': -3794, '一': -1619, '下': -1759, '世': -2087, '両': 3815, '中': 653, '主': -758, '予': -1193, '二': 974, '人': 2742, '今': 792, '他': 1889, '以': -1368, '低': 811, '何': 4265, '作': -361, '保': -2439, '元': 4858, '党': 3593, '全': 1574, '公': -3030, '六': 755, '共': -1880, '円': 5807, '再': 3095, '分': 457, '初': 2475, '別': 1129, '前': 2286, '副': 4437, '力': 365, '動': -949, '務': -1872, '化': 1327, '北': -1038, '区': 4646, '千': -2309, '午': -783, '協': -1006, '口': 483, '右': 1233, '各': 3588, '合': -241, '同': 3906, '和': -837, '員': 4513, '国': 642, '型': 1389, '場': 1219, '外': -241, '妻': 2016, '学': -1356, '安': -423, '実': -1008, '家': 1078, '小': -513, '少': -3102, '州': 1155, '市': 3197, '平': -1804, '年': 2416, '広': -1030, '府': 1605, '度': 1452, '建': -2352, '当': -3885, '得': 1905, '思': -1291, '性': 1822, '戸': -488, '指': -3973, '政': -2013, '教': -1479, '数': 3222, '文': -1489, '新': 1764, '日': 2099, '旧': 5792, '昨': -661, '時': -1248, '曜': -951, '最': -937, '月': 4125, '期': 360, '李': 3094, '村': 364, '東': -805, '核': 5156, '森': 2438, '業': 484, '氏': 2613, '民': -1694, '決': -1073, '法': 1868, '海': -495, '無': 979, '物': 461, '特': -3850, '生': -273, '用': 914, '町': 1215, '的': 7313, '直': -1835, '省': 792, '県': 6293, '知': -1528, '私': 4231, '税': 401, '立': -960, '第': 1201, '米': 7767, '系': 3066, '約': 3663, '級': 1384, '統': -4229, '総': 1163, '線': 1255, '者': 6457, '能': 725, '自': -2869, '英': 785, '見': 1044, '調': -562, '財': -733, '費': 1777, '車': 1835, '軍': 1375, '込': -1504, '通': -1136, '選': -681, '郎': 1026, '郡': 4404, '部': 1200, '金': 2163, '長': 421, '開': -1432, '間': 1302, '関': -1282, '雨': 2009, '電': -1045, '非': 2066, '駅': 1620};
	  this.UW4__ = {'，': 3930, '．': 3508, '―': -4841, '、': 3930, '。': 3508, '〇': 4999, '｢': 1895, '｣': 3798, '〓': -5156, 'あ': 4752, 'い': -3435, 'う': -640, 'え': -2514, 'お': 2405, 'か': 530, 'が': 6006, 'き': -4482, 'ぎ': -3821, 'く': -3788, 'け': -4376, 'げ': -4734, 'こ': 2255, 'ご': 1979, 'さ': 2864, 'し': -843, 'じ': -2506, 'す': -731, 'ず': 1251, 'せ': 181, 'そ': 4091, 'た': 5034, 'だ': 5408, 'ち': -3654, 'っ': -5882, 'つ': -1659, 'て': 3994, 'で': 7410, 'と': 4547, 'な': 5433, 'に': 6499, 'ぬ': 1853, 'ね': 1413, 'の': 7396, 'は': 8578, 'ば': 1940, 'ひ': 4249, 'び': -4134, 'ふ': 1345, 'へ': 6665, 'べ': -744, 'ほ': 1464, 'ま': 1051, 'み': -2082, 'む': -882, 'め': -5046, 'も': 4169, 'ゃ': -2666, 'や': 2795, 'ょ': -1544, 'よ': 3351, 'ら': -2922, 'り': -9726, 'る': -14896, 'れ': -2613, 'ろ': -4570, 'わ': -1783, 'を': 13150, 'ん': -2352, 'カ': 2145, 'コ': 1789, 'セ': 1287, 'ッ': -724, 'ト': -403, 'メ': -1635, 'ラ': -881, 'リ': -541, 'ル': -856, 'ン': -3637, '・': -4371, 'ー': -11870, '一': -2069, '中': 2210, '予': 782, '事': -190, '井': -1768, '人': 1036, '以': 544, '会': 950, '体': -1286, '作': 530, '側': 4292, '先': 601, '党': -2006, '共': -1212, '内': 584, '円': 788, '初': 1347, '前': 1623, '副': 3879, '力': -302, '動': -740, '務': -2715, '化': 776, '区': 4517, '協': 1013, '参': 1555, '合': -1834, '和': -681, '員': -910, '器': -851, '回': 1500, '国': -619, '園': -1200, '地': 866, '場': -1410, '塁': -2094, '士': -1413, '多': 1067, '大': 571, '子': -4802, '学': -1397, '定': -1057, '寺': -809, '小': 1910, '屋': -1328, '山': -1500, '島': -2056, '川': -2667, '市': 2771, '年': 374, '庁': -4556, '後': 456, '性': 553, '感': 916, '所': -1566, '支': 856, '改': 787, '政': 2182, '教': 704, '文': 522, '方': -856, '日': 1798, '時': 1829, '最': 845, '月': -9066, '木': -485, '来': -442, '校': -360, '業': -1043, '氏': 5388, '民': -2716, '気': -910, '沢': -939, '済': -543, '物': -735, '率': 672, '球': -1267, '生': -1286, '産': -1101, '田': -2900, '町': 1826, '的': 2586, '目': 922, '省': -3485, '県': 2997, '空': -867, '立': -2112, '第': 788, '米': 2937, '系': 786, '約': 2171, '経': 1146, '統': -1169, '総': 940, '線': -994, '署': 749, '者': 2145, '能': -730, '般': -852, '行': -792, '規': 792, '警': -1184, '議': -244, '谷': -1000, '賞': 730, '車': -1481, '軍': 1158, '輪': -1433, '込': -3370, '近': 929, '道': -1291, '選': 2596, '郎': -4866, '都': 1192, '野': -1100, '銀': -2213, '長': 357, '間': -2344, '院': -2297, '際': -2604, '電': -878, '領': -1659, '題': -792, '館': -1984, '首': 1749, '高': 2120};
	  this.UW5__ = {'1': -514, '，': 465, '．': -299, 'E2': -32768, '］': -2762, '、': 465, '。': -299, '｢': 363, 'あ': 1655, 'い': 331, 'う': -503, 'え': 1199, 'お': 527, 'か': 647, 'が': -421, 'き': 1624, 'ぎ': 1971, 'く': 312, 'げ': -983, 'さ': -1537, 'し': -1371, 'す': -852, 'だ': -1186, 'ち': 1093, 'っ': 52, 'つ': 921, 'て': -18, 'で': -850, 'と': -127, 'ど': 1682, 'な': -787, 'に': -1224, 'の': -635, 'は': -578, 'べ': 1001, 'み': 502, 'め': 865, 'ゃ': 3350, 'ょ': 854, 'り': -208, 'る': 429, 'れ': 504, 'わ': 419, 'を': -1264, 'ん': 327, 'イ': 241, 'ル': 451, 'ン': -343, '中': -871, '京': 722, '会': -1153, '党': -654, '務': 3519, '区': -901, '告': 848, '員': 2104, '大': -1296, '学': -548, '定': 1785, '嵐': -1304, '市': -2991, '席': 921, '年': 1763, '思': 872, '所': -814, '挙': 1618, '新': -1682, '日': 218, '月': -4353, '査': 932, '格': 1356, '機': -1508, '氏': -1347, '田': 240, '町': -3912, '的': -3149, '相': 1319, '省': -1052, '県': -4003, '研': -997, '社': -278, '空': -813, '統': 1955, '者': -2233, '表': 663, '語': -1073, '議': 1219, '選': -1018, '郎': -368, '長': 786, '間': 1191, '題': 2368, '館': -689};
	  this.UW6__ = {'1': -270, '，': 227, '．': 808, 'E1': 306, '、': 227, '。': 808, 'あ': -307, 'う': 189, 'か': 241, 'が': -73, 'く': -121, 'こ': -200, 'じ': 1782, 'す': 383, 'た': -428, 'っ': 573, 'て': -1014, 'で': 101, 'と': -105, 'な': -253, 'に': -149, 'の': -417, 'は': -236, 'も': -206, 'り': 187, 'る': -135, 'を': 195, 'ル': -673, 'ン': -496, '一': -277, '中': 201, '件': -800, '会': 624, '前': 302, '区': 1792, '員': -1212, '委': 798, '学': -960, '市': 887, '広': -695, '後': 535, '業': -697, '相': 753, '社': -507, '福': 974, '空': -822, '者': 1811, '連': 463, '郎': 1082};

	  return this;
	};

	util.inherits(TokenizerJa, Tokenizer);


	/**
	 * @param {string} str
	 * @return {string}
	 * @private
	 */
	TokenizerJa.prototype.ctype_ = function(str) {
	  for (var i = 0, length = this.chartype_.length; i < length; i++) {
	    if (str.match(this.chartype_[i][0])) {
	      return this.chartype_[i][1];
	    }
	  }
	  return 'O';
	};


	/**
	 * @param {string} v
	 * @return {number}
	 * @private
	 */
	TokenizerJa.prototype.ts_ = function(v) {
	  if (v) { return v; }
	  return 0;
	};


	/**
	 * Remove punctuations signs from tokens.
	 *
	 * @param {Array.<string>} tokens An array of tokens.
	 * @return {Array.<string>} An array of tokens.
	 * @private
	 */
	TokenizerJa.prototype.removePuncTokens = function(tokens) {
	  return tokens
	      .map(function(token) {
	        return token.replace(/[＿－・，、；：！？．。（）［］｛｝｢｣＠＊＼／＆＃％｀＾＋＜＝＞｜～≪≫─＄＂_\-･,､;:!?.｡()[\]{}「」@*\/&#%`^+<=>|~«»$"\s]+/g, '');
	      })
	      .filter(function(token) {
	        return token != '';
	      });
	};


	/**
	 * @param {string} text
	 * @return {Array.<string>}
	 */
	TokenizerJa.prototype.tokenize = function(text) {
	  if (text == null || text == undefined || text == '') {
	    return [];
	  }
	  text = normalize(text);
	  var result = [];
	  var seg = ['B3', 'B2', 'B1'];
	  var ctype = ['O', 'O', 'O'];
	  var o = text.split('');
	  var i;
	  var length;
	  for (i = 0, length = o.length; i < length; ++i) {
	    seg.push(o[i]);
	    ctype.push(this.ctype_(o[i]));
	  }
	  seg.push('E1');
	  seg.push('E2');
	  seg.push('E3');
	  ctype.push('O');
	  ctype.push('O');
	  ctype.push('O');
	  var word = seg[3];
	  var p1 = 'U';
	  var p2 = 'U';
	  var p3 = 'U';
	  for (i = 4, length = seg.length - 3; i < length; ++i) {
	    var score = this.BIAS__;
	    var w1 = seg[i - 3];
	    var w2 = seg[i - 2];
	    var w3 = seg[i - 1];
	    var w4 = seg[i];
	    var w5 = seg[i + 1];
	    var w6 = seg[i + 2];
	    var c1 = ctype[i - 3];
	    var c2 = ctype[i - 2];
	    var c3 = ctype[i - 1];
	    var c4 = ctype[i];
	    var c5 = ctype[i + 1];
	    var c6 = ctype[i + 2];
	    score += this.ts_(this.UP1__[p1]);
	    score += this.ts_(this.UP2__[p2]);
	    score += this.ts_(this.UP3__[p3]);
	    score += this.ts_(this.BP1__[p1 + p2]);
	    score += this.ts_(this.BP2__[p2 + p3]);
	    score += this.ts_(this.UW1__[w1]);
	    score += this.ts_(this.UW2__[w2]);
	    score += this.ts_(this.UW3__[w3]);
	    score += this.ts_(this.UW4__[w4]);
	    score += this.ts_(this.UW5__[w5]);
	    score += this.ts_(this.UW6__[w6]);
	    score += this.ts_(this.BW1__[w2 + w3]);
	    score += this.ts_(this.BW2__[w3 + w4]);
	    score += this.ts_(this.BW3__[w4 + w5]);
	    score += this.ts_(this.TW1__[w1 + w2 + w3]);
	    score += this.ts_(this.TW2__[w2 + w3 + w4]);
	    score += this.ts_(this.TW3__[w3 + w4 + w5]);
	    score += this.ts_(this.TW4__[w4 + w5 + w6]);
	    score += this.ts_(this.UC1__[c1]);
	    score += this.ts_(this.UC2__[c2]);
	    score += this.ts_(this.UC3__[c3]);
	    score += this.ts_(this.UC4__[c4]);
	    score += this.ts_(this.UC5__[c5]);
	    score += this.ts_(this.UC6__[c6]);
	    score += this.ts_(this.BC1__[c2 + c3]);
	    score += this.ts_(this.BC2__[c3 + c4]);
	    score += this.ts_(this.BC3__[c4 + c5]);
	    score += this.ts_(this.TC1__[c1 + c2 + c3]);
	    score += this.ts_(this.TC2__[c2 + c3 + c4]);
	    score += this.ts_(this.TC3__[c3 + c4 + c5]);
	    score += this.ts_(this.TC4__[c4 + c5 + c6]);
	    //score += this.ts_(this.TC5__[c4 + c5 + c6]);
	    score += this.ts_(this.UQ1__[p1 + c1]);
	    score += this.ts_(this.UQ2__[p2 + c2]);
	    score += this.ts_(this.UQ3__[p3 + c3]);
	    score += this.ts_(this.BQ1__[p2 + c2 + c3]);
	    score += this.ts_(this.BQ2__[p2 + c3 + c4]);
	    score += this.ts_(this.BQ3__[p3 + c2 + c3]);
	    score += this.ts_(this.BQ4__[p3 + c3 + c4]);
	    score += this.ts_(this.TQ1__[p2 + c1 + c2 + c3]);
	    score += this.ts_(this.TQ2__[p2 + c2 + c3 + c4]);
	    score += this.ts_(this.TQ3__[p3 + c1 + c2 + c3]);
	    score += this.ts_(this.TQ4__[p3 + c2 + c3 + c4]);
	    var p = 'O';
	    if (score > 0) {
	      result.push(word);
	      word = '';
	      p = 'B';
	    }
	    p1 = p2;
	    p2 = p3;
	    p3 = p;
	    word += seg[i];
	  }
	  result.push(word);

	  result = this.removePuncTokens(result);

	  return result;
	};

	module.exports = TokenizerJa;


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2012, Guillaume Marty

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * Normalize Japanese inputs and expose function to perform several conversions.
	 *
	 * Note: The space character is treated like a roman character as it usually
	 *   has the same width as them in Japanese texts.
	 *
	 * \@todo Replace characters range from ㈠ to ㉃, ㊀ to ㊰ and ㇰ to ㇿ.
	 * \@todo Lazy initializations of conversionTables and converters.
	 * \@todo Would fixHalfwidthKana be useful?
	 *
	 * Descriptions of functions exposed:
	 * normalizeJapanese 「全角」英字・数字を「半角」、「半角」記・カタカナを「全角」に変換
	 * converters.fullwidthToHalfwidth.alphabet    「全角」英字を「半角」に変換
	 * converters.halfwidthToFullwidth.alphabet    「半角」英字を「全角」に変換
	 * converters.fullwidthToHalfwidth.numbers     「全角」数字を「半角」に変換
	 * converters.halfwidthToFullwidth.numbers     「半角」数字を「全角」に変換 「全角」スペースを「半角」
	 * converters.fullwidthToHalfwidth.punctuation 「全角」記号を「半角」に変換 「半角」スペースを「全角」
	 * converters.halfwidthToFullwidth.punctuation 「半角」記号を「全角」に変換
	 * converters.fullwidthToHalfwidth.katakana    「全角カタカナ」を「半角カタカナ」に変換
	 * converters.halfwidthToFullwidth.katakana    「半角カタカナ」を「全角カタカナ」に変換
	 * converters.hiraganaToKatakana               「カタカナ」を「ひらがな」に変換
	 * converters.katakanaToHiragana               「ひらがな」を「カタカナ」に変換
	 */

	var flip = __webpack_require__(56).flip;
	var merge = __webpack_require__(56).merge;
	var replacer = __webpack_require__(56).replacer;

	// From http://fernweh.jp/b/mb_convert_kana_js/
	var conversionTables = {
	  fullwidthToHalfwidth: {
	    alphabet: {
	      'ａ': 'a',
	      'ｂ': 'b',
	      'ｃ': 'c',
	      'ｄ': 'd',
	      'ｅ': 'e',
	      'ｆ': 'f',
	      'ｇ': 'g',
	      'ｈ': 'h',
	      'ｉ': 'i',
	      'ｊ': 'j',
	      'ｋ': 'k',
	      'ｌ': 'l',
	      'ｍ': 'm',
	      'ｎ': 'n',
	      'ｏ': 'o',
	      'ｐ': 'p',
	      'ｑ': 'q',
	      'ｒ': 'r',
	      'ｓ': 's',
	      'ｔ': 't',
	      'ｕ': 'u',
	      'ｖ': 'v',
	      'ｗ': 'w',
	      'ｘ': 'x',
	      'ｙ': 'y',
	      'ｚ': 'z',
	      'Ａ': 'A',
	      'Ｂ': 'B',
	      'Ｃ': 'C',
	      'Ｄ': 'D',
	      'Ｅ': 'E',
	      'Ｆ': 'F',
	      'Ｇ': 'G',
	      'Ｈ': 'H',
	      'Ｉ': 'I',
	      'Ｊ': 'J',
	      'Ｋ': 'K',
	      'Ｌ': 'L',
	      'Ｍ': 'M',
	      'Ｎ': 'N',
	      'Ｏ': 'O',
	      'Ｐ': 'P',
	      'Ｑ': 'Q',
	      'Ｒ': 'R',
	      'Ｓ': 'S',
	      'Ｔ': 'T',
	      'Ｕ': 'U',
	      'Ｖ': 'V',
	      'Ｗ': 'W',
	      'Ｘ': 'X',
	      'Ｙ': 'Y',
	      'Ｚ': 'Z',
	      '　': ' ' // Fullwidth space
	    },

	    numbers: {
	      '０': '0',
	      '１': '1',
	      '２': '2',
	      '３': '3',
	      '４': '4',
	      '５': '5',
	      '６': '6',
	      '７': '7',
	      '８': '8',
	      '９': '9'
	    },

	    symbol: {
	      '＿': '_',
	      '－': '-',
	      '，': ',',
	      '；': ';',
	      '：': ':',
	      '！': '!',
	      '？': '?',
	      '．': '.',
	      '（': '(',
	      '）': ')',
	      '［': '[',
	      '］': ']',
	      '｛': '{',
	      '｝': '}',
	      '＠': '@',
	      '＊': '*',
	      '＼': '\\',
	      '／': '/',
	      '＆': '&',
	      '＃': '#',
	      '％': '%',
	      '｀': '`',
	      '＾': '^',
	      '＋': '+',
	      '＜': '<',
	      '＝': '=',
	      '＞': '>',
	      '｜': '|',
	      // Never converted: '～': '~',
	      '≪': '«',
	      '≫': '»',
	      '─': '-',
	      '＄': '$',
	      '＂': '"'
	    },

	    purePunctuation: {
	      '、': '､',
	      '。': '｡',
	      '・': '･',
	      '「': '｢',
	      '」': '｣'
	    },

	    punctuation: {},

	    katakana: {
	      '゛': 'ﾞ',
	      '゜': 'ﾟ',
	      'ー': 'ｰ',

	      'ヴ': 'ｳﾞ',
	      'ガ': 'ｶﾞ',
	      'ギ': 'ｷﾞ',
	      'グ': 'ｸﾞ',
	      'ゲ': 'ｹﾞ',
	      'ゴ': 'ｺﾞ',
	      'ザ': 'ｻﾞ',
	      'ジ': 'ｼﾞ',
	      'ズ': 'ｽﾞ',
	      'ゼ': 'ｾﾞ',
	      'ゾ': 'ｿﾞ',
	      'ダ': 'ﾀﾞ',
	      'ヂ': 'ﾁﾞ',
	      'ヅ': 'ﾂﾞ',
	      'デ': 'ﾃﾞ',
	      'ド': 'ﾄﾞ',
	      'バ': 'ﾊﾞ',
	      'パ': 'ﾊﾟ',
	      'ビ': 'ﾋﾞ',
	      'ピ': 'ﾋﾟ',
	      'ブ': 'ﾌﾞ',
	      'プ': 'ﾌﾟ',
	      'ベ': 'ﾍﾞ',
	      'ペ': 'ﾍﾟ',
	      'ボ': 'ﾎﾞ',
	      'ポ': 'ﾎﾟ',

	      'ァ': 'ｧ',
	      'ア': 'ｱ',
	      'ィ': 'ｨ',
	      'イ': 'ｲ',
	      'ゥ': 'ｩ',
	      'ウ': 'ｳ',
	      'ェ': 'ｪ',
	      'エ': 'ｴ',
	      'ォ': 'ｫ',
	      'オ': 'ｵ',
	      'カ': 'ｶ',
	      'キ': 'ｷ',
	      'ク': 'ｸ',
	      'ケ': 'ｹ',
	      'コ': 'ｺ',
	      'サ': 'ｻ',
	      'シ': 'ｼ',
	      'ス': 'ｽ',
	      'セ': 'ｾ',
	      'ソ': 'ｿ',
	      'タ': 'ﾀ',
	      'チ': 'ﾁ',
	      'ッ': 'ｯ',
	      'ツ': 'ﾂ',
	      'テ': 'ﾃ',
	      'ト': 'ﾄ',
	      'ナ': 'ﾅ',
	      'ニ': 'ﾆ',
	      'ヌ': 'ﾇ',
	      'ネ': 'ﾈ',
	      'ノ': 'ﾉ',
	      'ハ': 'ﾊ',
	      'ヒ': 'ﾋ',
	      'フ': 'ﾌ',
	      'ヘ': 'ﾍ',
	      'ホ': 'ﾎ',
	      'マ': 'ﾏ',
	      'ミ': 'ﾐ',
	      'ム': 'ﾑ',
	      'メ': 'ﾒ',
	      'モ': 'ﾓ',
	      'ャ': 'ｬ',
	      'ヤ': 'ﾔ',
	      'ュ': 'ｭ',
	      'ユ': 'ﾕ',
	      'ョ': 'ｮ',
	      'ヨ': 'ﾖ',
	      'ラ': 'ﾗ',
	      'リ': 'ﾘ',
	      'ル': 'ﾙ',
	      'レ': 'ﾚ',
	      'ロ': 'ﾛ',
	      'ワ': 'ﾜ',
	      'ヲ': 'ｦ',
	      'ン': 'ﾝ'
	    }
	  },

	  halfwidthToFullwidth: {}
	};

	var fixFullwidthKana = {
	  'ゝ゛': 'ゞ',
	  'ヽ゛': 'ヾ',

	  'う゛': 'ゔ',
	  'か゛': 'が',
	  'き゛': 'ぎ',
	  'く゛': 'ぐ',
	  'け゛': 'げ',
	  'こ゛': 'ご',
	  'さ゛': 'ざ',
	  'し゛': 'じ',
	  'す゛': 'ず',
	  'せ゛': 'ぜ',
	  'そ゛': 'ぞ',
	  'た゛': 'だ',
	  'ち゛': 'ぢ',
	  'つ゛': 'づ',
	  'て゛': 'で',
	  'と゛': 'ど',
	  'は゛': 'ば',
	  'は゜': 'ぱ',
	  'ひ゛': 'び',
	  'ひ゜': 'ぴ',
	  'ふ゛': 'ぶ',
	  'ふ゜': 'ぷ',
	  'へ゛': 'べ',
	  'へ゜': 'ぺ',
	  'ほ゛': 'ぼ',
	  'ほ゜': 'ぽ',
	  'っな': 'んな',
	  'っに': 'んに',
	  'っぬ': 'んぬ',
	  'っね': 'んね',
	  'っの': 'んの',

	  'ウ゛': 'ヴ',
	  'カ゛': 'ガ',
	  'キ゛': 'ギ',
	  'ク゛': 'グ',
	  'ケ゛': 'ゲ',
	  'コ゛': 'ゴ',
	  'サ゛': 'ザ',
	  'シ゛': 'ジ',
	  'ス゛': 'ズ',
	  'セ゛': 'ゼ',
	  'ソ゛': 'ゾ',
	  'タ゛': 'ダ',
	  'チ゛': 'ヂ',
	  'ツ゛': 'ヅ',
	  'テ゛': 'デ',
	  'ト゛': 'ド',
	  'ハ゛': 'バ',
	  'ハ゜': 'パ',
	  'ヒ゛': 'ビ',
	  'ヒ゜': 'ピ',
	  'フ゛': 'ブ',
	  'フ゜': 'プ',
	  'ヘ゛': 'ベ',
	  'ヘ゜': 'ペ',
	  'ホ゛': 'ボ',
	  'ホ゜': 'ポ',
	  'ッナ': 'ンナ',
	  'ッニ': 'ンニ',
	  'ッヌ': 'ンヌ',
	  'ッネ': 'ンネ',
	  'ッノ': 'ンノ'
	};

	var fixCompositeSymbolsTable = {
	  '㋀': '1月',
	  '㋁': '2月',
	  '㋂': '3月',
	  '㋃': '4月',
	  '㋄': '5月',
	  '㋅': '6月',
	  '㋆': '7月',
	  '㋇': '8月',
	  '㋈': '9月',
	  '㋉': '10月',
	  '㋊': '11月',
	  '㋋': '12月',

	  '㏠': '1日',
	  '㏡': '2日',
	  '㏢': '3日',
	  '㏣': '4日',
	  '㏤': '5日',
	  '㏥': '6日',
	  '㏦': '7日',
	  '㏧': '8日',
	  '㏨': '9日',
	  '㏩': '10日',
	  '㏪': '11日',
	  '㏫': '12日',
	  '㏬': '13日',
	  '㏭': '14日',
	  '㏮': '15日',
	  '㏯': '16日',
	  '㏰': '17日',
	  '㏱': '18日',
	  '㏲': '19日',
	  '㏳': '20日',
	  '㏴': '21日',
	  '㏵': '22日',
	  '㏶': '23日',
	  '㏷': '24日',
	  '㏸': '25日',
	  '㏹': '26日',
	  '㏺': '27日',
	  '㏻': '28日',
	  '㏼': '29日',
	  '㏽': '30日',
	  '㏾': '31日',

	  '㍘': '0点',
	  '㍙': '1点',
	  '㍚': '2点',
	  '㍛': '3点',
	  '㍜': '4点',
	  '㍝': '5点',
	  '㍞': '6点',
	  '㍟': '7点',
	  '㍠': '8点',
	  '㍡': '9点',
	  '㍢': '10点',
	  '㍣': '11点',
	  '㍤': '12点',
	  '㍥': '13点',
	  '㍦': '14点',
	  '㍧': '15点',
	  '㍨': '16点',
	  '㍩': '17点',
	  '㍪': '18点',
	  '㍫': '19点',
	  '㍬': '20点',
	  '㍭': '21点',
	  '㍮': '22点',
	  '㍯': '23点',
	  '㍰': '24点',

	  '㍻': '平成',
	  '㍼': '昭和',
	  '㍽': '大正',
	  '㍾': '明治',
	  '㍿': '株式会社',

	  '㌀': 'アパート',
	  '㌁': 'アルファ',
	  '㌂': 'アンペア',
	  '㌃': 'アール',
	  '㌄': 'イニング',
	  '㌅': 'インチ',
	  '㌆': 'ウオン',
	  '㌇': 'エスクード',
	  '㌈': 'エーカー',
	  '㌉': 'オンス',
	  '㌊': 'オーム',
	  '㌋': 'カイリ', //海里
	  '㌌': 'カラット',
	  '㌍': 'カロリー',
	  '㌎': 'ガロン',
	  '㌏': 'ガンマ',
	  '㌐': 'ギガ',
	  '㌑': 'ギニー',
	  '㌒': 'キュリー',
	  '㌓': 'ギルダー',
	  '㌔': 'キロ',
	  '㌕': 'キログラム',
	  '㌖': 'キロメートル',
	  '㌗': 'キロワット',
	  '㌘': 'グラム',
	  '㌙': 'グラムトン',
	  '㌚': 'クルゼイロ',
	  '㌛': 'クローネ',
	  '㌜': 'ケース',
	  '㌝': 'コルナ',
	  '㌞': 'コーポ',
	  '㌟': 'サイクル',
	  '㌠': 'サンチーム',
	  '㌡': 'シリング',
	  '㌢': 'センチ',
	  '㌣': 'セント',
	  '㌤': 'ダース',
	  '㌥': 'デシ',
	  '㌦': 'ドル',
	  '㌧': 'トン',
	  '㌨': 'ナノ',
	  '㌩': 'ノット',
	  '㌪': 'ハイツ',
	  '㌫': 'パーセント',
	  '㌬': 'パーツ',
	  '㌭': 'バーレル',
	  '㌮': 'ピアストル',
	  '㌯': 'ピクル',
	  '㌰': 'ピコ',
	  '㌱': 'ビル',
	  '㌲': 'ファラッド',
	  '㌳': 'フィート',
	  '㌴': 'ブッシェル',
	  '㌵': 'フラン',
	  '㌶': 'ヘクタール',
	  '㌷': 'ペソ',
	  '㌸': 'ペニヒ',
	  '㌹': 'ヘルツ',
	  '㌺': 'ペンス',
	  '㌻': 'ページ',
	  '㌼': 'ベータ',
	  '㌽': 'ポイント',
	  '㌾': 'ボルト',
	  '㌿': 'ホン',
	  '㍀': 'ポンド',
	  '㍁': 'ホール',
	  '㍂': 'ホーン',
	  '㍃': 'マイクロ',
	  '㍄': 'マイル',
	  '㍅': 'マッハ',
	  '㍆': 'マルク',
	  '㍇': 'マンション',
	  '㍈': 'ミクロン',
	  '㍉': 'ミリ',
	  '㍊': 'ミリバール',
	  '㍋': 'メガ',
	  '㍌': 'メガトン',
	  '㍍': 'メートル',
	  '㍎': 'ヤード',
	  '㍏': 'ヤール',
	  '㍐': 'ユアン',
	  '㍑': 'リットル',
	  '㍒': 'リラ',
	  '㍓': 'ルピー',
	  '㍔': 'ルーブル',
	  '㍕': 'レム',
	  '㍖': 'レントゲン',
	  '㍗': 'ワット'
	};

	// punctuation is pure_punctuation
	conversionTables.fullwidthToHalfwidth.punctuation = merge(
	    conversionTables.fullwidthToHalfwidth.symbol,
	    conversionTables.fullwidthToHalfwidth.purePunctuation
	)

	// Fill in the conversion tables with the flipped tables.
	conversionTables.halfwidthToFullwidth.alphabet = flip(conversionTables.fullwidthToHalfwidth.alphabet);
	conversionTables.halfwidthToFullwidth.numbers = flip(conversionTables.fullwidthToHalfwidth.numbers);
	conversionTables.halfwidthToFullwidth.symbol = flip(conversionTables.fullwidthToHalfwidth.symbol);
	conversionTables.halfwidthToFullwidth.purePunctuation = flip(conversionTables.fullwidthToHalfwidth.purePunctuation);
	conversionTables.halfwidthToFullwidth.punctuation = flip(conversionTables.fullwidthToHalfwidth.punctuation);
	conversionTables.halfwidthToFullwidth.katakana = flip(conversionTables.fullwidthToHalfwidth.katakana);

	// Build the normalization table.
	conversionTables.normalize = merge(
	    conversionTables.fullwidthToHalfwidth.alphabet,
	    conversionTables.fullwidthToHalfwidth.numbers,
	    conversionTables.fullwidthToHalfwidth.symbol,
	    conversionTables.halfwidthToFullwidth.purePunctuation,
	    conversionTables.halfwidthToFullwidth.katakana
	    );

	var converters = {
	  fullwidthToHalfwidth: {
	    alphabet: replacer(conversionTables.fullwidthToHalfwidth.alphabet),
	    numbers: replacer(conversionTables.fullwidthToHalfwidth.numbers),
	    symbol: replacer(conversionTables.fullwidthToHalfwidth.symbol),
	    purePunctuation: replacer(conversionTables.fullwidthToHalfwidth.purePunctuation),
	    punctuation: replacer(conversionTables.fullwidthToHalfwidth.punctuation),
	    katakana: replacer(conversionTables.fullwidthToHalfwidth.katakana)
	  },

	  halfwidthToFullwidth: {
	    alphabet: replacer(conversionTables.halfwidthToFullwidth.alphabet),
	    numbers: replacer(conversionTables.halfwidthToFullwidth.numbers),
	    symbol: replacer(conversionTables.halfwidthToFullwidth.symbol),
	    purePunctuation: replacer(conversionTables.halfwidthToFullwidth.purePunctuation),
	    punctuation: replacer(conversionTables.halfwidthToFullwidth.punctuation),
	    katakana: replacer(conversionTables.halfwidthToFullwidth.katakana)
	  },

	  fixFullwidthKana: replacer(fixFullwidthKana),
	  normalize: replacer(conversionTables.normalize)
	};

	var fixCompositeSymbols = replacer(fixCompositeSymbolsTable);


	/**
	 * Convert hiragana to fullwidth katakana.
	 * According to http://jsperf.com/converting-japanese, these implementations are
	 * faster than using lookup tables.
	 *
	 * @param {string} str A string.
	 * @return {string} A string not containing hiragana.
	 */
	converters.hiraganaToKatakana = function(str) {
	  str = converters.halfwidthToFullwidth.katakana(str);
	  str = converters.fixFullwidthKana(str);

	  str = str.replace(/ゝ/g, 'ヽ');
	  str = str.replace(/ゞ/g, 'ヾ');
	  //str = str.replace(/?/g, '𛀀'); // Letter archaic E

	  str = str.replace(/[ぁ-ゖ]/g, function(str) {
	    return String.fromCharCode(str.charCodeAt(0) + 96);
	  });

	  return str;
	};


	/**
	 * Convert katakana to hiragana.
	 *
	 * @param {string} str A string.
	 * @return {string} A string not containing katakana.
	 */
	converters.katakanaToHiragana = function(str) {
	  str = converters.halfwidthToFullwidth.katakana(str);
	  str = converters.fixFullwidthKana(str);

	  str = str.replace(/ヽ/g, 'ゝ');
	  str = str.replace(/ヾ/g, 'ゞ');
	  //str = str.replace(/?/g, '𛀁'); // Letter archaic E

	  str = str.replace(/[ァ-ヶ]/g, function(str) {
	    return String.fromCharCode(str.charCodeAt(0) - 96);
	  });

	  return str;
	};


	/**
	 * Fix kana and apply the following processes;
	 * * Replace repeat characters
	 * * Alphabet to halfwidth
	 * * Numbers to halfwidth
	 * * Punctuation to fullwidth
	 * * Katakana to fullwidth
	 * * Fix fullwidth kana
	 * * Replace composite symbols
	 *
	 * @param {string} str
	 * @return {string}
	 */
	var normalize_ja = function(str) {
	  // Replace repeat characters.
	  str = str
	    .replace(/(..)々々/g, '$1$1')
	    .replace(/(.)々/g, '$1$1');

	  str = converters.normalize(str);
	  str = converters.fixFullwidthKana(str);

	  // Replace composite symbols.
	  str = fixCompositeSymbols(str);

	  return str;
	};

	exports.normalize_ja = normalize_ja;
	exports.converters = converters;


/***/ },
/* 56 */
/***/ function(module, exports) {

	/*
	 Copyright (c) 2012, Guillaume Marty

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */


	/**
	 * Generate a replacing function given a table of patterns. Inspired by:
	 * http://code.google.com/p/jslibs/wiki/JavascriptTips#String_converter
	 * The order of elements is significant. Longer elements should be listed first.
	 * @see Speed test http://jsperf.com/build-a-regexp-table
	 *
	 * @param {Object.<string, string>} translationTable The translation table of key value.
	 * @return {function(string): string} A translating function.
	 */
	function replacer(translationTable) {
	  /**
	   * An array of translationTable keys.
	   * @type {Array.<string>}
	   */
	  var pattern = [];

	  /**
	   * The regular expression doing the replacement job.
	   * @type {RegExp}
	   */
	  var regExp;

	  /**
	   * Used to iterate over translationTable.
	   * @type {string}
	   */
	  var key;

	  for (key in translationTable) {
	    // Escaping regexp special chars.
	    // @see Speed test for type casting to string http://jsperf.com/string-type-casting/2
	    // @see http://closure-library.googlecode.com/svn/docs/closure_goog_string_string.js.source.html#line956
	    key = ('' + key).replace(/([-()\[\]{}+?*.$\^|,:#<!\\\/])/g, '\\$1').
	      replace(/\x08/g, '\\x08');

	    pattern.push(key);
	  }

	  regExp = new RegExp(pattern.join('|'), 'g');

	  /**
	   * @param {string} str Input string.
	   * @return {string} The string replaced.
	   */
	  return function(str) {
	    return str.replace(regExp, function(str) {
	      return translationTable[str];
	    });
	  };
	}


	/**
	 * Exchanges all keys with their associated values in an object.
	 *
	 * @param {Object.<string, string>} obj An object of strings.
	 * @return {Object.<string, string>} An object of strings.
	 */
	function flip(obj) {
	  var newObj = Object.create(null),
	      key;

	  for (key in obj) {
	    newObj[obj[key]] = key;
	  }

	  return newObj;
	}


	/**
	 * Merge several objects. Properties from earlier objects are overwritten by
	 * laters's in case of conflict.
	 *
	 * @param {...Object.<string, string>} var_args One or more objects of strings.
	 * @return {!Object.<string, string>} An object of strings.
	 */
	function merge(var_args) {
	  var args = [].slice.call(arguments),
	      newObj = Object.create(null),
	      id = 0, key;

	  while (args[id]) {
	    for (key in args[id]) {
	      newObj[key] = args[id][key];
	    }

	    id++;
	  }

	  return newObj;
	}

	exports.replacer = replacer;
	exports.flip = flip;
	exports.merge = merge;


/***/ },
/* 57 */
/***/ function(module, exports) {

	// Original copyright:
	/*
	 Licensed to the Apache Software Foundation (ASF) under one or more
	 contributor license agreements.  See the NOTICE file distributed with
	 this work for additional information regarding copyright ownership.
	 The ASF licenses this file to You under the Apache License, Version 2.0
	 the "License"); you may not use this file except in compliance with
	 the License.  You may obtain a copy of the License at

	 http://www.apache.org/licenses/LICENSE-2.0

	 Unless required by applicable law or agreed to in writing, software
	 distributed under the License is distributed on an "AS IS" BASIS,
	 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 See the License for the specific language governing permissions and
	 limitations under the License.
	*/

	// This version:
	/*
	Copyright (c) 2012, Guillaume Marty

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	// Original location:
	// http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/analysis/kuromoji/src/resources/org/apache/lucene/analysis/ja/stopwords.txt
	var words = ['の', 'に', 'は', 'を', 'た', 'が', 'で', 'て', 'と', 'し', 'れ', 'さ',
	  'ある', 'いる', 'も', 'する', 'から', 'な', 'こと', 'として', 'い', 'や', 'れる',
	  'など', 'なっ', 'ない', 'この', 'ため', 'その', 'あっ', 'よう', 'また', 'もの',
	  'という', 'あり', 'まで', 'られ', 'なる', 'へ', 'か', 'だ', 'これ', 'によって',
	  'により', 'おり', 'より', 'による', 'ず', 'なり', 'られる', 'において', 'ば', 'なかっ',
	  'なく', 'しかし', 'について', 'せ', 'だっ', 'その後', 'できる', 'それ', 'う', 'ので',
	  'なお', 'のみ', 'でき', 'き', 'つ', 'における', 'および', 'いう', 'さらに', 'でも',
	  'ら', 'たり', 'その他', 'に関する', 'たち', 'ます', 'ん', 'なら', 'に対して', '特に',
	  'せる', '及び', 'これら', 'とき', 'では', 'にて', 'ほか', 'ながら', 'うち', 'そして',
	  'とともに', 'ただし', 'かつて', 'それぞれ', 'または', 'お', 'ほど', 'ものの', 'に対する',
	  'ほとんど', 'と共に', 'といった', 'です', 'とも', 'ところ', 'ここ'];

	// tell the world about the noise words.
	module.exports = words;


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel, Martijn de Boer

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(13),
	    util = __webpack_require__(14);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.trim(text.split(/[^a-zA-Z0-9_']+/));
	};


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel,David Przybilla

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(13),
	    util = __webpack_require__(14);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.withoutEmpty = function(array) {
		return array.filter(function(a) {return a;});
	};

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.withoutEmpty(this.trim(text.split(/[^a-zA-Zà-úÀ-Ú]/)));
	};


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Rob Ellis, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(13),
	    util = __webpack_require__(14),
	    _ = __webpack_require__(61)._;

	// Base Class for RegExp Matching
	var RegexpTokenizer = function(options) {
	    var options = options || {};
	    this._pattern = options.pattern || this._pattern;
	    this.discardEmpty = options.discardEmpty || true;

	    // Match and split on GAPS not the actual WORDS
	    this._gaps = options.gaps;
	    
	    if (this._gaps === undefined) {
	        this._gaps = true;
	    }
	};

	util.inherits(RegexpTokenizer, Tokenizer);

	RegexpTokenizer.prototype.tokenize = function(s) {
	    var results;

	    if (this._gaps) {
	        results = s.split(this._pattern);
	        return (this.discardEmpty) ? _.without(results,'',' ') : results;
	    } else {
	        return s.match(this._pattern);
	    }
	};

	exports.RegexpTokenizer = RegexpTokenizer;

	/***
	 * A tokenizer that divides a text into sequences of alphabetic and
	 * non-alphabetic characters.  E.g.:
	 *
	 *      >>> WordTokenizer().tokenize("She said 'hello'.")
	 *      ['She', 'said', 'hello']
	 * 
	 */
	var WordTokenizer = function(options) {
	    this._pattern = /\W+/;
	    RegexpTokenizer.call(this,options)
	};

	util.inherits(WordTokenizer, RegexpTokenizer);
	exports.WordTokenizer = WordTokenizer;

	/***
	 * A tokenizer that divides a text into sequences of alphabetic and
	 * non-alphabetic characters.  E.g.:
	 *
	 *      >>> WordPunctTokenizer().tokenize("She said 'hello'.")
	 *      ['She', 'said', "'", 'hello', "'."]
	 * 
	 */
	var WordPunctTokenizer = function(options) {
	    this._pattern = new RegExp(/(\w+|\!|\'|\"")/i);
	    RegexpTokenizer.call(this,options)
	};

	util.inherits(WordPunctTokenizer, RegexpTokenizer);
	exports.WordPunctTokenizer = WordPunctTokenizer;


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.7.0
	//     http://underscorejs.org
	//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    concat           = ArrayProto.concat,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind;

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.7.0';

	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var createCallback = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };

	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  _.iteratee = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return createCallback(value, context, argCount);
	    if (_.isObject(value)) return _.matches(value);
	    return _.property(value);
	  };

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    if (obj == null) return obj;
	    iteratee = createCallback(iteratee, context);
	    var i, length = obj.length;
	    if (length === +length) {
	      for (i = 0; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };

	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    if (obj == null) return [];
	    iteratee = _.iteratee(iteratee, context);
	    var keys = obj.length !== +obj.length && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length),
	        currentKey;
	    for (var index = 0; index < length; index++) {
	      currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  var reduceError = 'Reduce of empty array with no initial value';

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = function(obj, iteratee, memo, context) {
	    if (obj == null) obj = [];
	    iteratee = createCallback(iteratee, context, 4);
	    var keys = obj.length !== +obj.length && _.keys(obj),
	        length = (keys || obj).length,
	        index = 0, currentKey;
	    if (arguments.length < 3) {
	      if (!length) throw new TypeError(reduceError);
	      memo = obj[keys ? keys[index++] : index++];
	    }
	    for (; index < length; index++) {
	      currentKey = keys ? keys[index] : index;
	      memo = iteratee(memo, obj[currentKey], currentKey, obj);
	    }
	    return memo;
	  };

	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = function(obj, iteratee, memo, context) {
	    if (obj == null) obj = [];
	    iteratee = createCallback(iteratee, context, 4);
	    var keys = obj.length !== + obj.length && _.keys(obj),
	        index = (keys || obj).length,
	        currentKey;
	    if (arguments.length < 3) {
	      if (!index) throw new TypeError(reduceError);
	      memo = obj[keys ? keys[--index] : --index];
	    }
	    while (index--) {
	      currentKey = keys ? keys[index] : index;
	      memo = iteratee(memo, obj[currentKey], currentKey, obj);
	    }
	    return memo;
	  };

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var result;
	    predicate = _.iteratee(predicate, context);
	    _.some(obj, function(value, index, list) {
	      if (predicate(value, index, list)) {
	        result = value;
	        return true;
	      }
	    });
	    return result;
	  };

	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    if (obj == null) return results;
	    predicate = _.iteratee(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(_.iteratee(predicate)), context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    if (obj == null) return true;
	    predicate = _.iteratee(predicate, context);
	    var keys = obj.length !== +obj.length && _.keys(obj),
	        length = (keys || obj).length,
	        index, currentKey;
	    for (index = 0; index < length; index++) {
	      currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    if (obj == null) return false;
	    predicate = _.iteratee(predicate, context);
	    var keys = obj.length !== +obj.length && _.keys(obj),
	        length = (keys || obj).length,
	        index, currentKey;
	    for (index = 0; index < length; index++) {
	      currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };

	  // Determine if the array or object contains a given value (using `===`).
	  // Aliased as `include`.
	  _.contains = _.include = function(obj, target) {
	    if (obj == null) return false;
	    if (obj.length !== +obj.length) obj = _.values(obj);
	    return _.indexOf(obj, target) >= 0;
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      return (isFunc ? method : value[method]).apply(value, args);
	    });
	  };

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matches(attrs));
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matches(attrs));
	  };

	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = obj.length === +obj.length ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = _.iteratee(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = obj.length === +obj.length ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = _.iteratee(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = obj && obj.length === +obj.length ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };

	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (obj.length !== +obj.length) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };

	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = _.iteratee(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = _.iteratee(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = _.iteratee(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = array.length;
	    while (low < high) {
	      var mid = low + high >>> 1;
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };

	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (obj.length === +obj.length) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return obj.length === +obj.length ? obj.length : _.keys(obj).length;
	  };

	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = _.iteratee(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    if (n < 0) return [];
	    return slice.call(array, 0, n);
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N. The **guard** check allows it to work with
	  // `_.map`.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array. The **guard** check allows it to work with `_.map`.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return slice.call(array, Math.max(array.length - n, 0));
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array. The **guard**
	  // check allows it to work with `_.map`.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, output) {
	    if (shallow && _.every(input, _.isArray)) {
	      return concat.apply(output, input);
	    }
	    for (var i = 0, length = input.length; i < length; i++) {
	      var value = input[i];
	      if (!_.isArray(value) && !_.isArguments(value)) {
	        if (!strict) output.push(value);
	      } else if (shallow) {
	        push.apply(output, value);
	      } else {
	        flatten(value, shallow, strict, output);
	      }
	    }
	    return output;
	  };

	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false, []);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (array == null) return [];
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = _.iteratee(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = array.length; i < length; i++) {
	      var value = array[i];
	      if (isSorted) {
	        if (!i || seen !== value) result.push(value);
	        seen = value;
	      } else if (iteratee) {
	        var computed = iteratee(value, i, array);
	        if (_.indexOf(seen, computed) < 0) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (_.indexOf(result, value) < 0) {
	        result.push(value);
	      }
	    }
	    return result;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true, []));
	  };

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    if (array == null) return [];
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = array.length; i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(slice.call(arguments, 1), true, true, []);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function(array) {
	    if (array == null) return [];
	    var length = _.max(arguments, 'length').length;
	    var results = Array(length);
	    for (var i = 0; i < length; i++) {
	      results[i] = _.pluck(arguments, i);
	    }
	    return results;
	  };

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    if (list == null) return {};
	    var result = {};
	    for (var i = 0, length = list.length; i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = function(array, item, isSorted) {
	    if (array == null) return -1;
	    var i = 0, length = array.length;
	    if (isSorted) {
	      if (typeof isSorted == 'number') {
	        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
	      } else {
	        i = _.sortedIndex(array, item);
	        return array[i] === item ? i : -1;
	      }
	    }
	    for (; i < length; i++) if (array[i] === item) return i;
	    return -1;
	  };

	  _.lastIndexOf = function(array, item, from) {
	    if (array == null) return -1;
	    var idx = array.length;
	    if (typeof from == 'number') {
	      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
	    }
	    while (--idx >= 0) if (array[idx] === item) return idx;
	    return -1;
	  };

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (arguments.length <= 1) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);

	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }

	    return range;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Reusable constructor function for prototype setting.
	  var Ctor = function(){};

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    var args, bound;
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    args = slice.call(arguments, 2);
	    bound = function() {
	      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
	      Ctor.prototype = func.prototype;
	      var self = new Ctor;
	      Ctor.prototype = null;
	      var result = func.apply(self, args.concat(slice.call(arguments)));
	      if (_.isObject(result)) return result;
	      return self;
	    };
	    return bound;
	  };

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    return function() {
	      var position = 0;
	      var args = boundArgs.slice();
	      for (var i = 0, length = args.length; i < length; i++) {
	        if (args[i] === _) args[i] = arguments[position++];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return func.apply(this, args);
	    };
	  };

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = hasher ? hasher.apply(this, arguments) : key;
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = function(func) {
	    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
	  };

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        clearTimeout(timeout);
	        timeout = null;
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;

	    var later = function() {
	      var last = _.now() - timestamp;

	      if (last < wait && last > 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };

	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }

	      return result;
	    };
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };

	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };

	  // Returns a function that will only be executed after being called N times.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Returns a function that will only be executed before being called N times.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      } else {
	        func = null;
	      }
	      return memo;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);

	  // Object Functions
	  // ----------------

	  // Retrieve the names of an object's properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    var source, prop;
	    for (var i = 1, length = arguments.length; i < length; i++) {
	      source = arguments[i];
	      for (prop in source) {
	        if (hasOwnProperty.call(source, prop)) {
	            obj[prop] = source[prop];
	        }
	      }
	    }
	    return obj;
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(obj, iteratee, context) {
	    var result = {}, key;
	    if (obj == null) return result;
	    if (_.isFunction(iteratee)) {
	      iteratee = createCallback(iteratee, context);
	      for (key in obj) {
	        var value = obj[key];
	        if (iteratee(value, key, obj)) result[key] = value;
	      }
	    } else {
	      var keys = concat.apply([], slice.call(arguments, 1));
	      obj = new Object(obj);
	      for (var i = 0, length = keys.length; i < length; i++) {
	        key = keys[i];
	        if (key in obj) result[key] = obj[key];
	      }
	    }
	    return result;
	  };

	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };

	  // Fill in a given object with default properties.
	  _.defaults = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    for (var i = 1, length = arguments.length; i < length; i++) {
	      var source = arguments[i];
	      for (var prop in source) {
	        if (obj[prop] === void 0) obj[prop] = source[prop];
	      }
	    }
	    return obj;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }
	    if (typeof a != 'object' || typeof b != 'object') return false;
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }
	    // Objects with different constructors are not equivalent, but `Object`s
	    // from different frames are.
	    var aCtor = a.constructor, bCtor = b.constructor;
	    if (
	      aCtor !== bCtor &&
	      // Handle Object.create(x) cases
	      'constructor' in a && 'constructor' in b &&
	      !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	        _.isFunction(bCtor) && bCtor instanceof bCtor)
	    ) {
	      return false;
	    }
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	    var size, result;
	    // Recursively compare objects and arrays.
	    if (className === '[object Array]') {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      size = a.length;
	      result = size === b.length;
	      if (result) {
	        // Deep compare the contents, ignoring non-numeric properties.
	        while (size--) {
	          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
	        }
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      size = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      result = _.keys(b).length === size;
	      if (result) {
	        while (size--) {
	          // Deep compare each member
	          key = keys[size];
	          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
	        }
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return result;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b, [], []);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;
	    for (var key in obj) if (_.has(obj, key)) return false;
	    return true;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }

	  // Optimize `isFunction` if appropriate. Work around an IE 11 bug.
	  if (true) {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };

	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };

	  _.noop = function(){};

	  _.property = function(key) {
	    return function(obj) {
	      return obj[key];
	    };
	  };

	  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
	  _.matches = function(attrs) {
	    var pairs = _.pairs(attrs), length = pairs.length;
	    return function(obj) {
	      if (obj == null) return !length;
	      obj = new Object(obj);
	      for (var i = 0; i < length; i++) {
	        var pair = pairs[i], key = pair[0];
	        if (pair[1] !== obj[key] || !(key in obj)) return false;
	      }
	      return true;
	    };
	  };

	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = createCallback(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };

	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);

	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property) {
	    if (object == null) return void 0;
	    var value = object[property];
	    return _.isFunction(value) ? object[property]() : value;
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }

	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';

	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var result = function(obj) {
	    return this._chain ? _(obj).chain() : obj;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result.call(this, func.apply(_, args));
	      };
	    });
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result.call(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result.call(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };

	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Rob Ellis, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(13),
	    util = __webpack_require__(14),
	    _ = __webpack_require__(61)._;

	var contractions2 = [
	    /(.)('ll|'re|'ve|n't|'s|'m|'d)\b/ig,
	    /\b(can)(not)\b/ig,
	    /\b(D)('ye)\b/ig,
	    /\b(Gim)(me)\b/ig,
	    /\b(Gon)(na)\b/ig,
	    /\b(Got)(ta)\b/ig,
	    /\b(Lem)(me)\b/ig,
	    /\b(Mor)('n)\b/ig,
	    /\b(T)(is)\b/ig,
	    /\b(T)(was)\b/ig,
	    /\b(Wan)(na)\b/ig];

	var contractions3 = [
	    /\b(Whad)(dd)(ya)\b/ig,
	    /\b(Wha)(t)(cha)\b/ig
	];

	var TreebankWordTokenizer = function() {
	};

	util.inherits(TreebankWordTokenizer, Tokenizer);

	TreebankWordTokenizer.prototype.tokenize = function(text) {
	    contractions2.forEach(function(regexp) {
		text = text.replace(regexp,"$1 $2");
	    });
	    
	    contractions3.forEach(function(regexp) {
		text = text.replace(regexp,"$1 $2 $3");
	    });

	    // most punctuation
	    text = text.replace(/([^\w\.\'\-\/\+\<\>,&])/g, " $1 ");

	    // commas if followed by space
	    text = text.replace(/(,\s)/g, " $1");

	    // single quotes if followed by a space
	    text = text.replace(/('\s)/g, " $1");

	    // periods before newline or end of string
	    text = text.replace(/\. *(\n|$)/g, " . ");
	    
	    return  _.without(text.split(/\s+/), '');	
	};

	module.exports = TreebankWordTokenizer;


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var PorterStemmer = __webpack_require__(21),
	util = __webpack_require__(14),
	Classifier = __webpack_require__(64),
	ApparatusBayesClassifier = __webpack_require__(67).BayesClassifier;

	var BayesClassifier = function(stemmer, smoothing) {
	    var abc = new ApparatusBayesClassifier();
	    if (smoothing && isFinite(smoothing)) {
	        abc = new ApparatusBayesClassifier(smoothing);
	    }
	    Classifier.call(this, abc, stemmer);
	};

	util.inherits(BayesClassifier, Classifier);

	function restore(classifier, stemmer) {
	    classifier = Classifier.restore(classifier, stemmer);
	    classifier.__proto__ = BayesClassifier.prototype;
	    classifier.classifier = ApparatusBayesClassifier.restore(classifier.classifier);

	    return classifier;
	}

	function load(filename, stemmer, callback) {
	    Classifier.load(filename, function(err, classifier) {
	        if (err) {
	            callback(err);
	        }
	        callback(err, restore(classifier, stemmer));
	    });
	}

	BayesClassifier.restore = restore;
	BayesClassifier.load = load;

	module.exports = BayesClassifier;


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var PorterStemmer = __webpack_require__(21),
	util = __webpack_require__(14),
	events = __webpack_require__(65);

	var Classifier = function(classifier, stemmer) {
	    this.classifier = classifier;
	    this.docs = [];
	    this.features = {};
	    this.stemmer = stemmer || PorterStemmer;
	    this.lastAdded = 0;
	    this.events = new events.EventEmitter();
	};

	function addDocument(text, classification) {
	    if(typeof text === 'string')
		text = this.stemmer.tokenizeAndStem(text);

	    if(text.length === 0) {
	        // ignore empty documents
	        return;
	    }

	    this.docs.push({
		label: classification,
		text: text
	    });

	    for(var i = 0; i < text.length; i++) {
		this.features[text[i]] = 1;
	    }
	}

	function removeDocument(text, classification) {
	  var docs = this.docs
	    , doc
	    , pos;

	  if (typeof text === 'string') {
	    text = this.stemmer.tokenizeAndStem(text);
	  }

	  for (var i = 0, ii = docs.length; i < ii; i++) {
	    doc = docs[i];
	    if (doc.text.join(' ') == text.join(' ') &&
	        doc.label == classification) {
	      pos = i;
	    }
	  }

	  // Remove if there's a match
	  if (!isNaN(pos)) {
	    this.docs.splice(pos, 1);

	    for (var i = 0, ii = text.length; i < ii; i++) {
	      delete this.features[text[i]];
	    }
	  }
	}

	function textToFeatures(observation) {
	    var features = [];

	    if(typeof observation === 'string')
		observation = this.stemmer.tokenizeAndStem(observation);

	    for(var feature in this.features) {
	        if(observation.indexOf(feature) > -1)
	            features.push(1);
	        else
	            features.push(0);
	    }

	    return features;
	}

	function train() {
	    var totalDocs = this.docs.length;
	    for(var i = this.lastAdded; i < totalDocs; i++) {
	        var features = this.textToFeatures(this.docs[i].text);
	        this.classifier.addExample(features, this.docs[i].label);
	        this.events.emit('trainedWithDocument', {index: i, total: totalDocs, doc: this.docs[i]});
	        this.lastAdded++;
	    }
	    this.events.emit('doneTraining', true);
	    this.classifier.train();
	}

	function retrain() {
	  this.classifier = new (this.classifier.constructor)();
	  this.lastAdded = 0;
	  this.train();
	}

	function getClassifications(observation) {
	    return this.classifier.getClassifications(this.textToFeatures(observation));
	}

	function classify(observation) {
	    return this.classifier.classify(this.textToFeatures(observation));
	}

	function restore(classifier, stemmer) {
	    classifier.stemmer = stemmer || PorterStemmer;
	    classifier.events = new events.EventEmitter();
	    return classifier;
	}

	function save(filename, callback) {
	    var data = JSON.stringify(this);
	    var fs = __webpack_require__(66);
	    var classifier = this;
	    fs.writeFile(filename, data, 'utf8', function(err) {
	        if(callback) {
	            callback(err, err ? null : classifier);
	        }
	    });
	}

	function load(filename, callback) {
	    var fs = __webpack_require__(66);

	    fs.readFile(filename, 'utf8', function(err, data) {
	        var classifier;
	          
	        if(!err) {
	            classifier = JSON.parse(data);
	        }

	        if(callback)
	            callback(err, classifier);
	    });
	}

	Classifier.prototype.addDocument = addDocument;
	Classifier.prototype.removeDocument = removeDocument;
	Classifier.prototype.train = train;
	Classifier.prototype.retrain = retrain;
	Classifier.prototype.classify = classify;
	Classifier.prototype.textToFeatures = textToFeatures;
	Classifier.prototype.save = save;
	Classifier.prototype.getClassifications = getClassifications;
	Classifier.restore = restore;
	Classifier.load = load;

	module.exports = Classifier;


/***/ },
/* 65 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 66 */
/***/ function(module, exports) {

	console.log("I'm `fs` modules");


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	
	exports.BayesClassifier = __webpack_require__(68);
	exports.LogisticRegressionClassifier = __webpack_require__(70);
	exports.KMeans = __webpack_require__(78);


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var util = __webpack_require__(14),
	Classifier = __webpack_require__(69);

	var BayesClassifier = function(smoothing) {
	    Classifier.call(this);
	    this.classFeatures = {};
	    this.classTotals = {};
	    this.totalExamples = 1; // start at one to smooth
	    this.smoothing = smoothing === undefined ? 1.0 : smoothing;
	};

	util.inherits(BayesClassifier, Classifier);

	function addExample(observation, label) {
	    if(!this.classFeatures[label]) {
	        this.classFeatures[label] = {};
	        this.classTotals[label] = 1; // give an extra for smoothing
	    }

	    if(observation instanceof Array) {
	        var i = observation.length;
	        this.totalExamples++;
	        this.classTotals[label]++;

	        while(i--) {
	            if(observation[i]) {
	                if(this.classFeatures[label][i]) {
	                    this.classFeatures[label][i]++;
	                } else {
	                    // give an extra for smoothing
	                    this.classFeatures[label][i] = 1 + this.smoothing;
	                }
	            }
	        }
	    } else {
	        // sparse observation
	        for(var key in observation){
	            value = observation[key];

	            if(this.classFeatures[label][value]) {
	               this.classFeatures[label][value]++;
	            } else {
	                // give an extra for smoothing
	               this.classFeatures[label][value] = 1 + this.smoothing;
	            }
	        }
	    }
	}

	function train() {

	}

	function probabilityOfClass(observation, label) {
	    var prob = 0;

	    if(observation instanceof Array){
	        var i = observation.length;

	        while(i--) {
	            if(observation[i]) {
	                var count = this.classFeatures[label][i] || this.smoothing;
	                // numbers are tiny, add logs rather than take product
	                prob += Math.log(count / this.classTotals[label]);
	            }
	        }
	    } else {
	        // sparse observation
	        for(var key in observation){
	            var count = this.classFeatures[label][observation[key]] || this.smoothing;
	            // numbers are tiny, add logs rather than take product
	            prob += Math.log(count / this.classTotals[label]);
	        }
	    }

	    // p(C) * unlogging the above calculation P(X|C)
	    prob = (this.classTotals[label] / this.totalExamples) * Math.exp(prob);

	    return prob;
	}

	function getClassifications(observation) {
	    var classifier = this;
	    var labels = [];

	    for(var className in this.classFeatures) {
	        labels.push({label: className,
	        value: classifier.probabilityOfClass(observation, className)});
	    }

	    return labels.sort(function(x, y) {
	        return y.value - x.value;
	    });
	}

	function restore(classifier) {
	     classifier = Classifier.restore(classifier);
	     classifier.__proto__ = BayesClassifier.prototype;

	     return classifier;
	}

	BayesClassifier.prototype.addExample = addExample;
	BayesClassifier.prototype.train = train;
	BayesClassifier.prototype.getClassifications = getClassifications;
	BayesClassifier.prototype.probabilityOfClass = probabilityOfClass;

	BayesClassifier.restore = restore;

	module.exports = BayesClassifier;

/***/ },
/* 69 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	function Classifier() {
	}

	function restore(classifier) {
	    classifier = typeof classifier == 'string' ?  JSON.parse(classifier) : classifier;

	    return classifier;
	}

	function addExample(observation, classification) {
	    throw 'Not implemented';
	}

	function classify(observation) {
		var classifications = this.getClassifications(observation);
		if(!classifications || classifications.length === 0) {
			throw "Not Trained";
		} 
	    return this.getClassifications(observation)[0].label;
	}

	function train() {
	    throw 'Not implemented';
	}

	Classifier.prototype.addExample = addExample;
	Classifier.prototype.train = train;
	Classifier.prototype.classify = classify;

	Classifier.restore = restore;

	module.exports = Classifier;


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var util = __webpack_require__(14),
	     Classifier = __webpack_require__(69);

	var sylvester = __webpack_require__(71),
	Matrix = sylvester.Matrix,
	Vector = sylvester.Vector;

	function sigmoid(z) {
	    return 1 / (1 + Math.exp(0 - z));
	}

	function hypothesis(theta, Observations) {
	    return Observations.x(theta).map(sigmoid);
	}

	function cost(theta, Examples, classifications) {
	    var hypothesisResult = hypothesis(theta, Examples);

	    var ones = Vector.One(Examples.rows());
	    var cost_1 = Vector.Zero(Examples.rows()).subtract(classifications).elementMultiply(hypothesisResult.log());
	    var cost_0 = ones.subtract(classifications).elementMultiply(ones.subtract(hypothesisResult).log());

	    return (1 / Examples.rows()) * cost_1.subtract(cost_0).sum();
	}

	function descendGradient(theta, Examples, classifications) {
	    var maxIt = 500 * Examples.rows();
	    var last;
	    var current;
	    var learningRate = 3;
	    var learningRateFound = false;

	    Examples = Matrix.One(Examples.rows(), 1).augment(Examples);
	    theta = theta.augment([0]);

	    while(!learningRateFound) {
	        var i = 0;
	        last = null;

	        while(true) {
	            var hypothesisResult = hypothesis(theta, Examples);
	            theta = theta.subtract(Examples.transpose().x(
	            hypothesisResult.subtract(classifications)).x(1 / Examples.rows()).x(learningRate));
	            current = cost(theta, Examples, classifications);

	            i++;

	            if(last) {
	            if(current < last)
	                learningRateFound = true;
	            else
	                break;

	            if(last - current < 0.0001)
	                break;
	            }

	            if(i >= maxIt) {
	                throw 'unable to find minimum';
	            }

	            last = current;
	        }

	        learningRate /= 3;
	    }

	    return theta.chomp(1);
	}

	var LogisticRegressionClassifier = function() {
	    Classifier.call(this);
	    this.examples = {};
	    this.features = [];
	    this.featurePositions = {};
	    this.maxFeaturePosition = 0;
	    this.classifications = [];
	    this.exampleCount = 0;
	};

	util.inherits(LogisticRegressionClassifier, Classifier);

	function createClassifications() {
	    var classifications = [];

	    for(var i = 0; i < this.exampleCount; i++) {
	        var classification = [];

	        for(var _ in this.examples) {
	            classification.push(0);
	        }

	       classifications.push(classification);
	    }

	    return classifications;
	}

	function computeThetas(Examples, Classifications) {
	    this.theta = [];

	    // each class will have it's own theta.
	    var zero = function() { return 0; };
	    for(var i = 1; i <= this.classifications.length; i++) {
	        var theta = Examples.row(1).map(zero);
	        this.theta.push(descendGradient(theta, Examples, Classifications.column(i)));
	    }
	}

	function train() {
	    var examples = [];
	    var classifications = this.createClassifications();
	    var d = 0, c = 0;

	    for(var classification in this.examples) {
	        for(var i = 0; i < this.examples[classification].length; i++) {
	            var doc = this.examples[classification][i];
	            var example = doc;

	            examples.push(example);
	            classifications[d][c] = 1;
	            d++;
	        }

	        c++;
	    }

	    this.computeThetas($M(examples), $M(classifications));
	}

	function addExample(data, classification) {
	    if(!this.examples[classification]) {
		this.examples[classification] = [];
		this.classifications.push(classification);
	    }

	    this.examples[classification].push(data);
	    this.exampleCount++;
	}

	function getClassifications(observation) {
	    observation = $V(observation);
	    var classifications = [];

	    for(var i = 0; i < this.theta.length; i++) {
	        classifications.push({label: this.classifications[i], value: sigmoid(observation.dot(this.theta[i])) });
	    }

	    return classifications.sort(function(x, y) {
	        return y.value - x.value;
	    });
	}

	function restore(classifier) {
	    classifier = Classifier.restore(classifier);
	    classifier.__proto__ = LogisticRegressionClassifier.prototype;

	    return classifier;
	}

	LogisticRegressionClassifier.prototype.addExample = addExample;
	LogisticRegressionClassifier.prototype.restore = restore;
	LogisticRegressionClassifier.prototype.train = train;
	LogisticRegressionClassifier.prototype.createClassifications = createClassifications;
	LogisticRegressionClassifier.prototype.computeThetas = computeThetas;
	LogisticRegressionClassifier.prototype.getClassifications = getClassifications;

	LogisticRegressionClassifier.restore = restore;

	module.exports = LogisticRegressionClassifier;


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {// Copyright (c) 2011, Chris Umbel

	exports.Vector = __webpack_require__(72);
	global.$V = exports.Vector.create;
	exports.Matrix = __webpack_require__(74);
	global.$M = exports.Matrix.create;
	exports.Line = __webpack_require__(75);
	global.$L = exports.Line.create;
	exports.Plane = __webpack_require__(76);
	global.$P = exports.Plane.create;
	exports.Line.Segment = __webpack_require__(77);
	exports.Sylvester = __webpack_require__(73);

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright (c) 2011, Chris Umbel, James Coglan
	// This file is required in order for any other classes to work. Some Vector methods work with the
	// other Sylvester classes and are useless unless they are included. Other classes such as Line and
	// Plane will not function at all without Vector being loaded first.

	var Sylvester = __webpack_require__(73),
	Matrix = __webpack_require__(74);

	function Vector() {}
	Vector.prototype = {

	    norm: function() {
		var n = this.elements.length;
		var sum = 0;

		while (n--) {
		    sum += Math.pow(this.elements[n], 2);
		}

		return Math.sqrt(sum);
	    },

	    // Returns element i of the vector
	    e: function(i) {
	      return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];
	    },

	    // Returns the number of rows/columns the vector has
	    dimensions: function() {
	      return {rows: 1, cols: this.elements.length};
	    },

	    // Returns the number of rows in the vector
	    rows: function() {
	      return 1;
	    },

	    // Returns the number of columns in the vector
	    cols: function() {
	      return this.elements.length;
	    },

	    // Returns the modulus ('length') of the vector
	    modulus: function() {
	      return Math.sqrt(this.dot(this));
	    },

	    // Returns true iff the vector is equal to the argument
	    eql: function(vector) {
	    	var n = this.elements.length;
	    	var V = vector.elements || vector;
	    	if (n != V.length) { return false; }
	    	while (n--) {
	    	    if (Math.abs(this.elements[n] - V[n]) > Sylvester.precision) { return false; }
	    	}
	    	return true;
	    },

	    // Returns a copy of the vector
	    dup: function() {
		    return Vector.create(this.elements);
	    },

	    // Maps the vector to another vector according to the given function
	    map: function(fn) {
		var elements = [];
		this.each(function(x, i) {
		    elements.push(fn(x, i));
		});
		return Vector.create(elements);
	    },

	    // Calls the iterator for each element of the vector in turn
	    each: function(fn) {
		var n = this.elements.length;
		for (var i = 0; i < n; i++) {
		    fn(this.elements[i], i + 1);
		}
	    },

	    // Returns a new vector created by normalizing the receiver
	    toUnitVector: function() {
		var r = this.modulus();
		if (r === 0) { return this.dup(); }
		return this.map(function(x) { return x / r; });
	    },

	    // Returns the angle between the vector and the argument (also a vector)
	    angleFrom: function(vector) {
		var V = vector.elements || vector;
		var n = this.elements.length, k = n, i;
		if (n != V.length) { return null; }
		var dot = 0, mod1 = 0, mod2 = 0;
		// Work things out in parallel to save time
		this.each(function(x, i) {
		    dot += x * V[i - 1];
		    mod1 += x * x;
		    mod2 += V[i - 1] * V[i - 1];
		});
		mod1 = Math.sqrt(mod1); mod2 = Math.sqrt(mod2);
		if (mod1 * mod2 === 0) { return null; }
		var theta = dot / (mod1 * mod2);
		if (theta < -1) { theta = -1; }
		if (theta > 1) { theta = 1; }
		return Math.acos(theta);
	    },

	    // Returns true iff the vector is parallel to the argument
	    isParallelTo: function(vector) {
		var angle = this.angleFrom(vector);
		return (angle === null) ? null : (angle <= Sylvester.precision);
	    },

	    // Returns true iff the vector is antiparallel to the argument
	    isAntiparallelTo: function(vector) {
		var angle = this.angleFrom(vector);
		return (angle === null) ? null : (Math.abs(angle - Math.PI) <= Sylvester.precision);
	    },

	    // Returns true iff the vector is perpendicular to the argument
	    isPerpendicularTo: function(vector) {
		var dot = this.dot(vector);
		return (dot === null) ? null : (Math.abs(dot) <= Sylvester.precision);
	    },

	    // Returns the result of adding the argument to the vector
	    add: function(value) {
		var V = value.elements || value;

		if (this.elements.length != V.length) 
		    return this.map(function(v) { return v + value });
		else
		    return this.map(function(x, i) { return x + V[i - 1]; });
	    },

	    // Returns the result of subtracting the argument from the vector
	    subtract: function(v) {
		if (typeof(v) == 'number')
		    return this.map(function(k) { return k - v; });

		var V = v.elements || v;
		if (this.elements.length != V.length) { return null; }
		return this.map(function(x, i) { return x - V[i - 1]; });
	    },

	    // Returns the result of multiplying the elements of the vector by the argument
	    multiply: function(k) {
		return this.map(function(x) { return x * k; });
	    },

	    elementMultiply: function(v) {
		return this.map(function(k, i) {
		    return v.e(i) * k;
		});
	    },

	    sum: function() {
		var sum = 0;
		this.map(function(x) { sum += x;});
		return sum;
	    },

	    chomp: function(n) {
		var elements = [];

		for (var i = n; i < this.elements.length; i++) {
		    elements.push(this.elements[i]);
		}

		return Vector.create(elements);
	    },

	    top: function(n) {
		var elements = [];

		for (var i = 0; i < n; i++) {
		    elements.push(this.elements[i]);
		}

		return Vector.create(elements);
	    },

	    augment: function(elements) {
		var newElements = this.elements;

		for (var i = 0; i < elements.length; i++) {
		    newElements.push(elements[i]);
		}

		return Vector.create(newElements);
	    },

	    x: function(k) { return this.multiply(k); },

	    log: function() {
		return Vector.log(this);
	    },

	    elementDivide: function(vector) {
		return this.map(function(v, i) {
		    return v / vector.e(i);
		});
	    },

	    product: function() {
		var p = 1;

		this.map(function(v) {
		    p *= v;
		});

		return p;
	    },

	    // Returns the scalar product of the vector with the argument
	    // Both vectors must have equal dimensionality
	    dot: function(vector) {
		var V = vector.elements || vector;
		var i, product = 0, n = this.elements.length;	
		if (n != V.length) { return null; }
		while (n--) { product += this.elements[n] * V[n]; }
		return product;
	    },

	    // Returns the vector product of the vector with the argument
	    // Both vectors must have dimensionality 3
	    cross: function(vector) {
		var B = vector.elements || vector;
		if (this.elements.length != 3 || B.length != 3) { return null; }
		var A = this.elements;
		return Vector.create([
		    (A[1] * B[2]) - (A[2] * B[1]),
		    (A[2] * B[0]) - (A[0] * B[2]),
		    (A[0] * B[1]) - (A[1] * B[0])
		]);
	    },

	    // Returns the (absolute) largest element of the vector
	    max: function() {
		var m = 0, i = this.elements.length;
		while (i--) {
		    if (Math.abs(this.elements[i]) > Math.abs(m)) { m = this.elements[i]; }
		}
		return m;
	    },


	    maxIndex: function() {
		var m = 0, i = this.elements.length;
		var maxIndex = -1;

		while (i--) {
		    if (Math.abs(this.elements[i]) > Math.abs(m)) { 
			m = this.elements[i]; 
			maxIndex = i + 1;
		    }
		}

		return maxIndex;
	    },


	    // Returns the index of the first match found
	    indexOf: function(x) {
		var index = null, n = this.elements.length;
		for (var i = 0; i < n; i++) {
		    if (index === null && this.elements[i] == x) {
			index = i + 1;
		    }
		}
		return index;
	    },

	    // Returns a diagonal matrix with the vector's elements as its diagonal elements
	    toDiagonalMatrix: function() {
		return Matrix.Diagonal(this.elements);
	    },

	    // Returns the result of rounding the elements of the vector
	    round: function() {
		return this.map(function(x) { return Math.round(x); });
	    },

	    // Transpose a Vector, return a 1xn Matrix
	    transpose: function() {
		var rows = this.elements.length;
		var elements = [];

		for (var i = 0; i < rows; i++) {
		    elements.push([this.elements[i]]);
		}
		return Matrix.create(elements);
	    },

	    // Returns a copy of the vector with elements set to the given value if they
	    // differ from it by less than Sylvester.precision
	    snapTo: function(x) {
		return this.map(function(y) {
		    return (Math.abs(y - x) <= Sylvester.precision) ? x : y;
		});
	    },

	    // Returns the vector's distance from the argument, when considered as a point in space
	    distanceFrom: function(obj) {
		if (obj.anchor || (obj.start && obj.end)) { return obj.distanceFrom(this); }
		var V = obj.elements || obj;
		if (V.length != this.elements.length) { return null; }
		var sum = 0, part;
		this.each(function(x, i) {
		    part = x - V[i - 1];
		    sum += part * part;
		});
		return Math.sqrt(sum);
	    },

	    // Returns true if the vector is point on the given line
	    liesOn: function(line) {
		return line.contains(this);
	    },

	    // Return true iff the vector is a point in the given plane
	    liesIn: function(plane) {
		return plane.contains(this);
	    },

	    // Rotates the vector about the given object. The object should be a
	    // point if the vector is 2D, and a line if it is 3D. Be careful with line directions!
	    rotate: function(t, obj) {
		var V, R = null, x, y, z;
		if (t.determinant) { R = t.elements; }
		switch (this.elements.length) {
		case 2:
	            V = obj.elements || obj;
	            if (V.length != 2) { return null; }
	            if (!R) { R = Matrix.Rotation(t).elements; }
	            x = this.elements[0] - V[0];
	            y = this.elements[1] - V[1];
	            return Vector.create([
			V[0] + R[0][0] * x + R[0][1] * y,
			V[1] + R[1][0] * x + R[1][1] * y
	            ]);
	            break;
		case 3:
	            if (!obj.direction) { return null; }
	            var C = obj.pointClosestTo(this).elements;
	            if (!R) { R = Matrix.Rotation(t, obj.direction).elements; }
	            x = this.elements[0] - C[0];
	            y = this.elements[1] - C[1];
	            z = this.elements[2] - C[2];
	            return Vector.create([
			C[0] + R[0][0] * x + R[0][1] * y + R[0][2] * z,
			C[1] + R[1][0] * x + R[1][1] * y + R[1][2] * z,
			C[2] + R[2][0] * x + R[2][1] * y + R[2][2] * z
	            ]);
	            break;
		default:
	            return null;
		}
	    },

	    // Returns the result of reflecting the point in the given point, line or plane
	    reflectionIn: function(obj) {
		if (obj.anchor) {
		    // obj is a plane or line
		    var P = this.elements.slice();
		    var C = obj.pointClosestTo(P).elements;
		    return Vector.create([C[0] + (C[0] - P[0]), C[1] + (C[1] - P[1]), C[2] + (C[2] - (P[2] || 0))]);
		} else {
		    // obj is a point
		    var Q = obj.elements || obj;
		    if (this.elements.length != Q.length) { return null; }
		    return this.map(function(x, i) { return Q[i - 1] + (Q[i - 1] - x); });
		}
	    },

	    // Utility to make sure vectors are 3D. If they are 2D, a zero z-component is added
	    to3D: function() {
		var V = this.dup();
		switch (V.elements.length) {
		case 3: break;
		case 2: V.elements.push(0); break;
		default: return null;
		}
		return V;
	    },

	    // Returns a string representation of the vector
	    inspect: function() {
		return '[' + this.elements.join(', ') + ']';
	    },

	    // Set vector's elements from an array
	    setElements: function(els) {
		this.elements = (els.elements || els).slice();
		return this;
	    }
	};

	// Constructor function
	Vector.create = function(elements) {
	    var V = new Vector();
	    return V.setElements(elements);
	};

	// i, j, k unit vectors
	Vector.i = Vector.create([1, 0, 0]);
	Vector.j = Vector.create([0, 1, 0]);
	Vector.k = Vector.create([0, 0, 1]);

	// Random vector of size n
	Vector.Random = function(n) {
	    var elements = [];
	    while (n--) { elements.push(Math.random()); }
	    return Vector.create(elements);
	};

	Vector.Fill = function(n, v) {
	    var elements = [];
	    while (n--) { elements.push(v); }
	    return Vector.create(elements);
	};

	// Vector filled with zeros
	Vector.Zero = function(n) {
	    return Vector.Fill(n, 0);
	};

	Vector.One = function(n) {
	    return Vector.Fill(n, 1);
	};

	Vector.log = function(v) {
	    return v.map(function(x) {
		return Math.log(x);
	    });
	};

	module.exports = Vector;


/***/ },
/* 73 */
/***/ function(module, exports) {

	// Copyright (c) 2011, Chris Umbel, James Coglan
	// This file is required in order for any other classes to work. Some Vector methods work with the
	// other Sylvester classes and are useless unless they are included. Other classes such as Line and
	// Plane will not function at all without Vector being loaded first.           

	Math.sign = function(x) {
	    return x < 0 ? -1: 1;
	}
	                                              
	var Sylvester = {
	    precision: 1e-6,
	    approxPrecision: 1e-5
	};

	module.exports = Sylvester;


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright (c) 2011, Chris Umbel, James Coglan
	// Matrix class - depends on Vector.

	var fs = __webpack_require__(66);
	var Sylvester = __webpack_require__(73);
	var Vector = __webpack_require__(72);

	// augment a matrix M with identity rows/cols
	function identSize(M, m, n, k) {
	    var e = M.elements;
	    var i = k - 1;

	    while(i--) {
		var row = [];
		
		for(var j = 0; j < n; j++)
		    row.push(j == i ? 1 : 0);
		
	        e.unshift(row);
	    }
	    
	    for(var i = k - 1; i < m; i++) {
	        while(e[i].length < n)
	            e[i].unshift(0);
	    }

	    return $M(e);
	}

	function pca(X) {
	    var Sigma = X.transpose().x(X).x(1 / X.rows());
	    var svd = Sigma.svd();
	    return {U: svd.U, S: svd.S};
	}

	// singular value decomposition in pure javascript
	function svdJs() {
	    var A = this;
	    var V = Matrix.I(A.rows());
	    var S = A.transpose();
	    var U = Matrix.I(A.cols());
	    var err = Number.MAX_VALUE;
	    var i = 0;
	    var maxLoop = 100;

	    while(err > 2.2737e-13 && i < maxLoop) {
	        var qr = S.transpose().qrJs();
	        S = qr.R;
	        V = V.x(qr.Q);
	        qr = S.transpose().qrJs();
	        U = U.x(qr.Q);
	        S = qr.R;

	        var e = S.triu(1).unroll().norm();
	        var f = S.diagonal().norm();

	        if(f == 0)
	            f = 1;

	        err = e / f;

	        i++;
	    }

	    var ss = S.diagonal();
	    var s = [];

	    for(var i = 1; i <= ss.cols(); i++) {
	        var ssn = ss.e(i);
	        s.push(Math.abs(ssn));

	        if(ssn < 0) {
	            for(var j = 0; j < U.rows(); j++) {
	                V.elements[j][i - 1] = -(V.elements[j][i - 1]);
	            }
	        }
	    }

	    return {U: U, S: $V(s).toDiagonalMatrix(), V: V};
	}

	// singular value decomposition using LAPACK
	function svdPack() {
	    var result = lapack.sgesvd('A', 'A', this.elements);

	    return {
	        U: $M(result.U),
	        S: $M(result.S).column(1).toDiagonalMatrix(),
		V: $M(result.VT).transpose()
	    };
	}

	// QR decomposition in pure javascript
	function qrJs() {
	    var m = this.rows();
	    var n = this.cols();
	    var Q = Matrix.I(m);
	    var A = this;
	    
	    for(var k = 1; k < Math.min(m, n); k++) {
		var ak = A.slice(k, 0, k, k).col(1);
		var oneZero = [1];
		
		while(oneZero.length <=  m - k)
		    oneZero.push(0);
		
		oneZero = $V(oneZero);
		var vk = ak.add(oneZero.x(ak.norm() * Math.sign(ak.e(1))));
		var Vk = $M(vk);
		var Hk = Matrix.I(m - k + 1).subtract(Vk.x(2).x(Vk.transpose()).div(Vk.transpose().x(Vk).e(1, 1)));
		var Qk = identSize(Hk, m, n, k);
		A = Qk.x(A);
		// slow way to compute Q
		Q = Q.x(Qk);
	    }
	    
	    return {Q: Q, R: A};
	}

	// QR decomposition using LAPACK
	function qrPack() {
	    var qr = lapack.qr(this.elements);

	    return {
		Q: $M(qr.Q),
		R: $M(qr.R)
	    };
	}

	function Matrix() {}
	Matrix.prototype = {
	    // solve a system of linear equations (work in progress)
	    solve: function(b) {
		var lu = this.lu();
		b = lu.P.x(b);
		var y = lu.L.forwardSubstitute(b);
		var x = lu.U.backSubstitute(y);
		return lu.P.x(x);
		//return this.inv().x(b);
	    },

	    // project a matrix onto a lower dim
	    pcaProject: function(k, U) {
		var U = U || pca(this).U;
		var Ureduce= U.slice(1, U.rows(), 1, k);
		return {Z: this.x(Ureduce), U: U};
	    },

	    // recover a matrix to a higher dimension
	    pcaRecover: function(U) {
		var k = this.cols();
		var Ureduce = U.slice(1, U.rows(), 1, k);
		return this.x(Ureduce.transpose());
	    },    

	    // grab the upper triangular part of the matrix
	    triu: function(k) {
		if(!k)
		    k = 0;
		
		return this.map(function(x, i, j) {
		    return j - i >= k ? x : 0;
		});
	    },

	    // unroll a matrix into a vector
	    unroll: function() {
		var v = [];
		
		for(var i = 1; i <= this.cols(); i++) {
		    for(var j = 1; j <= this.rows(); j++) {
			v.push(this.e(j, i));
		    }
		}

		return $V(v);
	    },

	    // return a sub-block of the matrix
	    slice: function(startRow, endRow, startCol, endCol) {
		var x = [];
		
		if(endRow == 0)
		    endRow = this.rows();
		
		if(endCol == 0)
		    endCol = this.cols();

		for(i = startRow; i <= endRow; i++) {
		    var row = [];

		    for(j = startCol; j <= endCol; j++) {
			row.push(this.e(i, j));
		    }

		    x.push(row);
		}

		return $M(x);
	    },

	    // Returns element (i,j) of the matrix
	    e: function(i,j) {
		if (i < 1 || i > this.elements.length || j < 1 || j > this.elements[0].length) { return null; }
		return this.elements[i - 1][j - 1];
	    },

	    // Returns row k of the matrix as a vector
	    row: function(i) {
		if (i > this.elements.length) { return null; }
		return $V(this.elements[i - 1]);
	    },

	    // Returns column k of the matrix as a vector
	    col: function(j) {
		if (j > this.elements[0].length) { return null; }
		var col = [], n = this.elements.length;
		for (var i = 0; i < n; i++) { col.push(this.elements[i][j - 1]); }
		return $V(col);
	    },

	    // Returns the number of rows/columns the matrix has
	    dimensions: function() {
		return {rows: this.elements.length, cols: this.elements[0].length};
	    },

	    // Returns the number of rows in the matrix
	    rows: function() {
		return this.elements.length;
	    },

	    // Returns the number of columns in the matrix
	    cols: function() {
		return this.elements[0].length;
	    },

	    approxEql: function(matrix) {
		return this.eql(matrix, Sylvester.approxPrecision);
	    },

	    // Returns true iff the matrix is equal to the argument. You can supply
	    // a vector as the argument, in which case the receiver must be a
	    // one-column matrix equal to the vector.
	    eql: function(matrix, precision) {
		var M = matrix.elements || matrix;
		if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
		if (this.elements.length != M.length ||
	            this.elements[0].length != M[0].length) { return false; }
		var i = this.elements.length, nj = this.elements[0].length, j;
		while (i--) { j = nj;
			      while (j--) {
				  if (Math.abs(this.elements[i][j] - M[i][j]) > (precision || Sylvester.precision)) { return false; }
			      }
			    }
		return true;
	    },

	    // Returns a copy of the matrix
	    dup: function() {
		return Matrix.create(this.elements);
	    },

	    // Maps the matrix to another matrix (of the same dimensions) according to the given function
	    map: function(fn) {
	    var els = [], i = this.elements.length, nj = this.elements[0].length, j;
		while (i--) { j = nj;
			      els[i] = [];
			      while (j--) {
				  els[i][j] = fn(this.elements[i][j], i + 1, j + 1);
			      }
			    }
		return Matrix.create(els);
	    },

	    // Returns true iff the argument has the same dimensions as the matrix
	    isSameSizeAs: function(matrix) {
		var M = matrix.elements || matrix;
		if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
		return (this.elements.length == M.length &&
			this.elements[0].length == M[0].length);
	    },

	    // Returns the result of adding the argument to the matrix
	    add: function(matrix) {
		if(typeof(matrix) == 'number') {
		    return this.map(function(x, i, j) { return x + matrix});
		} else {
		    var M = matrix.elements || matrix;
		    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
		    if (!this.isSameSizeAs(M)) { return null; }
		    return this.map(function(x, i, j) { return x + M[i - 1][j - 1]; });
		}
	    },

	    // Returns the result of subtracting the argument from the matrix
	    subtract: function(matrix) {
		if(typeof(matrix) == 'number') {
		    return this.map(function(x, i, j) { return x - matrix});
		} else {
		    var M = matrix.elements || matrix;
		    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
		    if (!this.isSameSizeAs(M)) { return null; }
		    return this.map(function(x, i, j) { return x - M[i - 1][j - 1]; });
		}
	    },

	    // Returns true iff the matrix can multiply the argument from the left
	    canMultiplyFromLeft: function(matrix) {
		var M = matrix.elements || matrix;
		if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
		// this.columns should equal matrix.rows
		return (this.elements[0].length == M.length);
	    },

	    // Returns the result of a multiplication-style operation the matrix from the right by the argument.
	    // If the argument is a scalar then just operate on all the elements. If the argument is
	    // a vector, a vector is returned, which saves you having to remember calling
	    // col(1) on the result.
	    mulOp: function(matrix, op) {
		if (!matrix.elements) {
		    return this.map(function(x) { return op(x, matrix); });
		}

		var returnVector = matrix.modulus ? true : false;
		var M = matrix.elements || matrix;
		if (typeof(M[0][0]) == 'undefined') 
		    M = Matrix.create(M).elements;
		if (!this.canMultiplyFromLeft(M)) 
		    return null; 
		var e = this.elements, rowThis, rowElem, elements = [],
	        sum, m = e.length, n = M[0].length, o = e[0].length, i = m, j, k;

		while (i--) {
	            rowElem = [];
	            rowThis = e[i];
	            j = n;

	            while (j--) {
			sum = 0;
			k = o;

			while (k--) {
	                    sum += op(rowThis[k], M[k][j]);
			}

			rowElem[j] = sum;
	            }

	            elements[i] = rowElem;
		}

		var M = Matrix.create(elements);
		return returnVector ? M.col(1) : M;
	    },

	    // Returns the result of dividing the matrix from the right by the argument.
	    // If the argument is a scalar then just divide all the elements. If the argument is
	    // a vector, a vector is returned, which saves you having to remember calling
	    // col(1) on the result.
	    div: function(matrix) {
		return this.mulOp(matrix, function(x, y) { return x / y});
	    },

	    // Returns the result of multiplying the matrix from the right by the argument.
	    // If the argument is a scalar then just multiply all the elements. If the argument is
	    // a vector, a vector is returned, which saves you having to remember calling
	    // col(1) on the result.
	    multiply: function(matrix) {
		return this.mulOp(matrix, function(x, y) { return x * y});
	    },

	    x: function(matrix) { return this.multiply(matrix); },

	    elementMultiply: function(v) {
	        return this.map(function(k, i, j) {
	            return v.e(i, j) * k;
	        });
	    },

	    // sum all elements in the matrix
	    sum: function() {
	        var sum = 0;

	        this.map(function(x) { sum += x;});

	        return sum;
	    },

	    // Returns a Vector of each colum averaged.
	    mean: function() {
	      var dim = this.dimensions();
	      var r = [];
	      for (var i = 1; i <= dim.cols; i++) {
	        r.push(this.col(i).sum() / dim.rows);
	      }
	      return $V(r);
	    },

	    column: function(n) {
		return this.col(n);
	    },

	    // element-wise log
	    log: function() {
		return this.map(function(x) { return Math.log(x); });
	    },

	    // Returns a submatrix taken from the matrix
	    // Argument order is: start row, start col, nrows, ncols
	    // Element selection wraps if the required index is outside the matrix's bounds, so you could
	    // use this to perform row/column cycling or copy-augmenting.
	    minor: function(a, b, c, d) {
		var elements = [], ni = c, i, nj, j;
		var rows = this.elements.length, cols = this.elements[0].length;
		while (ni--) {
		    i = c - ni - 1;
		    elements[i] = [];
		    nj = d;
		    while (nj--) {
			j = d - nj - 1;
			elements[i][j] = this.elements[(a + i - 1) % rows][(b + j - 1) % cols];
		    }
		}
		return Matrix.create(elements);
	    },

	    // Returns the transpose of the matrix
	    transpose: function() {
	    var rows = this.elements.length, i, cols = this.elements[0].length, j;
		var elements = [], i = cols;
		while (i--) {
		    j = rows;
		    elements[i] = [];
		    while (j--) {
			elements[i][j] = this.elements[j][i];
		    }
		}
		return Matrix.create(elements);
	    },

	    // Returns true iff the matrix is square
	    isSquare: function() {
		return (this.elements.length == this.elements[0].length);
	    },

	    // Returns the (absolute) largest element of the matrix
	    max: function() {
		var m = 0, i = this.elements.length, nj = this.elements[0].length, j;
		while (i--) {
		    j = nj;
		    while (j--) {
			if (Math.abs(this.elements[i][j]) > Math.abs(m)) { m = this.elements[i][j]; }
		    }
		}
		return m;
	    },

	    // Returns the indeces of the first match found by reading row-by-row from left to right
	    indexOf: function(x) {
		var index = null, ni = this.elements.length, i, nj = this.elements[0].length, j;
		for (i = 0; i < ni; i++) {
		    for (j = 0; j < nj; j++) {
			if (this.elements[i][j] == x) { return {i: i + 1, j: j + 1}; }
		    }
		}
		return null;
	    },

	    // If the matrix is square, returns the diagonal elements as a vector.
	    // Otherwise, returns null.
	    diagonal: function() {
		if (!this.isSquare) { return null; }
		var els = [], n = this.elements.length;
		for (var i = 0; i < n; i++) {
		    els.push(this.elements[i][i]);
		}
		return $V(els);
	    },

	    // Make the matrix upper (right) triangular by Gaussian elimination.
	    // This method only adds multiples of rows to other rows. No rows are
	    // scaled up or switched, and the determinant is preserved.
	    toRightTriangular: function() {
		var M = this.dup(), els;
		var n = this.elements.length, i, j, np = this.elements[0].length, p;
		for (i = 0; i < n; i++) {
		    if (M.elements[i][i] == 0) {
			for (j = i + 1; j < n; j++) {
			    if (M.elements[j][i] != 0) {
				els = [];
				for (p = 0; p < np; p++) { els.push(M.elements[i][p] + M.elements[j][p]); }
				M.elements[i] = els;
				break;
			    }
			}
		    }
		    if (M.elements[i][i] != 0) {
			for (j = i + 1; j < n; j++) {
			    var multiplier = M.elements[j][i] / M.elements[i][i];
			    els = [];
			    for (p = 0; p < np; p++) {
				// Elements with column numbers up to an including the number
				// of the row that we're subtracting can safely be set straight to
				// zero, since that's the point of this routine and it avoids having
				// to loop over and correct rounding errors later
				els.push(p <= i ? 0 : M.elements[j][p] - M.elements[i][p] * multiplier);
			    }
			    M.elements[j] = els;
			}
		    }
		}
		return M;
	    },

	    toUpperTriangular: function() { return this.toRightTriangular(); },

	    // Returns the determinant for square matrices
	    determinant: function() {
		if (!this.isSquare()) { return null; }
		if (this.cols == 1 && this.rows == 1) { return this.row(1); }
		if (this.cols == 0 && this.rows == 0) { return 1; }
		var M = this.toRightTriangular();
		var det = M.elements[0][0], n = M.elements.length;
		for (var i = 1; i < n; i++) {
		    det = det * M.elements[i][i];
		}
		return det;
	    },
	    det: function() { return this.determinant(); },

	    // Returns true iff the matrix is singular
	    isSingular: function() {
		return (this.isSquare() && this.determinant() === 0);
	    },

	    // Returns the trace for square matrices
	    trace: function() {
		if (!this.isSquare()) { return null; }
		var tr = this.elements[0][0], n = this.elements.length;
		for (var i = 1; i < n; i++) {
		    tr += this.elements[i][i];
		}
		return tr;
	    },

	    tr: function() { return this.trace(); },

	    // Returns the rank of the matrix
	    rank: function() {
		var M = this.toRightTriangular(), rank = 0;
		var i = this.elements.length, nj = this.elements[0].length, j;
		while (i--) {
		    j = nj;
		    while (j--) {
			if (Math.abs(M.elements[i][j]) > Sylvester.precision) { rank++; break; }
		    }
		}
		return rank;
	    },

	    rk: function() { return this.rank(); },

	    // Returns the result of attaching the given argument to the right-hand side of the matrix
	    augment: function(matrix) {
		var M = matrix.elements || matrix;
		if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
		var T = this.dup(), cols = T.elements[0].length;
		var i = T.elements.length, nj = M[0].length, j;
		if (i != M.length) { return null; }
		while (i--) {
		    j = nj;
		    while (j--) {
			T.elements[i][cols + j] = M[i][j];
		    }
		}
		return T;
	    },

	    // Returns the inverse (if one exists) using Gauss-Jordan
	    inverse: function() {
		if (!this.isSquare() || this.isSingular()) { return null; }
		var n = this.elements.length, i = n, j;
		var M = this.augment(Matrix.I(n)).toRightTriangular();
		var np = M.elements[0].length, p, els, divisor;
		var inverse_elements = [], new_element;
		// Matrix is non-singular so there will be no zeros on the diagonal
		// Cycle through rows from last to first
		while (i--) {
		    // First, normalise diagonal elements to 1
		    els = [];
		    inverse_elements[i] = [];
		    divisor = M.elements[i][i];
		    for (p = 0; p < np; p++) {
	        new_element = M.elements[i][p] / divisor;
			els.push(new_element);
			// Shuffle off the current row of the right hand side into the results
			// array as it will not be modified by later runs through this loop
			if (p >= n) { inverse_elements[i].push(new_element); }
		    }
		    M.elements[i] = els;
		    // Then, subtract this row from those above it to
		    // give the identity matrix on the left hand side
		    j = i;
		    while (j--) {
			els = [];
			for (p = 0; p < np; p++) {
			    els.push(M.elements[j][p] - M.elements[i][p] * M.elements[j][i]);
			}
			M.elements[j] = els;
		    }
		}
		return Matrix.create(inverse_elements);
	    },

	    inv: function() { return this.inverse(); },

	    // Returns the result of rounding all the elements
	    round: function() {
		return this.map(function(x) { return Math.round(x); });
	    },

	    // Returns a copy of the matrix with elements set to the given value if they
	    // differ from it by less than Sylvester.precision
	    snapTo: function(x) {
		return this.map(function(p) {
		    return (Math.abs(p - x) <= Sylvester.precision) ? x : p;
		});
	    },

	    // Returns a string representation of the matrix
	    inspect: function() {
		var matrix_rows = [];
		var n = this.elements.length;
		for (var i = 0; i < n; i++) {
		    matrix_rows.push($V(this.elements[i]).inspect());
		}
		return matrix_rows.join('\n');
	    },

	    // Returns a array representation of the matrix
	    toArray: function() {
	    	var matrix_rows = [];
	    	var n = this.elements.length;
	    	for (var i = 0; i < n; i++) {
	        matrix_rows.push(this.elements[i]);
	    	}
	      return matrix_rows;
	    },


	    // Set the matrix's elements from an array. If the argument passed
	    // is a vector, the resulting matrix will be a single column.
	    setElements: function(els) {
		var i, j, elements = els.elements || els;
		if (typeof(elements[0][0]) != 'undefined') {
		    i = elements.length;
		    this.elements = [];
		    while (i--) {
			j = elements[i].length;
			this.elements[i] = [];
			while (j--) {
			    this.elements[i][j] = elements[i][j];
			}
		    }
		    return this;
		}
		var n = elements.length;
		this.elements = [];
		for (i = 0; i < n; i++) {
		    this.elements.push([elements[i]]);
		}
		return this;
	    },

	    // return the indexes of the columns with the largest value
	    // for each row
	    maxColumnIndexes: function() {
		var maxes = [];

		for(var i = 1; i <= this.rows(); i++) {
		    var max = null;
		    var maxIndex = -1;

		    for(var j = 1; j <= this.cols(); j++) {
			if(max === null || this.e(i, j) > max) {
			    max = this.e(i, j);
			    maxIndex = j;
			}
		    }

		    maxes.push(maxIndex);
		}

		return $V(maxes);
	    },

	    // return the largest values in each row
	    maxColumns: function() {
		var maxes = [];

		for(var i = 1; i <= this.rows(); i++) {
		    var max = null;

		    for(var j = 1; j <= this.cols(); j++) {
			if(max === null || this.e(i, j) > max) {
			    max = this.e(i, j);
			}
		    }

		    maxes.push(max);
		}

		return $V(maxes);
	    },

	    // return the indexes of the columns with the smallest values
	    // for each row
	    minColumnIndexes: function() {
		var mins = [];

		for(var i = 1; i <= this.rows(); i++) {
		    var min = null;
		    var minIndex = -1;

		    for(var j = 1; j <= this.cols(); j++) {
			if(min === null || this.e(i, j) < min) {
			    min = this.e(i, j);
			    minIndex = j;
			}
		    }

		    mins.push(minIndex);
		}

		return $V(mins);
	    },

	    // return the smallest values in each row
	    minColumns: function() {
		var mins = [];

		for(var i = 1; i <= this.rows(); i++) {
		    var min = null;

		    for(var j = 1; j <= this.cols(); j++) {
			if(min === null || this.e(i, j) < min) {
			    min = this.e(i, j);
			}
		    }

		    mins.push(min);
		}

		return $V(mins);
	    },
	    
	    // perorm a partial pivot on the matrix. essentially move the largest
	    // row below-or-including the pivot and replace the pivot's row with it.
	    // a pivot matrix is returned so multiplication can perform the transform.
	    partialPivot: function(k, j, P, A, L) {
		var maxIndex = 0;
		var maxValue = 0;

		for(var i = k; i <= A.rows(); i++) {
		    if(Math.abs(A.e(i, j)) > maxValue) {
			maxValue = Math.abs(A.e(k, j));
			maxIndex = i;
		    }
		}

		if(maxIndex != k) {
		    var tmp = A.elements[k - 1];
		    A.elements[k - 1] = A.elements[maxIndex - 1];
		    A.elements[maxIndex - 1] = tmp;
		    
		    P.elements[k - 1][k - 1] = 0;
		    P.elements[k - 1][maxIndex - 1] = 1;
		    P.elements[maxIndex - 1][maxIndex - 1] = 0;
		    P.elements[maxIndex - 1][k - 1] = 1;
		}
		
		return P;
	    },

	    // solve lower-triangular matrix * x = b via forward substitution
	    forwardSubstitute: function(b) {
		var xa = [];

		for(var i = 1; i <= this.rows(); i++) {
		    var w = 0;

		    for(var j = 1; j < i; j++) {
			w += this.e(i, j) * xa[j - 1];
		    }

		    xa.push((b.e(i) - w) / this.e(i, i));
		}

		return $V(xa);
	    },

	    // solve an upper-triangular matrix * x = b via back substitution
	    backSubstitute: function(b) {
		var xa = [];

		for(var i = this.rows(); i > 0; i--) {
		    var w = 0;

		    for(var j = this.cols(); j > i; j--) {
			w += this.e(i, j) * xa[this.rows() - j];
		    }

		    xa.push((b.e(i) - w) / this.e(i, i));
		}

		return $V(xa.reverse());
	    },
	    
	    luPack: luPack,
	    luJs: luJs,
	    svdJs: svdJs,
	    svdPack: svdPack,
	    qrJs: qrJs,
	    qrPack: qrPack
	};

	// LU factorization from LAPACK
	function luPack() {
	    var lu = lapack.lu(this.elements);
	    return {
		L: $M(lu.L),
		U: $M(lu.U),
		P: $M(lu.P)
		// don't pass back IPIV
	    };
	}

	var tolerance =  1.4901e-08;

	// pure Javascript LU factorization
	function luJs() {
	    var A = this.dup();
	    var L = Matrix.I(A.rows());
	    var P = Matrix.I(A.rows());
	    var U = Matrix.Zeros(A.rows(), A.cols());
	    var p = 1;

	    for(var k = 1; k <= Math.min(A.cols(), A.rows()); k++) {
		P = A.partialPivot(k, p, P, A, L);
		
		for(var i = k + 1; i <= A.rows(); i++) {
		    var l = A.e(i, p) / A.e(k, p);
		    L.elements[i - 1][k - 1] = l;
		    
		    for(var j = k + 1 ; j <= A.cols(); j++) {
			A.elements[i - 1][j - 1] -= A.e(k, j) * l;
		    }
		}
		
		for(var j = k; j <= A.cols(); j++) {
		    U.elements[k - 1][j - 1] = A.e(k, j);
		}

		if(p < A.cols())
		    p++;
	    }    
	    
	    return {L: L, U: U, P: P};
	}

	function getLapack() {
	    try {
		return __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"lapack\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    } catch(e) {}
	}

	var lapack;

	// if node-lapack is installed use the fast, native fortran routines
	if(lapack = getLapack()) {
	    Matrix.prototype.svd = svdPack;
	    Matrix.prototype.qr = qrPack;
	    Matrix.prototype.lu = luPack;
	} else {
	    // otherwise use the slower pure Javascript versions
	    Matrix.prototype.svd = svdJs;
	    Matrix.prototype.qr = qrJs;
	    Matrix.prototype.lu = luJs;
	}

	// Constructor function
	Matrix.create = function(aElements, ignoreLapack) {
	    var M = new Matrix().setElements(aElements);
	    return M;
	};

	// Identity matrix of size n
	Matrix.I = function(n) {
	    var els = [], i = n, j;
	    while (i--) {
		j = n;
		els[i] = [];
		while (j--) {
		    els[i][j] = (i == j) ? 1 : 0;
		}
	    }
	    return Matrix.create(els);
	};

	Matrix.loadFile = function(file) {
	    var contents = fs.readFileSync(file, 'utf-8');
	    var matrix = [];

	    var rowArray = contents.split('\n');
	    for (var i = 0; i < rowArray.length; i++) {
		var d = rowArray[i].split(',');
		if (d.length > 1) {
		    matrix.push(d);
		}
	    }

	    var M = new Matrix();
	    return M.setElements(matrix);
	};

	// Diagonal matrix - all off-diagonal elements are zero
	Matrix.Diagonal = function(elements) {
	    var i = elements.length;
	    var M = Matrix.I(i);
	    while (i--) {
		M.elements[i][i] = elements[i];
	    }
	    return M;
	};

	// Rotation matrix about some axis. If no axis is
	// supplied, assume we're after a 2D transform
	Matrix.Rotation = function(theta, a) {
	    if (!a) {
		return Matrix.create([
		    [Math.cos(theta), -Math.sin(theta)],
		    [Math.sin(theta), Math.cos(theta)]
		]);
	    }
	    var axis = a.dup();
	    if (axis.elements.length != 3) { return null; }
	    var mod = axis.modulus();
	    var x = axis.elements[0] / mod, y = axis.elements[1] / mod, z = axis.elements[2] / mod;
	    var s = Math.sin(theta), c = Math.cos(theta), t = 1 - c;
	    // Formula derived here: http://www.gamedev.net/reference/articles/article1199.asp
	    // That proof rotates the co-ordinate system so theta
	    // becomes -theta and sin becomes -sin here.
	    return Matrix.create([
		[t * x * x + c, t * x * y - s * z, t * x * z + s * y],
		[t * x * y + s * z, t * y * y + c, t * y * z - s * x],
		[t * x * z - s * y, t * y * z + s * x, t * z * z + c]
	    ]);
	};

	// Special case rotations
	Matrix.RotationX = function(t) {
	    var c = Math.cos(t), s = Math.sin(t);
	    return Matrix.create([
		[1, 0, 0],
		[0, c, -s],
		[0, s, c]
	    ]);
	};

	Matrix.RotationY = function(t) {
	    var c = Math.cos(t), s = Math.sin(t);
	    return Matrix.create([
		[c, 0, s],
		[0, 1, 0],
		[-s, 0, c]
	    ]);
	};

	Matrix.RotationZ = function(t) {
	    var c = Math.cos(t), s = Math.sin(t);
	    return Matrix.create([
		[c, -s, 0],
		[s, c, 0],
		[0, 0, 1]
	    ]);
	};

	// Random matrix of n rows, m columns
	Matrix.Random = function(n, m) {
	    if (arguments.length === 1) m = n;
	    return Matrix.Zero(n, m).map(
		function() { return Math.random(); }
	  );
	};

	Matrix.Fill = function(n, m, v) {
	    if (arguments.length === 2) {
		v = m;
		m = n;
	    }

	    var els = [], i = n, j;

	    while (i--) {
		j = m;
		els[i] = [];

		while (j--) {
		    els[i][j] = v;
		}
	    }

	    return Matrix.create(els);
	};

	// Matrix filled with zeros
	Matrix.Zero = function(n, m) {
	    return Matrix.Fill(n, m, 0);
	};

	// Matrix filled with zeros
	Matrix.Zeros = function(n, m) {
	    return Matrix.Zero(n, m);
	};

	// Matrix filled with ones
	Matrix.One = function(n, m) {
	    return Matrix.Fill(n, m, 1);
	};

	// Matrix filled with ones
	Matrix.Ones = function(n, m) {
	    return Matrix.One(n, m);
	};

	module.exports = Matrix;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright (c) 2011, Chris Umbel, James Coglan
	var Vector = __webpack_require__(72);
	var Matrix = __webpack_require__(74);
	var Plane = __webpack_require__(76);
	var Sylvester = __webpack_require__(73);

	// Line class - depends on Vector, and some methods require Matrix and Plane.

	function Line() {}
	Line.prototype = {

	  // Returns true if the argument occupies the same space as the line
	  eql: function(line) {
	    return (this.isParallelTo(line) && this.contains(line.anchor));
	  },

	  // Returns a copy of the line
	  dup: function() {
	    return Line.create(this.anchor, this.direction);
	  },

	  // Returns the result of translating the line by the given vector/array
	  translate: function(vector) {
	    var V = vector.elements || vector;
	    return Line.create([
	      this.anchor.elements[0] + V[0],
	      this.anchor.elements[1] + V[1],
	      this.anchor.elements[2] + (V[2] || 0)
	    ], this.direction);
	  },

	  // Returns true if the line is parallel to the argument. Here, 'parallel to'
	  // means that the argument's direction is either parallel or antiparallel to
	  // the line's own direction. A line is parallel to a plane if the two do not
	  // have a unique intersection.
	  isParallelTo: function(obj) {
	    if (obj.normal || (obj.start && obj.end)) { return obj.isParallelTo(this); }
	    var theta = this.direction.angleFrom(obj.direction);
	    return (Math.abs(theta) <= Sylvester.precision || Math.abs(theta - Math.PI) <= Sylvester.precision);
	  },

	  // Returns the line's perpendicular distance from the argument,
	  // which can be a point, a line or a plane
	  distanceFrom: function(obj) {
	    if (obj.normal || (obj.start && obj.end)) { return obj.distanceFrom(this); }
	    if (obj.direction) {
	      // obj is a line
	      if (this.isParallelTo(obj)) { return this.distanceFrom(obj.anchor); }
	      var N = this.direction.cross(obj.direction).toUnitVector().elements;
	      var A = this.anchor.elements, B = obj.anchor.elements;
	      return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);
	    } else {
	      // obj is a point
	      var P = obj.elements || obj;
	      var A = this.anchor.elements, D = this.direction.elements;
	      var PA1 = P[0] - A[0], PA2 = P[1] - A[1], PA3 = (P[2] || 0) - A[2];
	      var modPA = Math.sqrt(PA1*PA1 + PA2*PA2 + PA3*PA3);
	      if (modPA === 0) return 0;
	      // Assumes direction vector is normalized
	      var cosTheta = (PA1 * D[0] + PA2 * D[1] + PA3 * D[2]) / modPA;
	      var sin2 = 1 - cosTheta*cosTheta;
	      return Math.abs(modPA * Math.sqrt(sin2 < 0 ? 0 : sin2));
	    }
	  },

	  // Returns true iff the argument is a point on the line, or if the argument
	  // is a line segment lying within the receiver
	  contains: function(obj) {
	    if (obj.start && obj.end) { return this.contains(obj.start) && this.contains(obj.end); }
	    var dist = this.distanceFrom(obj);
	    return (dist !== null && dist <= Sylvester.precision);
	  },

	  // Returns the distance from the anchor of the given point. Negative values are
	  // returned for points that are in the opposite direction to the line's direction from
	  // the line's anchor point.
	  positionOf: function(point) {
	    if (!this.contains(point)) { return null; }
	    var P = point.elements || point;
	    var A = this.anchor.elements, D = this.direction.elements;
	    return (P[0] - A[0]) * D[0] + (P[1] - A[1]) * D[1] + ((P[2] || 0) - A[2]) * D[2];
	  },

	  // Returns true iff the line lies in the given plane
	  liesIn: function(plane) {
	    return plane.contains(this);
	  },

	  // Returns true iff the line has a unique point of intersection with the argument
	  intersects: function(obj) {
	    if (obj.normal) { return obj.intersects(this); }
	    return (!this.isParallelTo(obj) && this.distanceFrom(obj) <= Sylvester.precision);
	  },

	  // Returns the unique intersection point with the argument, if one exists
	  intersectionWith: function(obj) {
	    if (obj.normal || (obj.start && obj.end)) { return obj.intersectionWith(this); }
	    if (!this.intersects(obj)) { return null; }
	    var P = this.anchor.elements, X = this.direction.elements,
	        Q = obj.anchor.elements, Y = obj.direction.elements;
	    var X1 = X[0], X2 = X[1], X3 = X[2], Y1 = Y[0], Y2 = Y[1], Y3 = Y[2];
	    var PsubQ1 = P[0] - Q[0], PsubQ2 = P[1] - Q[1], PsubQ3 = P[2] - Q[2];
	    var XdotQsubP = - X1*PsubQ1 - X2*PsubQ2 - X3*PsubQ3;
	    var YdotPsubQ = Y1*PsubQ1 + Y2*PsubQ2 + Y3*PsubQ3;
	    var XdotX = X1*X1 + X2*X2 + X3*X3;
	    var YdotY = Y1*Y1 + Y2*Y2 + Y3*Y3;
	    var XdotY = X1*Y1 + X2*Y2 + X3*Y3;
	    var k = (XdotQsubP * YdotY / XdotX + XdotY * YdotPsubQ) / (YdotY - XdotY * XdotY);
	    return Vector.create([P[0] + k*X1, P[1] + k*X2, P[2] + k*X3]);
	  },

	  // Returns the point on the line that is closest to the given point or line/line segment
	  pointClosestTo: function(obj) {
	    if (obj.start && obj.end) {
	      // obj is a line segment
	      var P = obj.pointClosestTo(this);
	      return (P === null) ? null : this.pointClosestTo(P);
	    } else if (obj.direction) {
	      // obj is a line
	      if (this.intersects(obj)) { return this.intersectionWith(obj); }
	      if (this.isParallelTo(obj)) { return null; }
	      var D = this.direction.elements, E = obj.direction.elements;
	      var D1 = D[0], D2 = D[1], D3 = D[2], E1 = E[0], E2 = E[1], E3 = E[2];
	      // Create plane containing obj and the shared normal and intersect this with it
	      // Thank you: http://www.cgafaq.info/wiki/Line-line_distance
	      var x = (D3 * E1 - D1 * E3), y = (D1 * E2 - D2 * E1), z = (D2 * E3 - D3 * E2);
	      var N = [x * E3 - y * E2, y * E1 - z * E3, z * E2 - x * E1];
	      var P = Plane.create(obj.anchor, N);
	      return P.intersectionWith(this);
	    } else {
	      // obj is a point
	      var P = obj.elements || obj;
	      if (this.contains(P)) { return Vector.create(P); }
	      var A = this.anchor.elements, D = this.direction.elements;
	      var D1 = D[0], D2 = D[1], D3 = D[2], A1 = A[0], A2 = A[1], A3 = A[2];
	      var x = D1 * (P[1]-A2) - D2 * (P[0]-A1), y = D2 * ((P[2] || 0) - A3) - D3 * (P[1]-A2),
	          z = D3 * (P[0]-A1) - D1 * ((P[2] || 0) - A3);
	      var V = Vector.create([D2 * x - D3 * z, D3 * y - D1 * x, D1 * z - D2 * y]);
	      var k = this.distanceFrom(P) / V.modulus();
	      return Vector.create([
	        P[0] + V.elements[0] * k,
	        P[1] + V.elements[1] * k,
	        (P[2] || 0) + V.elements[2] * k
	      ]);
	    }
	  },

	  // Returns a copy of the line rotated by t radians about the given line. Works by
	  // finding the argument's closest point to this line's anchor point (call this C) and
	  // rotating the anchor about C. Also rotates the line's direction about the argument's.
	  // Be careful with this - the rotation axis' direction affects the outcome!
	  rotate: function(t, line) {
	    // If we're working in 2D
	    if (typeof(line.direction) == 'undefined') { line = Line.create(line.to3D(), Vector.k); }
	    var R = Matrix.Rotation(t, line.direction).elements;
	    var C = line.pointClosestTo(this.anchor).elements;
	    var A = this.anchor.elements, D = this.direction.elements;
	    var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];
	    var x = A1 - C1, y = A2 - C2, z = A3 - C3;
	    return Line.create([
	      C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,
	      C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,
	      C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z
	    ], [
	      R[0][0] * D[0] + R[0][1] * D[1] + R[0][2] * D[2],
	      R[1][0] * D[0] + R[1][1] * D[1] + R[1][2] * D[2],
	      R[2][0] * D[0] + R[2][1] * D[1] + R[2][2] * D[2]
	    ]);
	  },

	  // Returns a copy of the line with its direction vector reversed.
	  // Useful when using lines for rotations.
	  reverse: function() {
	    return Line.create(this.anchor, this.direction.x(-1));
	  },

	  // Returns the line's reflection in the given point or line
	  reflectionIn: function(obj) {
	    if (obj.normal) {
	      // obj is a plane
	      var A = this.anchor.elements, D = this.direction.elements;
	      var A1 = A[0], A2 = A[1], A3 = A[2], D1 = D[0], D2 = D[1], D3 = D[2];
	      var newA = this.anchor.reflectionIn(obj).elements;
	      // Add the line's direction vector to its anchor, then mirror that in the plane
	      var AD1 = A1 + D1, AD2 = A2 + D2, AD3 = A3 + D3;
	      var Q = obj.pointClosestTo([AD1, AD2, AD3]).elements;
	      var newD = [Q[0] + (Q[0] - AD1) - newA[0], Q[1] + (Q[1] - AD2) - newA[1], Q[2] + (Q[2] - AD3) - newA[2]];
	      return Line.create(newA, newD);
	    } else if (obj.direction) {
	      // obj is a line - reflection obtained by rotating PI radians about obj
	      return this.rotate(Math.PI, obj);
	    } else {
	      // obj is a point - just reflect the line's anchor in it
	      var P = obj.elements || obj;
	      return Line.create(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.direction);
	    }
	  },

	  // Set the line's anchor point and direction.
	  setVectors: function(anchor, direction) {
	    // Need to do this so that line's properties are not
	    // references to the arguments passed in
	    anchor = Vector.create(anchor);
	    direction = Vector.create(direction);
	    if (anchor.elements.length == 2) {anchor.elements.push(0); }
	    if (direction.elements.length == 2) { direction.elements.push(0); }
	    if (anchor.elements.length > 3 || direction.elements.length > 3) { return null; }
	    var mod = direction.modulus();
	    if (mod === 0) { return null; }
	    this.anchor = anchor;
	    this.direction = Vector.create([
	      direction.elements[0] / mod,
	      direction.elements[1] / mod,
	      direction.elements[2] / mod
	    ]);
	    return this;
	  }
	};

	// Constructor function
	Line.create = function(anchor, direction) {
	  var L = new Line();
	  return L.setVectors(anchor, direction);
	};

	// Axes
	Line.X = Line.create(Vector.Zero(3), Vector.i);
	Line.Y = Line.create(Vector.Zero(3), Vector.j);
	Line.Z = Line.create(Vector.Zero(3), Vector.k);

	module.exports = Line;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright (c) 2011, Chris Umbel, James Coglan
	// Plane class - depends on Vector. Some methods require Matrix and Line.
	var Vector = __webpack_require__(72);
	var Matrix = __webpack_require__(74);
	var Line = __webpack_require__(75);

	var Sylvester = __webpack_require__(73);

	function Plane() {}
	Plane.prototype = {

	  // Returns true iff the plane occupies the same space as the argument
	  eql: function(plane) {
	    return (this.contains(plane.anchor) && this.isParallelTo(plane));
	  },

	  // Returns a copy of the plane
	  dup: function() {
	    return Plane.create(this.anchor, this.normal);
	  },

	  // Returns the result of translating the plane by the given vector
	  translate: function(vector) {
	    var V = vector.elements || vector;
	    return Plane.create([
	      this.anchor.elements[0] + V[0],
	      this.anchor.elements[1] + V[1],
	      this.anchor.elements[2] + (V[2] || 0)
	    ], this.normal);
	  },

	  // Returns true iff the plane is parallel to the argument. Will return true
	  // if the planes are equal, or if you give a line and it lies in the plane.
	  isParallelTo: function(obj) {
	    var theta;
	    if (obj.normal) {
	      // obj is a plane
	      theta = this.normal.angleFrom(obj.normal);
	      return (Math.abs(theta) <= Sylvester.precision || Math.abs(Math.PI - theta) <= Sylvester.precision);
	    } else if (obj.direction) {
	      // obj is a line
	      return this.normal.isPerpendicularTo(obj.direction);
	    }
	    return null;
	  },

	  // Returns true iff the receiver is perpendicular to the argument
	  isPerpendicularTo: function(plane) {
	    var theta = this.normal.angleFrom(plane.normal);
	    return (Math.abs(Math.PI/2 - theta) <= Sylvester.precision);
	  },

	  // Returns the plane's distance from the given object (point, line or plane)
	  distanceFrom: function(obj) {
	    if (this.intersects(obj) || this.contains(obj)) { return 0; }
	    if (obj.anchor) {
	      // obj is a plane or line
	      var A = this.anchor.elements, B = obj.anchor.elements, N = this.normal.elements;
	      return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);
	    } else {
	      // obj is a point
	      var P = obj.elements || obj;
	      var A = this.anchor.elements, N = this.normal.elements;
	      return Math.abs((A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2]);
	    }
	  },

	  // Returns true iff the plane contains the given point or line
	  contains: function(obj) {
	    if (obj.normal) { return null; }
	    if (obj.direction) {
	      return (this.contains(obj.anchor) && this.contains(obj.anchor.add(obj.direction)));
	    } else {
	      var P = obj.elements || obj;
	      var A = this.anchor.elements, N = this.normal.elements;
	      var diff = Math.abs(N[0]*(A[0] - P[0]) + N[1]*(A[1] - P[1]) + N[2]*(A[2] - (P[2] || 0)));
	      return (diff <= Sylvester.precision);
	    }
	  },

	  // Returns true iff the plane has a unique point/line of intersection with the argument
	  intersects: function(obj) {
	    if (typeof(obj.direction) == 'undefined' && typeof(obj.normal) == 'undefined') { return null; }
	    return !this.isParallelTo(obj);
	  },

	  // Returns the unique intersection with the argument, if one exists. The result
	  // will be a vector if a line is supplied, and a line if a plane is supplied.
	  intersectionWith: function(obj) {
	    if (!this.intersects(obj)) { return null; }
	    if (obj.direction) {
	      // obj is a line
	      var A = obj.anchor.elements, D = obj.direction.elements,
	          P = this.anchor.elements, N = this.normal.elements;
	      var multiplier = (N[0]*(P[0]-A[0]) + N[1]*(P[1]-A[1]) + N[2]*(P[2]-A[2])) / (N[0]*D[0] + N[1]*D[1] + N[2]*D[2]);
	      return Vector.create([A[0] + D[0]*multiplier, A[1] + D[1]*multiplier, A[2] + D[2]*multiplier]);
	    } else if (obj.normal) {
	      // obj is a plane
	      var direction = this.normal.cross(obj.normal).toUnitVector();
	      // To find an anchor point, we find one co-ordinate that has a value
	      // of zero somewhere on the intersection, and remember which one we picked
	      var N = this.normal.elements, A = this.anchor.elements,
	          O = obj.normal.elements, B = obj.anchor.elements;
	      var solver = Matrix.Zero(2,2), i = 0;
	      while (solver.isSingular()) {
	        i++;
	        solver = Matrix.create([
	          [ N[i%3], N[(i+1)%3] ],
	          [ O[i%3], O[(i+1)%3]  ]
	        ]);
	      }
	      // Then we solve the simultaneous equations in the remaining dimensions
	      var inverse = solver.inverse().elements;
	      var x = N[0]*A[0] + N[1]*A[1] + N[2]*A[2];
	      var y = O[0]*B[0] + O[1]*B[1] + O[2]*B[2];
	      var intersection = [
	        inverse[0][0] * x + inverse[0][1] * y,
	        inverse[1][0] * x + inverse[1][1] * y
	      ];
	      var anchor = [];
	      for (var j = 1; j <= 3; j++) {
	        // This formula picks the right element from intersection by
	        // cycling depending on which element we set to zero above
	        anchor.push((i == j) ? 0 : intersection[(j + (5 - i)%3)%3]);
	      }
	      return Line.create(anchor, direction);
	    }
	  },

	  // Returns the point in the plane closest to the given point
	  pointClosestTo: function(point) {
	    var P = point.elements || point;
	    var A = this.anchor.elements, N = this.normal.elements;
	    var dot = (A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2];
	    return Vector.create([P[0] + N[0] * dot, P[1] + N[1] * dot, (P[2] || 0) + N[2] * dot]);
	  },

	  // Returns a copy of the plane, rotated by t radians about the given line
	  // See notes on Line#rotate.
	  rotate: function(t, line) {
	    var R = t.determinant ? t.elements : Matrix.Rotation(t, line.direction).elements;
	    var C = line.pointClosestTo(this.anchor).elements;
	    var A = this.anchor.elements, N = this.normal.elements;
	    var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];
	    var x = A1 - C1, y = A2 - C2, z = A3 - C3;
	    return Plane.create([
	      C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,
	      C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,
	      C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z
	    ], [
	      R[0][0] * N[0] + R[0][1] * N[1] + R[0][2] * N[2],
	      R[1][0] * N[0] + R[1][1] * N[1] + R[1][2] * N[2],
	      R[2][0] * N[0] + R[2][1] * N[1] + R[2][2] * N[2]
	    ]);
	  },

	  // Returns the reflection of the plane in the given point, line or plane.
	  reflectionIn: function(obj) {
	    if (obj.normal) {
	      // obj is a plane
	      var A = this.anchor.elements, N = this.normal.elements;
	      var A1 = A[0], A2 = A[1], A3 = A[2], N1 = N[0], N2 = N[1], N3 = N[2];
	      var newA = this.anchor.reflectionIn(obj).elements;
	      // Add the plane's normal to its anchor, then mirror that in the other plane
	      var AN1 = A1 + N1, AN2 = A2 + N2, AN3 = A3 + N3;
	      var Q = obj.pointClosestTo([AN1, AN2, AN3]).elements;
	      var newN = [Q[0] + (Q[0] - AN1) - newA[0], Q[1] + (Q[1] - AN2) - newA[1], Q[2] + (Q[2] - AN3) - newA[2]];
	      return Plane.create(newA, newN);
	    } else if (obj.direction) {
	      // obj is a line
	      return this.rotate(Math.PI, obj);
	    } else {
	      // obj is a point
	      var P = obj.elements || obj;
	      return Plane.create(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.normal);
	    }
	  },

	  // Sets the anchor point and normal to the plane. If three arguments are specified,
	  // the normal is calculated by assuming the three points should lie in the same plane.
	  // If only two are sepcified, the second is taken to be the normal. Normal vector is
	  // normalised before storage.
	  setVectors: function(anchor, v1, v2) {
	    anchor = Vector.create(anchor);
	    anchor = anchor.to3D(); if (anchor === null) { return null; }
	    v1 = Vector.create(v1);
	    v1 = v1.to3D(); if (v1 === null) { return null; }
	    if (typeof(v2) == 'undefined') {
	      v2 = null;
	    } else {
	      v2 = Vector.create(v2);
	      v2 = v2.to3D(); if (v2 === null) { return null; }
	    }
	    var A1 = anchor.elements[0], A2 = anchor.elements[1], A3 = anchor.elements[2];
	    var v11 = v1.elements[0], v12 = v1.elements[1], v13 = v1.elements[2];
	    var normal, mod;
	    if (v2 !== null) {
	      var v21 = v2.elements[0], v22 = v2.elements[1], v23 = v2.elements[2];
	      normal = Vector.create([
	        (v12 - A2) * (v23 - A3) - (v13 - A3) * (v22 - A2),
	        (v13 - A3) * (v21 - A1) - (v11 - A1) * (v23 - A3),
	        (v11 - A1) * (v22 - A2) - (v12 - A2) * (v21 - A1)
	      ]);
	      mod = normal.modulus();
	      if (mod === 0) { return null; }
	      normal = Vector.create([normal.elements[0] / mod, normal.elements[1] / mod, normal.elements[2] / mod]);
	    } else {
	      mod = Math.sqrt(v11*v11 + v12*v12 + v13*v13);
	      if (mod === 0) { return null; }
	      normal = Vector.create([v1.elements[0] / mod, v1.elements[1] / mod, v1.elements[2] / mod]);
	    }
	    this.anchor = anchor;
	    this.normal = normal;
	    return this;
	  }
	};

	// Constructor function
	Plane.create = function(anchor, v1, v2) {
	  var P = new Plane();
	  return P.setVectors(anchor, v1, v2);
	};

	// X-Y-Z planes
	Plane.XY = Plane.create(Vector.Zero(3), Vector.k);
	Plane.YZ = Plane.create(Vector.Zero(3), Vector.i);
	Plane.ZX = Plane.create(Vector.Zero(3), Vector.j);
	Plane.YX = Plane.XY; Plane.ZY = Plane.YZ; Plane.XZ = Plane.ZX;

	// Returns the plane containing the given points (can be arrays as
	// well as vectors). If the points are not coplanar, returns null.
	Plane.fromPoints = function(points) {
	  var np = points.length, list = [], i, P, n, N, A, B, C, D, theta, prevN, totalN = Vector.Zero(3);
	  for (i = 0; i < np; i++) {
	    P = Vector.create(points[i]).to3D();
	    if (P === null) { return null; }
	    list.push(P);
	    n = list.length;
	    if (n > 2) {
	      // Compute plane normal for the latest three points
	      A = list[n-1].elements; B = list[n-2].elements; C = list[n-3].elements;
	      N = Vector.create([
	        (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),
	        (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),
	        (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])
	      ]).toUnitVector();
	      if (n > 3) {
	        // If the latest normal is not (anti)parallel to the previous one, we've strayed off the plane.
	        // This might be a slightly long-winded way of doing things, but we need the sum of all the normals
	        // to find which way the plane normal should point so that the points form an anticlockwise list.
	        theta = N.angleFrom(prevN);
	        if (theta !== null) {
	          if (!(Math.abs(theta) <= Sylvester.precision || Math.abs(theta - Math.PI) <= Sylvester.precision)) { return null; }
	        }
	      }
	      totalN = totalN.add(N);
	      prevN = N;
	    }
	  }
	  // We need to add in the normals at the start and end points, which the above misses out
	  A = list[1].elements; B = list[0].elements; C = list[n-1].elements; D = list[n-2].elements;
	  totalN = totalN.add(Vector.create([
	    (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),
	    (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),
	    (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])
	  ]).toUnitVector()).add(Vector.create([
	    (B[1] - C[1]) * (D[2] - C[2]) - (B[2] - C[2]) * (D[1] - C[1]),
	    (B[2] - C[2]) * (D[0] - C[0]) - (B[0] - C[0]) * (D[2] - C[2]),
	    (B[0] - C[0]) * (D[1] - C[1]) - (B[1] - C[1]) * (D[0] - C[0])
	  ]).toUnitVector());
	  return Plane.create(list[0], totalN);
	};

	module.exports = Plane;


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright (c) 2011, Chris Umbel, James Coglan
	// Line.Segment class - depends on Line and its dependencies.

	var Line = __webpack_require__(75);
	var Vector = __webpack_require__(72);

	Line.Segment = function() {};
	Line.Segment.prototype = {

	  // Returns true iff the line segment is equal to the argument
	  eql: function(segment) {
	    return (this.start.eql(segment.start) && this.end.eql(segment.end)) ||
	        (this.start.eql(segment.end) && this.end.eql(segment.start));
	  },

	  // Returns a copy of the line segment
	  dup: function() {
	    return Line.Segment.create(this.start, this.end);
	  },

	  // Returns the length of the line segment
	  length: function() {
	    var A = this.start.elements, B = this.end.elements;
	    var C1 = B[0] - A[0], C2 = B[1] - A[1], C3 = B[2] - A[2];
	    return Math.sqrt(C1*C1 + C2*C2 + C3*C3);
	  },

	  // Returns the line segment as a vector equal to its
	  // end point relative to its endpoint
	  toVector: function() {
	    var A = this.start.elements, B = this.end.elements;
	    return Vector.create([B[0] - A[0], B[1] - A[1], B[2] - A[2]]);
	  },

	  // Returns the segment's midpoint as a vector
	  midpoint: function() {
	    var A = this.start.elements, B = this.end.elements;
	    return Vector.create([(B[0] + A[0])/2, (B[1] + A[1])/2, (B[2] + A[2])/2]);
	  },

	  // Returns the plane that bisects the segment
	  bisectingPlane: function() {
	    return Plane.create(this.midpoint(), this.toVector());
	  },

	  // Returns the result of translating the line by the given vector/array
	  translate: function(vector) {
	    var V = vector.elements || vector;
	    var S = this.start.elements, E = this.end.elements;
	    return Line.Segment.create(
	      [S[0] + V[0], S[1] + V[1], S[2] + (V[2] || 0)],
	      [E[0] + V[0], E[1] + V[1], E[2] + (V[2] || 0)]
	    );
	  },

	  // Returns true iff the line segment is parallel to the argument. It simply forwards
	  // the method call onto its line property.
	  isParallelTo: function(obj) {
	    return this.line.isParallelTo(obj);
	  },

	  // Returns the distance between the argument and the line segment's closest point to the argument
	  distanceFrom: function(obj) {
	    var P = this.pointClosestTo(obj);
	    return (P === null) ? null : P.distanceFrom(obj);
	  },

	  // Returns true iff the given point lies on the segment
	  contains: function(obj) {
	    if (obj.start && obj.end) { return this.contains(obj.start) && this.contains(obj.end); }
	    var P = (obj.elements || obj).slice();
	    if (P.length == 2) { P.push(0); }
	    if (this.start.eql(P)) { return true; }
	    var S = this.start.elements;
	    var V = Vector.create([S[0] - P[0], S[1] - P[1], S[2] - (P[2] || 0)]);
	    var vect = this.toVector();
	    return V.isAntiparallelTo(vect) && V.modulus() <= vect.modulus();
	  },

	  // Returns true iff the line segment intersects the argument
	  intersects: function(obj) {
	    return (this.intersectionWith(obj) !== null);
	  },

	  // Returns the unique point of intersection with the argument
	  intersectionWith: function(obj) {
	    if (!this.line.intersects(obj)) { return null; }
	    var P = this.line.intersectionWith(obj);
	    return (this.contains(P) ? P : null);
	  },

	  // Returns the point on the line segment closest to the given object
	  pointClosestTo: function(obj) {
	    if (obj.normal) {
	      // obj is a plane
	      var V = this.line.intersectionWith(obj);
	      if (V === null) { return null; }
	      return this.pointClosestTo(V);
	    } else {
	      // obj is a line (segment) or point
	      var P = this.line.pointClosestTo(obj);
	      if (P === null) { return null; }
	      if (this.contains(P)) { return P; }
	      return (this.line.positionOf(P) < 0 ? this.start : this.end).dup();
	    }
	  },

	  // Set the start and end-points of the segment
	  setPoints: function(startPoint, endPoint) {
	    startPoint = Vector.create(startPoint).to3D();
	    endPoint = Vector.create(endPoint).to3D();
	    if (startPoint === null || endPoint === null) { return null; }
	    this.line = Line.create(startPoint, endPoint.subtract(startPoint));
	    this.start = startPoint;
	    this.end = endPoint;
	    return this;
	  }
	};

	// Constructor function
	Line.Segment.create = function(v1, v2) {
	  var S = new Line.Segment();
	  return S.setPoints(v1, v2);
	};

	module.exports = Line.Segment;


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Sylvester = __webpack_require__(71),
	Matrix = Sylvester.Matrix,
	Vector = Sylvester.Vector;

	function KMeans(Observations) {
	    if(!Observations.elements)
	    Observations = $M(Observations);

	    this.Observations = Observations;
	}

	// create an initial centroid matrix with initial values between
	// 0 and the max of feature data X.
	function createCentroids(k) {
	    var Centroid = [];
	    var maxes = this.Observations.maxColumns();
	    //console.log(maxes);

	    for(var i = 1; i <= k; i++) {
	        var centroid = [];
	        for(var j = 1; j <= this.Observations.cols(); j++) {
	            centroid.push(Math.random() * maxes.e(j));
	        }

	        Centroid.push(centroid);
	    }

	    //console.log(centroid)

	    return $M(Centroid);
	}

	// get the euclidian distance between the feature data X and
	// a given centroid matrix C.
	function distanceFrom(Centroids) {
	    var distances = [];

	    for(var i = 1; i <= this.Observations.rows(); i++) {
	        var distance = [];

	        for(var j = 1; j <= Centroids.rows(); j++) {
	            distance.push(this.Observations.row(i).distanceFrom(Centroids.row(j)));
	        }

	        distances.push(distance);
	    }

	    return $M(distances);
	}

	// categorize the feature data X into k clusters. return a vector
	// containing the results.
	function cluster(k) {
	    var Centroids = this.createCentroids(k);
	    var LastDistances = Matrix.Zero(this.Observations.rows(), this.Observations.cols());
	    var Distances = this.distanceFrom(Centroids);
	    var Groups;

	    while(!(LastDistances.eql(Distances))) {
	    Groups = Distances.minColumnIndexes();
	    LastDistances = Distances;

	    var newCentroids = [];

	    for(var i = 1; i <= Centroids.rows(); i++) {
	        var centroid = [];

	        for(var j = 1; j <= Centroids.cols(); j++) {
	        var sum = 0;
	        var count = 0;

	        for(var l = 1; l <= this.Observations.rows(); l++) {
	            if(Groups.e(l) == i) {
	            count++;
	            sum += this.Observations.e(l, j);
	            }
	        }

	        centroid.push(sum / count);
	        }

	        newCentroids.push(centroid);
	    }

	    Centroids = $M(newCentroids);
	    Distances = this.distanceFrom(Centroids);
	    }

	    return Groups;
	}

	KMeans.prototype.createCentroids = createCentroids;
	KMeans.prototype.distanceFrom = distanceFrom;
	KMeans.prototype.cluster = cluster;

	module.exports = KMeans;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var PorterStemmer = __webpack_require__(21),
	util = __webpack_require__(14),
	Classifier = __webpack_require__(64),
	ApparatusLogisticRegressionClassifier = __webpack_require__(67).LogisticRegressionClassifier;

	var LogisticRegressionClassifier = function(stemmer) {
	    Classifier.call(this, new ApparatusLogisticRegressionClassifier(), stemmer);
	};

	util.inherits(LogisticRegressionClassifier, Classifier);

	function restore(classifier, stemmer) {
	    classifier = Classifier.restore(classifier, stemmer);
	    classifier.__proto__ = LogisticRegressionClassifier.prototype;
	    classifier.classifier = ApparatusLogisticRegressionClassifier.restore(classifier.classifier);

	    return classifier;
	}

	function load(filename, stemmer, callback) {
	    Classifier.load(filename, function(err, classifier) {
	        callback(err, restore(classifier, stemmer));
	    });
	}

	function train() {
	    // we need to reset the traning state because logistic regression
	    // needs its matricies to have their widths synced, etc.
	    this.lastAdded = 0;
	    this.classifier = new ApparatusLogisticRegressionClassifier();
	    Classifier.prototype.train.call(this);
	}

	LogisticRegressionClassifier.prototype.train = train;
	LogisticRegressionClassifier.restore = restore;
	LogisticRegressionClassifier.load = load;

	module.exports = LogisticRegressionClassifier;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var SingularPluralInflector = __webpack_require__(81),
	    util = __webpack_require__(14),
	    FormSet = __webpack_require__(82);

	function attach() {
	    var inflector = this;
	    
	    String.prototype.singularizeNoun = function() {
	        return inflector.singularize(this);
	    }
	    
	    String.prototype.pluralizeNoun = function() {
	        return inflector.pluralize(this);
	    }
	}

	var NounInflector = function() {
	    this.ambiguous = [
	        'bison', 'bream', 'carp', 'chassis', 'cod', 'corps', 'debris', 'deer',
	        'diabetes', 'equipment', 'elk', 'fish', 'flounder', 'gallows', 'graffiti',
	        'headquarters', 'herpes', 'highjinks', 'homework', 'information',
	        'mackerel', 'mews', 'money', 'news', 'rice', 'rabies', 'salmon', 'series',
	        'sheep', 'shrimp', 'species', 'swine', 'trout', 'tuna', 'whiting', 'wildebeest'
	    ];
	    
	    this.customPluralForms = [];
	    this.customSingularForms = [];    
	    this.singularForms = new FormSet();
	    this.pluralForms = new FormSet();

	    this.attach = attach;

	    this.addIrregular("child", "children");
	    this.addIrregular("man", "men");
	    this.addIrregular("person", "people");
	    this.addIrregular("sex", "sexes");
	    this.addIrregular("mouse", "mice");
	    this.addIrregular("ox", "oxen");
	    this.addIrregular("foot", "feet");
	    this.addIrregular("tooth", "teeth");
	    this.addIrregular("goose", "geese");
	    this.addIrregular("ephemeris", "ephemerides");
	    
	    // see if it is possible to unify the creation of both the singular and
	    // plural regexes or maybe even just have one list. with a complete list
	    // of rules it may only be possible for some regular forms, but worth a shot    
	    this.pluralForms.regularForms.push([/y$/i, 'ies']);
	    this.pluralForms.regularForms.push([/ife$/i, 'ives']);
	    this.pluralForms.regularForms.push([/(antenn|formul|nebul|vertebr|vit)a$/i, '$1ae']);    
	    this.pluralForms.regularForms.push([/(octop|vir|radi|nucle|fung|cact|stimul)us$/i, '$1i']);    
	    this.pluralForms.regularForms.push([/(buffal|tomat|tornad)o$/i, '$1oes']);    
	    this.pluralForms.regularForms.push([/(sis)$/i, 'ses']);
	    this.pluralForms.regularForms.push([/(matr|vert|ind|cort)(ix|ex)$/i, '$1ices']);
	    this.pluralForms.regularForms.push([/(x|ch|ss|sh|s|z)$/i, '$1es']);
	    this.pluralForms.regularForms.push([/^(?!talis|.*hu)(.*)man$/i, '$1men']);
	    this.pluralForms.regularForms.push([/(.*)/i, '$1s']);

	    this.singularForms.regularForms.push([/([^v])ies$/i, '$1y']);
	    this.singularForms.regularForms.push([/ives$/i, 'ife']);
	    this.singularForms.regularForms.push([/(antenn|formul|nebul|vertebr|vit)ae$/i, '$1a']);
	    this.singularForms.regularForms.push([/(octop|vir|radi|nucle|fung|cact|stimul)(i)$/i, '$1us']);
	    this.singularForms.regularForms.push([/(buffal|tomat|tornad)(oes)$/i, '$1o']);
	    this.singularForms.regularForms.push([/(analy|naly|synop|parenthe|diagno|the)ses$/i, '$1sis']);
	    this.singularForms.regularForms.push([/(vert|ind|cort)(ices)$/i, '$1ex']);
	    // our pluralizer won''t cause this form of appendix (appendicies)
	    // but we should handle it
	    this.singularForms.regularForms.push([/(matr|append)(ices)$/i, '$1ix']);
	    this.singularForms.regularForms.push([/(x|ch|ss|sh|s|z)es$/i, '$1']);
	    this.singularForms.regularForms.push([/men$/i, 'man']);
	    this.singularForms.regularForms.push([/s$/i, '']);
	    
	    this.pluralize = function (token) {
	        return this.ize(token, this.pluralForms, this.customPluralForms);
	    };
	    
	    this.singularize = function(token) {
	        return this.ize(token, this.singularForms, this.customSingularForms);
	    };
	};

	util.inherits(NounInflector, SingularPluralInflector);
	    
	module.exports = NounInflector;


/***/ },
/* 81 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var TenseInflector = function () {
	};

	TenseInflector.prototype.addSingular = function(pattern, replacement) {
	    this.customSingularForms.push([pattern, replacement]);    
	};

	TenseInflector.prototype.addPlural = function(pattern, replacement) {
	    this.customPluralForms.push([pattern, replacement]);
	};

	TenseInflector.prototype.ize = function (token, formSet, customForms) {
	    var restoreCase = this.restoreCase(token);
	    return restoreCase(this.izeRegExps(token, customForms) || this.izeAbiguous(token) ||
	        this.izeRegulars(token, formSet) || this.izeRegExps(token, formSet.regularForms) ||
	        token);
	}

	TenseInflector.prototype.izeAbiguous = function (token) {
	    if(this.ambiguous.indexOf(token.toLowerCase()) > -1)
	        return token.toLowerCase();

	    return false;
	}

	TenseInflector.prototype.pluralize = function (token) {
	    return this.ize(token, this.pluralForms, this.customPluralForms);
	};

	TenseInflector.prototype.singularize = function(token) {
	    return this.ize(token, this.singularForms, this.customSingularForms);
	};    

	var uppercaseify = function(token) {
	    return token.toUpperCase();
	}
	var capitalize = function(token) {
	    return token[0].toUpperCase() + token.slice(1);
	}
	var lowercaseify = function(token) {
	    return token.toLowerCase();
	}

	TenseInflector.prototype.restoreCase = function(token) {
	    if (token[0] === token[0].toUpperCase()) {
	        if (token[1] && token[1] === token[1].toLowerCase()) {
	            return capitalize;
	        } else {
	            return uppercaseify;
	        }
	    } else {
	        return lowercaseify;
	    }
	}

	TenseInflector.prototype.izeRegulars = function(token, formSet) {
	    token = token.toLowerCase();
	    if(formSet.irregularForms.hasOwnProperty(token) && formSet.irregularForms[token])
	        return formSet.irregularForms[token];

	    return false;
	}

	TenseInflector.prototype.addForm = function(singularTable, pluralTable, singular, plural) {
	    singular = singular.toLowerCase();
	    plural = plural.toLowerCase();
	    pluralTable[singular] = plural;
	    singularTable[plural] = singular;
	};

	TenseInflector.prototype.addIrregular = function(singular, plural) {
	    this.addForm(this.singularForms.irregularForms, this.pluralForms.irregularForms, singular, plural);
	};

	TenseInflector.prototype.izeRegExps = function(token, forms) {
	        var i, form;
	        for(i = 0; i < forms.length; i++) {
	            form = forms[i];
	            
	            if(token.match(form[0]))
	                return token.replace(form[0], form[1]);
	        }
	        
	        return false;
	    }

	module.exports = TenseInflector;


/***/ },
/* 82 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var FormSet = function() {
	    this.regularForms = [];
	    this.irregularForms = {};
	}

	module.exports = FormSet;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2012, Guillaume Marty

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * A noun inflector for French.
	 * Compiled from:
	 * \@see http://fr.wiktionary.org/wiki/Annexe:Pluriels_irr%C3%A9guliers_en_fran%C3%A7ais
	 * \@see http://fr.wikipedia.org/wiki/Pluriels_irr%C3%A9guliers_en_fran%C3%A7ais
	 *
	 * \@todo Take compounded noun into account (eaux-fortes, pique-nique...).
	 * \@todo General note: French also requires AdjectiveInflector (femininize...).
	 */

	var SingularPluralInflector = __webpack_require__(81),
	    util = __webpack_require__(14),
	    FormSet = __webpack_require__(82);

	function attach() {
	  var inflector = this;

	  String.prototype.singularizeNoun = function() {
	    return inflector.singularize(this);
	  };

	  String.prototype.pluralizeNoun = function() {
	    return inflector.pluralize(this);
	  };
	}



	/**
	 * @constructor
	 */
	var NounInflector = function() {
	  // Ambiguous a.k.a. invariant.
	  // \@todo Expand this list to be as comprehensive as possible.
	  this.ambiguous = [
	    // Nouns ending by -s
	    'à-peu-près', 'à-propos', 'abattis', 'abcès', 'abois', 'abribus', 'abus',
	    'accès', 'acquis', 'adénovirus', 'adonis', 'ados', 'agrès', 'aguets',
	    'ailleurs', 'ais', 'albatros', 'albinos', 'alias', 'aloès', 'amaryllis',
	    'amas', 'ampélopsis', 'ananas', 'anchois', 'angélus', 'anis', 'anticorps',
	    'antihéros', 'antirides', 'anus', 'appas', 'appentis', 'appui-bras',
	    'appuie-bras', 'arcanes', 'argus', 'arrérages', 'arrière-pays', 'as',
	    'ascaris', 'asparagus', 'atlas', 'atours', 'aurochs', 'autobus',
	    'autofocus', 'avant-bras', 'avant-corps', 'avant-propos', 'avers', 'avis',
	    'axis', 'barbouillis', 'bas', 'beaujolais', 'beaux-arts', 'biais',
	    'bibliobus', 'biceps', 'bicross', 'bien-fonds', 'bloc-notes', 'blockhaus',
	    'blocus', 'blues', 'bois', 'bonus', 'bout-dehors', 'bouts-rimés',
	    'branle-bas', 'bras', 'brebis', 'bris', 'brise-lames', 'brise-mottes',
	    'brûlis', 'buis', 'burnous', 'bus', 'business', 'cabas', 'cacatoès',
	    'cacatois', 'cactus', 'cadenas', 'cafouillis', 'caillebotis', 'calvados',
	    'cambouis', 'campus', 'canevas', 'cannabis', 'carquois', 'cas',
	    'casse-noisettes', 'casse-pieds', 'cassis', 'caucus', 'cens', 'cervelas',
	    'chablis', 'chamois', 'chaos', 'chas', 'chasselas', 'châssis',
	    'chatouillis', 'chauffe-assiettes', 'chauve-souris', 'chorus', 'choucas',
	    'circoncis', 'cirrus', 'clafoutis', 'clapotis', 'cliquetis', 'clos',
	    'cochylis', 'colis', 'coloris', 'commis', 'compas', 'compromis',
	    'compte-chèques', 'compte-gouttes', 'compte-tours', 'concours', 'confins',
	    'congrès', 'consensus', 'contrepoids', 'contresens', 'contretemps',
	    'corn flakes', 'corps', 'corps-à-corps', 'corpus', 'cosinus', 'cosmos',
	    'coulis', 'coupe-ongles', 'cours', 'court-jus', 'couscous', 'coutelas',
	    'crocus', 'croquis', 'cross', 'cubitus', 'cumulus', 'cure-dents',
	    'cure-ongles', 'cure-pipes', 'cursus', 'cyclo-cross', 'cyprès', 'dais',
	    'damas', 'débarras', 'débours', 'débris', 'décès', 'dedans', 'dehors',
	    'delirium tremens', 'demi-gros', 'dépens', 'dessous', 'dessus', 'détritus',
	    'deux-mâts', 'deux-pièces', 'deux-points', 'deux-roues', 'deux-temps',
	    'dévers', 'devis', 'diplodocus', 'discours', 'dos', 'ébats', 'éboulis',
	    'échalas', 'edelweiss', 'élaeis', 'éleis', 'éléphantiasis', 'embarras',
	    'empois', 'en-cas', 'encens', 'enclos', 'endos', 'engrais', 'entrelacs',
	    'entremets', 'envers', 'épluche-légumes', 'ers', 'espace-temps',
	    'essuie-mains', 'eucalyptus', 'ex-libris', 'excès', 'express', 'extrados',
	    'faciès', 'fait-divers', 'fatras', 'faux-sens', 'favoris', 'ficus',
	    'fier-à-bras', 'finnois', 'florès', 'focus', 'fœtus', 'fois', 'forceps',
	    'fouillis', 'fracas', 'frais', 'français', 'franglais', 'frimas',
	    'friselis', 'frisottis', 'froncis', 'frottis', 'fucus', 'gâchis', 'galetas',
	    'galimatias', 'garde-à-vous', 'garde-corps', 'gargouillis', 'gars',
	    'gâte-bois', 'gazouillis', 'génois', 'gibus', 'glacis', 'glas', 'gneiss',
	    'gobe-mouches', 'grès', 'gribouillis', 'guet-apens', 'habeas corpus',
	    'hachis', 'haras', 'hardes', 'harnais', 'haut-le-corps', 'hautbois',
	    'herbe-aux-chats', 'héros', 'herpès', 'hiatus', 'hibiscus', 'hors-concours',
	    'hors-pistes', 'hourdis', 'huis-clos', 'humérus', 'humus', 'ibis', 'iléus',
	    'indique-fuites', 'infarctus', 'inlandsis', 'insuccès', 'intercours',
	    'intrados', 'intrus', 'iris', 'isatis', 'jais', 'jars', 'jeans',
	    'jeuconcours', 'judas', 'juliénas', 'jus', 'justaucorps', 'kakatoès',
	    'kermès', 'kriss', 'lacis', 'laïus', 'lambris', 'lapis', 'laps', 'lapsus',
	    'laquais', 'las', 'lattis', 'lave-mains', 'lavis', 'lèche-bottes',
	    'lèche-vitrines', 'legs', 'lias', 'liégeois', 'lilas', 'lis', 'lœss',
	    'logis', 'loris', 'lotus', 'louis', 'lupus', 'lys', 'mâchicoulis', 'madras',
	    'maïs', 'malappris', 'malus', 'mânes', 'maquis', 'marais', 'maroilles',
	    'marquis', 'mas', 'mass-médias', 'matelas', 'matois', 'médius', 'mépris',
	    'mérinos', 'mess', 'mets', 'mi-bas', 'micro-ondes', 'mille-pattes',
	    'millepertuis', 'minibus', 'minois', 'minus', 'mirabilis', 'mois',
	    'monocorps', 'monte-plats', 'mors', 'motocross', 'mots-croisés', 'motus',
	    'mouchetis', 'mucus', 'myosotis', 'nævus', 'négus', 'niais',
	    'nimbo-stratus', 'nimbus', 'norois', 'nounours', 'nu-pieds', 'oasis',
	    'obus', 'olibrius', 'omnibus', 'opus', 'os', 'ours', 'ouvre-boîtes',
	    'ouvre-bouteilles', 'palais', 'palis', 'palmarès', 'palus', 'panais',
	    'panaris', 'pancréas', 'papyrus', 'par-dehors', 'paradis', 'parcours',
	    'pardessus', 'pare-balles', 'pare-chocs', 'parvis', 'pas', 'passe-temps',
	    'pataquès', 'pathos', 'patois', 'pavois', 'pays', 'permis',
	    'petit-bourgeois', 'petit-gris', 'petit-pois', 'phallus', 'phimosis',
	    'pickles', 'pilotis', 'pique-fleurs', 'pis', 'pithiviers', 'pityriasis',
	    'plateau-repas', 'plâtras', 'plein-temps', 'plexiglas', 'plexus', 'plus',
	    'poids', 'pois', 'pont-levis', 'porte-avions', 'porte-bagages',
	    'porte-billets', 'porte-bouteilles', 'porte-clés', 'porte-hélicoptères',
	    'porte-jarretelles', 'porte-revues', 'pouls', 'préavis', 'presse-fruits',
	    'presse-papiers', 'princeps', 'printemps', 'procès', 'processus', 'progrès',
	    'propos', 'prospectus', 'protège-dents', 'psoriasis', 'pubis', 'puits',
	    'pus', 'putois', 'quatre-épices', 'quatre-feuilles', 'quatre-heures',
	    'quatre-mâts', 'quatre-quarts', 'quatre-temps', 'quitus', 'rabais',
	    'rachis', 'radis', 'radius', 'raïs', 'ramassis', 'rébus', 'reclus',
	    'recours', 'refus', 'relais', 'remords', 'remous', 'remue-méninges',
	    'rendez-vous', 'repas', 'répons', 'repos', 'repris', 'reps', 'rétrovirus',
	    'revers', 'rhinocéros', 'rictus', 'rince-doigts', 'ris', 'rollmops',
	    'rosé-des-prés', 'roulis', 'rubis', 'salmigondis', 'salsifis', 'sans-logis',
	    'sas', 'sassafras', 'sauternes', 'schnaps', 'schuss', 'secours', 'semis',
	    'sens', 'serre-fils', 'serre-livres', 'sévices', 'sinus', 'skunks',
	    'souris', 'sournois', 'sous-bois', 'stradivarius', 'stras', 'strass',
	    'strato-cumulus', 'stratus', 'stress', 'succès', 'surdos', 'surplus',
	    'surpoids', 'sursis', 'suspens', 'synopsis', 'syphilis', 'taffetas',
	    'taillis', 'talus', 'tamaris', 'tamis', 'tapis', 'tas', 'taudis', 'temps',
	    'tennis', 'terminus', 'terre-neuvas', 'tétanos', 'tétras', 'thalamus',
	    'thermos', 'thesaurus', 'thésaurus', 'thymus', 'tire-fesses', 'tonus',
	    'torchis', 'torticolis', 'tournedos', 'tournevis', 'tournis', 'tracas',
	    'traîne-savates', 'travers', 'tréfonds', 'treillis', 'trépas', 'trias',
	    'triceps', 'trichomonas', 'trois-étoiles', 'trois-mâts', 'trois-quarts',
	    'trolleybus', 'tumulus', 'typhus', 'univers', 'us', 'utérus', 'vasistas',
	    'vélocross', 'velours', 'verglas', 'verjus', 'vernis', 'vers',
	    'vert-de-gris', 'vide-ordures', 'vide-poches', 'villageois', 'virus',
	    'vis-à-vis', 'volubilis', 'vulgum pecus', 'waters', 'williams', 'xérès',

	    // Nouns ending by -x
	    'abat-voix', 'afflux', 'alpax', 'anthrax', 'apex', 'aptéryx',
	    'archéoptéryx', 'arrière-faix', 'bombyx', 'borax', 'bordeaux', 'bouseux',
	    'box', 'carex', 'casse-noix', 'cedex', 'céphalothorax', 'cérambyx', 'chaux',
	    'choix', 'coccyx', 'codex', 'contumax', 'coqueleux', 'cortex', 'courroux',
	    'croix', 'crucifix', 'culex', 'demodex', 'duplex', 'entre-deux', 'époux',
	    'équivaux', 'eux', 'ex', 'faix', 'faucheux', 'faux', 'fax', 'ferreux',
	    'flux', 'fox', 'freux', 'furax', 'hapax', 'harengueux', 'hélix',
	    'horse-pox', 'houx', 'index', 'influx', 'inox', 'juke-box', 'kleenex',
	    'lagothrix', 'larynx', 'lastex', 'latex', 'lux', 'lynx', 'macareux', 'max',
	    'mésothorax', 'mi-voix', 'mirepoix', 'motteux', 'multiplex', 'murex',
	    'narthex', 'noix', 'onyx', 'opopanax', 'oropharynx', 'paix', 'panax',
	    'perdrix', 'pharynx', 'phénix', 'phlox', 'phoenix', 'pneumothorax', 'poix',
	    'portefaix', 'pousse-cailloux', 'preux', 'prix', 'prothorax', 'pucheux',
	    'pyrex', 'pyroligneux', 'quadruplex', 'queux', 'redoux', 'reflex', 'reflux',
	    'relax', 'rhinopharynx', 'rose-croix', 'rouvieux', 'roux', 'rumex',
	    'saindoux', 'sardonyx', 'scolex', 'sèche-cheveux', 'silex', 'simplex',
	    'sioux', 'sirex', 'smilax', 'solex', 'songe-creux', 'spalax', 'sphex',
	    'sphinx', 'storax', 'strix', 'styrax', 'surfaix', 'surtaux', 'syrinx',
	    'tamarix', 'taux', 'télex', 'thorax', 'tord-boyaux', 'toux', 'trionyx',
	    'tripoux', 'tubifex', 'vertex', 'vidéotex', 'vielleux', 'vieux',
	    'violoneux', 'voix', 'volvox', 'vortex',

	    // Nouns ending by -z
	    'allume-gaz', 'assez', 'biogaz', 'cache-nez', 'camping-gaz', 'chez',
	    'chintz', 'ersatz', 'fez', 'free-jazz', 'fritz', 'gaz', 'gin-fizz', 'hertz',
	    'jazz', 'jerez', 'kibboutz', 'kilohertz', 'kolkhoz', 'kronprinz', 'lapiaz',
	    'lez', 'mégahertz', 'merguez', 'nez', 'pince-nez', 'quartz', 'quiz', 'ranz',
	    'raz', 'recez', 'rémiz', 'rez', 'riz', 'ruolz', 'seltz', 'serre-nez'
	  ];

	  this.customPluralForms = [];
	  this.customSingularForms = [];
	  this.singularForms = new FormSet();
	  this.pluralForms = new FormSet();

	  this.attach = attach;

	  this.addIrregular('ail', 'aulx');
	  this.addIrregular('bétail', 'bestiaux');
	  this.addIrregular('bonhomme', 'bonshommes');
	  this.addIrregular('ciel', 'cieux');
	  this.addIrregular('monsieur', 'messieurs');
	  this.addIrregular('mafioso', 'mafiosi');
	  this.addIrregular('œil', 'yeux');
	  this.addIrregular('putto', 'putti');
	  this.addIrregular('targui', 'touareg'); // touareg -> touaregs is also OK.

	  // Pluralize
	  this.pluralForms.regularForms.push([/^(av|b|c|carnav|cérémoni|chac|corr|emment|emmenth|festiv|fut|gavi|gra|narv|p|récit|rég|rit|rorqu|st)al$/i, '$1als']);
	  this.pluralForms.regularForms.push([/^(aspir|b|cor|ém|ferm|gemm|soupir|trav|vant|vent|vitr)ail$/i, '$1aux']);
	  this.pluralForms.regularForms.push([/^(bij|caill|ch|gen|hib|jouj|p|rip|chouch)ou$/i, '$1oux']);
	  this.pluralForms.regularForms.push([/^(gr|berimb|don|karb|land|pil|rest|sarr|un)au$/i, '$1aus']);
	  this.pluralForms.regularForms.push([/^(bl|ém|enf|pn)eu$/i, '$1eus']);
	  this.pluralForms.regularForms.push([/(au|eau|eu|œu)$/i, '$1x']);
	  this.pluralForms.regularForms.push([/al$/i, 'aux']);
	  this.pluralForms.regularForms.push([/(s|x)$/i, '$1']);
	  this.pluralForms.regularForms.push([/(.*)$/i, '$1s']);

	  // Singularize
	  this.singularForms.regularForms.push([/^(aspir|b|cor|ém|ferm|gemm|soupir|trav|vant|vent|vitr)aux$/i, '$1ail']);
	  this.singularForms.regularForms.push([/^(aloy|b|bouc|boy|burg|conoy|coy|cr|esquim|ét|fabli|flé|flûti|glu|gr|gru|hoy|joy|kérab|matéri|nobli|noy|pré|sen|sén|t|touch|tuss|tuy|v|ypré)aux$/i, '$1au']);
	  this.singularForms.regularForms.push([/^(bij|caill|ch|gen|hib|jouj|p|rip|chouch)oux$/i, '$1ou']);
	  this.singularForms.regularForms.push([/^(bis)?aïeux$/i, '$1aïeul']);
	  this.singularForms.regularForms.push([/^apparaux$/i, 'appareil']); // One way transform, don't put on irregular list.
	  this.singularForms.regularForms.push([/^ciels$/i, 'ciel']);
	  this.singularForms.regularForms.push([/^œils$/i, 'œil']);
	  this.singularForms.regularForms.push([/(eau|eu|œu)x$/i, '$1']);
	  this.singularForms.regularForms.push([/aux$/i, 'al']);
	  this.singularForms.regularForms.push([/(.*)s$/i, '$1']);

	  this.pluralize = function(token) {
	    return this.ize(token, this.pluralForms, this.customPluralForms);
	  };

	  this.singularize = function(token) {
	    return this.ize(token, this.singularForms, this.customSingularForms);
	  };
	};

	util.inherits(NounInflector, SingularPluralInflector);

	module.exports = NounInflector;


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2012, Guillaume Marty

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * A noun inflector for Japanese.
	 * Compiled from several sources including:
	 * \@see http://answers.yahoo.com/question/index?qid=20080528201740AASBWy6
	 * \@see http://www.excite.co.jp/dictionary/english_japanese/
	 *
	 * This script assumes input is normalized using normalizer_ja().
	 * Pluralizing Japanese has a very limited interest.
	 * Japanese don't usually distinct plural from singular, so even a word looking
	 * like a singular might actually be a plural.
	 *
	 * Singularization of nouns ending by -tachi or -ra is achieved using a
	 * comprehensive black list, while nouns ending by -domo or -gata use a white
	 * list because there are too many exceptions.
	 *
	 * \@todo Singularize nouns ending by -ら, but there are too many exceptions.
	 * \@todo Expand the list of common plurals ending by -domo and -gata.
	 */

	var SingularPluralInflector = __webpack_require__(81),
	    util = __webpack_require__(14),
	    FormSet = __webpack_require__(82);

	function attach() {
	  var inflector = this;

	  String.prototype.singularizeNoun = function() {
	    return inflector.singularize(this);
	  };

	  String.prototype.pluralizeNoun = function() {
	    return inflector.pluralize(this);
	  };
	}



	/**
	 * @constructor
	 */
	var NounInflector = function() {
	  // Ambiguous a.k.a. invariant.
	  this.ambiguous = [
	    'ともだち', '友だち', '友達', '遊び友達', '飲み友達', '酒飲み友達', '茶飲み友達',
	    '学校友達', '女友達', '男友達', '幼友達'
	  ];

	  this.customPluralForms = [];
	  this.customSingularForms = [];
	  this.singularForms = new FormSet();
	  this.pluralForms = new FormSet();

	  this.attach = attach;

	  this.addIrregular('神', '神神');
	  this.addIrregular('人', '人人');
	  this.addIrregular('年', '年年');
	  this.addIrregular('月', '月月');
	  this.addIrregular('日', '日日');
	  this.addIrregular('星', '星星');
	  this.addIrregular('島', '島島');
	  this.addIrregular('我', '我我');
	  this.addIrregular('山', '山山');
	  this.addIrregular('国', '国国');
	  this.addIrregular('所', '所所');
	  this.addIrregular('隅', '隅隅');

	  /**
	   * Notes:
	   * -たち exceptions: いたち, おいたち, ついたち, かたち, かおかたち, なりかたち, いでたち, はたち, からたち, なりたち
	   * -達 exceptions: 伊達, 男伊達, 栄達, 上意下達, 熟達, 上達, 下意上達, 先達, 送達, 速達, 即日速達, 書留速達, 調達, 通達, 伝達, 到達, 配達, 牛乳配達, 新聞配達, 無料配達, 四通八達, 発達, 未発達, 御用達, 宮内庁御用達, 練達, 闊達
	   * -等 exceptions: 一等, 下等, 何等, 均等, 勲等, 高等, 三等, 初等, 上等, 親等, 二親等, 数等, 対等, 中等, 同等, 特等, 二等, 品等, 不等, 平等, 悪平等, 男女平等, 不平等, 優等, 劣等
	   */

	  // Pluralize
	  this.pluralForms.regularForms.push([/^(.+)$/i, '$1たち']);

	  // Singularize
	  this.singularForms.regularForms.push([/^(.+)たち$/i, function(a, mask) {
	    if (['い', 'おい', 'つい', 'か', 'かおか', 'なりか', 'いで', 'は', 'から',
	      'なり'].indexOf(mask) >= 0)
	      return mask + 'たち';
	    return mask;
	  }]);
	  this.singularForms.regularForms.push([/^(.+)達$/i, function(a, mask) {
	    if (['伊', '伊', '栄', '上意下', '熟', '上', '下意上', '先', '送', '速',
	      '即日速', '書留速', '調', '通', '伝', '到', '配', '牛乳配', '新聞配', '無料配',
	      '四通八', '発', '未発', '御用', '宮内庁御用', '練', '闊'].indexOf(mask) >= 0)
	      return mask + '達';
	    return mask;
	  }]);  // Singularize nouns ending by -等, but not exceptions.
	  this.singularForms.regularForms.push([/^(.+)等$/i, function(a, mask) {
	    if (['一', '下', '何', '均', '勲', '高', '三', '初', '親', '二親', '数', '対',
	      '中', '同', '特', '二', '品', '不', '平', '悪平', '男女平', '不平', '優',
	      '劣'].indexOf(mask) >= 0)
	      return mask + '等';
	    return mask;
	  }]);
	  this.singularForms.regularForms.push([/^(人間|わたくし|私|てまえ|手前|野郎|やろう|勇者|がき|ガキ|餓鬼|あくとう|悪党|猫|家来)(共|ども)$/i, '$1']);
	  this.singularForms.regularForms.push([/^(神様|先生|あなた|大名|女中|奥様)(方|がた)$/i, '$1']);

	  this.pluralize = function(token) {
	    return this.ize(token, this.pluralForms, this.customPluralForms);
	  };

	  this.singularize = function(token) {
	    return this.ize(token, this.singularForms, this.customSingularForms);
	  };
	};

	util.inherits(NounInflector, SingularPluralInflector);

	module.exports = NounInflector;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var util = __webpack_require__(14),
	    SingularPluralInflector = __webpack_require__(81),
	    FormSet = __webpack_require__(82);

	function attach() {
	    var inflector = this;
	    
	    String.prototype.singularizePresentVerb = function() {
	        return inflector.singularize(this);
	    }
	    
	    String.prototype.pluralizePresentVerb = function() {
	        return inflector.pluralize(this);
	    }
	}

	var VerbInflector = function() {
	    this.ambiguous = [
	        'will'
	    ];
	    
	    this.attach = attach;
	        
	    this.customPluralForms = [];
	    this.customSingularForms = [];    
	    this.singularForms = new FormSet();
	    this.pluralForms = new FormSet();

	    this.addIrregular("am", "are");    
	    this.addIrregular("is", "are");
	    this.addIrregular("was", "were");
	    this.addIrregular("has", "have");
	    
	    this.singularForms.regularForms.push([/ed$/i, 'ed']);
	    this.singularForms.regularForms.push([/ss$/i, 'sses']);
	    this.singularForms.regularForms.push([/x$/i, 'xes']);    
	    this.singularForms.regularForms.push([/(h|z|o)$/i, '$1es']);
	    this.singularForms.regularForms.push([/$zz/i, 'zzes']);
	    this.singularForms.regularForms.push([/([^a|e|i|o|u])y$/i, '$1ies']);
	    this.singularForms.regularForms.push([/$/i, 's']);

	    this.pluralForms.regularForms.push([/sses$/i, 'ss']);
	    this.pluralForms.regularForms.push([/xes$/i, 'x']);
	    this.pluralForms.regularForms.push([/([cs])hes$/i, '$1h']);
	    this.pluralForms.regularForms.push([/zzes$/i, 'zz']);
	    this.pluralForms.regularForms.push([/([^h|z|o|i])es$/i, '$1e']);
	    this.pluralForms.regularForms.push([/ies$/i, 'y']);//flies->fly
	    this.pluralForms.regularForms.push([/e?s$/i, '']); 
	};

	util.inherits(VerbInflector, SingularPluralInflector);

	module.exports = VerbInflector;


/***/ },
/* 86 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	function nthForm(i) {
	    var teenth = (i % 100);

	    if(teenth > 10 && teenth < 14)
	        return 'th';
	    else {
	        switch(i % 10) {
	            case 1:
	                return 'st';
	                break;
	            case 2:
	                return 'nd';
	                break;            
	            case 3:
	                return 'rd';
	                break;
	            default:
	                return 'th';
	        }
	    }
	}

	function nth(i) {
	    return i.toString() + nthForm(i);
	}

	var CountInflector = function() {
	};

	CountInflector.nth = nth;

	module.exports = CountInflector;


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var IndexFile = __webpack_require__(88),
	  DataFile = __webpack_require__(95);

	function pushResults(data, results, offsets, callback) {
	  var wordnet = this;

	  if(offsets.length == 0) {
	    callback(results);
	  } else {
	    data.get(offsets.pop(), function(record) {
	      results.push(record);
	      wordnet.pushResults(data, results, offsets, callback);
	    });
	  }
	}

	function lookupFromFiles(files, results, word, callback) {
	  var wordnet = this;

	  if(files.length == 0)
	    callback(results);
	  else {
	    var file = files.pop();

	    file.index.lookup(word, function(record) {
	      if(record) {
	        wordnet.pushResults(file.data, results, record.synsetOffset, function() {
	          wordnet.lookupFromFiles(files, results, word, callback);
	        });
	      } else {
	        wordnet.lookupFromFiles(files, results, word, callback);
	      }
	    });
	  }
	}

	function lookup(word, callback) {
	  word = word.toLowerCase().replace(/\s+/g, '_');

	  this.lookupFromFiles([
	    {index: this.nounIndex, data: this.nounData},
	    {index: this.verbIndex, data: this.verbData},
	    {index: this.adjIndex, data: this.adjData},
	    {index: this.advIndex, data: this.advData},
	  ], [], word, callback);
	}

	function get(synsetOffset, pos, callback) {
	  var dataFile = this.getDataFile(pos);
	  var wordnet = this;

	  dataFile.get(synsetOffset, function(result) {
	    callback(result);
	  });
	}

	function getDataFile(pos) {
	    switch(pos) {
	      case 'n':
	        return this.nounData;
	      case 'v':
	        return this.verbData;
	      case 'a': case 's':
	        return this.adjData;
	      case 'r':
	        return this.advData;
	    }
	}

	function loadSynonyms(synonyms, results, ptrs, callback) {
	  var wordnet = this;

	  if(ptrs.length > 0) {
	    var ptr = ptrs.pop();

	    this.get(ptr.synsetOffset, ptr.pos, function(result) {
	      synonyms.push(result);
	      wordnet.loadSynonyms(synonyms, results, ptrs, callback);
	    });
	  } else {
	    wordnet.loadResultSynonyms(synonyms, results, callback);
	  }
	}

	function loadResultSynonyms(synonyms, results, callback) {
	  var wordnet = this;

	  if(results.length > 0) {
	    var result = results.pop();
	    wordnet.loadSynonyms(synonyms, results, result.ptrs, callback);
	  } else
	    callback(synonyms);
	}

	function lookupSynonyms(word, callback) {
	  var wordnet = this;

	  wordnet.lookup(word, function(results) {
	    wordnet.loadResultSynonyms([], results, callback);
	  });
	}

	function getSynonyms() {
	  var wordnet = this;
	  var callback = arguments[2] ? arguments[2] : arguments[1];
	  var pos = arguments[0].pos ? arguments[0].pos : arguments[1];
	  var synsetOffset = arguments[0].synsetOffset ? arguments[0].synsetOffset : arguments[0];

	  this.get(synsetOffset, pos, function(result) {
	    wordnet.loadSynonyms([], [], result.ptrs, callback);
	  });
	}

	function WordNet(dataDir) {

	  if (!dataDir) {
	    try {
	      var WNdb = __webpack_require__(96);
	    } catch(e) {
	      console.error("Please 'npm install WNdb' before using WordNet module or specify a dict directory.");
	      throw e;
	    }
	    dataDir = WNdb.path;
	  }

	  this.nounIndex = new IndexFile(dataDir, 'noun');
	  this.verbIndex = new IndexFile(dataDir, 'verb');
	  this.adjIndex = new IndexFile(dataDir, 'adj');
	  this.advIndex = new IndexFile(dataDir, 'adv');

	  this.nounData = new DataFile(dataDir, 'noun');
	  this.verbData = new DataFile(dataDir, 'verb');
	  this.adjData = new DataFile(dataDir, 'adj');
	  this.advData = new DataFile(dataDir, 'adv');

	  this.get = get;
	  this.lookup = lookup;
	  this.lookupFromFiles = lookupFromFiles;
	  this.pushResults = pushResults;
	  this.loadResultSynonyms = loadResultSynonyms;
	  this.loadSynonyms = loadSynonyms;
	  this.lookupSynonyms = lookupSynonyms;
	  this.getSynonyms = getSynonyms;
	  this.getDataFile = getDataFile;
	}

	module.exports = WordNet;


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var WordNetFile = __webpack_require__(93),
	  fs = __webpack_require__(66),
	  util = __webpack_require__(14);

	function getFileSize(path) {
	  var stat = fs.statSync(path);
	  return stat.size;
	}

	function findPrevEOL(fd, pos, callback) {
	  var buff = new Buffer(1024);
	  if(pos == 0)
	    callback(0);
	  else {
	    fs.read(fd, buff, 0, 1, pos, function(err, count) {
	      if(buff[0] == 10)
	        callback(pos + 1);
	      else
	        findPrevEOL(fd, pos - 1, callback);
	    });
	  }
	}

	function readLine(fd, pos, callback) {
	  var buff = new Buffer(1024);
	  findPrevEOL(fd, pos, function(pos) {
	    WordNetFile.appendLineChar(fd, pos, 0, buff, callback);
	  });
	}

	function miss(callback) {
	  callback({status: 'miss'});
	}

	function findAt(fd, size, pos, lastPos, adjustment, searchKey, callback, lastKey) {
	  if (lastPos == pos || pos >= size) {
	    miss(callback);
	  } else {
	    readLine(fd, pos, function(line) {
	      var tokens = line.split(/\s+/);
	      var key = tokens[0];

	    if(key == searchKey) {
	        callback({status: 'hit', key: key, 'line': line, tokens: tokens});
	      } else if(adjustment == 1 || key == lastKey)  {
	        miss(callback);
	      } else {
	        adjustment = Math.ceil(adjustment * 0.5);

	        if (key < searchKey) {
	          findAt(fd, size, pos + adjustment, pos, adjustment, searchKey, callback, key);
	        } else {
	          findAt(fd, size, pos - adjustment, pos, adjustment, searchKey, callback, key);
	        }
	      }
	    });
	  }
	}

	function find(searchKey, callback) {
	  var indexFile = this;

	  indexFile.open(function(err, fd, done) {
	    if(err) {
	      console.log(err);
	    } else {
	      var size = getFileSize(indexFile.filePath) - 1;
	      var pos = Math.ceil(size / 2);
	      findAt(fd, size, pos, null, pos, searchKey,
	        function(result) { callback(result); done(); });
	    }
	  });
	}

	function lookupFromFile(word, callback) {
	  this.find(word, function(record) {
	    var indexRecord = null;

	    if(record.status == 'hit') {
	      var ptrs = [], offsets = [];

	      for(var i = 0; i < parseInt(record.tokens[3]); i++)
	        ptrs.push(record.tokens[i]);

	      for(var i = 0; i < parseInt(record.tokens[2]); i++)
	        offsets.push(parseInt(record.tokens[ptrs.length + 6 + i], 10));

	      indexRecord = {
	        lemma: record.tokens[0],
	        pos: record.tokens[1],
	        ptrSymbol: ptrs,
	        senseCnt:  parseInt(record.tokens[ptrs.length + 4], 10),
	        tagsenseCnt:  parseInt(record.tokens[ptrs.length + 5], 10),
	        synsetOffset:  offsets
	      };
	    }

	    callback(indexRecord);
	  });
	}

	function lookup(word, callback) {
	  this.lookupFromFile(word, callback);
	}

	var IndexFile = function(dataDir, name) {
	  WordNetFile.call(this, dataDir, 'index.' + name);
	};

	util.inherits(IndexFile, WordNetFile);

	IndexFile.prototype.lookupFromFile = lookupFromFile;
	IndexFile.prototype.lookup = lookup;
	IndexFile.prototype.find = find;

	IndexFile.prototype._findAt = findAt;

	module.exports = IndexFile;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(89).Buffer))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(90)
	var ieee754 = __webpack_require__(91)
	var isArray = __webpack_require__(92)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	function typedArraySupport () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    this.length = 0
	    this.parent = undefined
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	} else {
	  // pre-set for values that may exist in the future
	  Buffer.prototype.length = undefined
	  Buffer.prototype.parent = undefined
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(89).Buffer, (function() { return this; }())))

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 91 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 92 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var  fs = __webpack_require__(66),
	  path = __webpack_require__(94),
	  util = __webpack_require__(14);


	function appendLineChar(fd, pos, buffPos, buff, callback) {
	  if(buffPos >= buff.length) {
	    var newBuff = new Buffer(buff.length * 2);
	    buff.copy(newBuff, 0, 0, buff.length);
	    buff = newBuff;
	  }

	  fs.read(fd, buff, buffPos, 1, pos, function(err, count) {
	    if(err)
	      console.log(err);
	    else {
	      if(buff[buffPos] == 10 || buffPos == buff.length)
	        callback(buff.slice(0, buffPos).toString('ASCII'));
	      else {
	        appendLineChar(fd, pos + 1, buffPos + 1, buff, callback);
	      }
	    }
	  });
	}

	function open(callback) {
	  var filePath = this.filePath;

	  fs.open(filePath, 'r', null, function(err, fd) {
	    if (err) {
	        console.log('Unable to open %s', filePath);
	        return;
	    }
	    callback(err, fd, function() {fs.close(fd)});
	  });
	}

	var WordNetFile = function(dataDir, fileName) {
	  this.dataDir = dataDir;
	  this.fileName = fileName;
	  this.filePath = __webpack_require__(94).join(this.dataDir, this.fileName);
	};

	WordNetFile.prototype.open = open;
	WordNetFile.appendLineChar = appendLineChar;

	module.exports = WordNetFile;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(89).Buffer))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var WordNetFile = __webpack_require__(93),
	  fs = __webpack_require__(66),
	  util = __webpack_require__(14);

	function get(location, callback) {
	  var buff = new Buffer(4096);

	  this.open(function(err, fd, done) {
	    WordNetFile.appendLineChar(fd, location, 0, buff, function(line) {
	      done();
	      var data = line.split('| ');
	      var tokens = data[0].split(/\s+/);
	      var ptrs = [];
	      var wCnt = parseInt(tokens[3], 16);
	      var synonyms = [];

	      for(var i = 0; i < wCnt; i++) {
	        synonyms.push(tokens[4 + i * 2]);
	      }

	      var ptrOffset = (wCnt - 1) * 2 + 6;
	      for(var i = 0; i < parseInt(tokens[ptrOffset], 10); i++) {
	        ptrs.push({
	          pointerSymbol: tokens[ptrOffset + 1 + i * 4],
	          synsetOffset: parseInt(tokens[ptrOffset + 2 + i * 4], 10),
	          pos: tokens[ptrOffset + 3 + i * 4],
	          sourceTarget: tokens[ptrOffset + 4 + i * 4]
	        });
	      }

	      // break "gloss" into definition vs. examples
	      var glossArray = data[1].split("; ");
	      var definition = glossArray[0];
	      var examples = glossArray.slice(1);    

	      for (var k=0; k < examples.length; k++) {
	        examples[k] = examples[k].replace(/\"/g,'').replace(/\s\s+/g,'');
	      }
	      
	      callback({
	        synsetOffset: parseInt(tokens[0], 10),
	        lexFilenum: parseInt(tokens[1], 10),
	        pos: tokens[2],
	        wCnt: wCnt,
	        lemma: tokens[4],
	        synonyms: synonyms,
	        lexId: tokens[5],
	        ptrs: ptrs,
	        gloss: data[1],
	        def: definition,
	        exp: examples
	      });
	    });
	  });
	}

	var DataFile = function(dataDir, name) {
	  WordNetFile.call(this, dataDir, 'data.' + name);
	};

	util.inherits(DataFile, WordNetFile);
	DataFile.prototype.get = get;

	module.exports = DataFile;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(89).Buffer))

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {
	exports.version = "3.1";	// this is the WordNet DB version
	exports.path = __webpack_require__(94).join(__dirname, "dict");
	exports.files = __webpack_require__(66).readdirSync(exports.path);

	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	Copyright (c) 2011, Rob Ellis, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var _ = __webpack_require__(61)._,
	    Tokenizer = __webpack_require__(60).WordTokenizer,
	    tokenizer = new Tokenizer(),
	    stopwords = __webpack_require__(11).words,
	    fs = __webpack_require__(66);

	function buildDocument(text, key) {
	    var stopOut;

	    if(typeof text === 'string') {
	        text = tokenizer.tokenize(text.toLowerCase());
	        stopOut = true;
	    } else if(!_.isArray(text)) {
	        stopOut = false;
	        return text;
	    }

	    return text.reduce(function(document, term) {
	        // next line solves https://github.com/NaturalNode/natural/issues/119
	        if(typeof document[term] === 'function') document[term] = 0;
	        if(!stopOut || stopwords.indexOf(term) < 0)
	            document[term] = (document[term] ? document[term] + 1 : 1);
	        return document;
	    }, {__key: key});
	}

	function tf(term, document) {
	    return document[term] ? document[term]: 0;
	}

	function documentHasTerm(term, document) {
	    return document[term] && document[term] > 0;
	}

	function TfIdf(deserialized) {
	    if(deserialized)
	        this.documents = deserialized.documents;
	    else
	        this.documents = [];

	    this._idfCache = {};
	}

	// backwards compatibility for < node 0.10
	function isEncoding(encoding) {
	    if (typeof Buffer.isEncoding !== 'undefined')
	        return Buffer.isEncoding(encoding);
	    switch ((encoding + '').toLowerCase()) {
	        case 'hex':
	        case 'utf8':
	        case 'utf-8':
	        case 'ascii':
	        case 'binary':
	        case 'base64':
	        case 'ucs2':
	        case 'ucs-2':
	        case 'utf16le':
	        case 'utf-16le':
	        case 'raw':
	            return true;
	    }
	    return false;
	}

	module.exports = TfIdf;
	TfIdf.tf = tf;

	TfIdf.prototype.idf = function(term, force) {

	    // Lookup the term in the New term-IDF caching,
	    // this will cut search times down exponentially on large document sets.
	    if(this._idfCache[term] && this._idfCache.hasOwnProperty(term) && force !== true)
	        return this._idfCache[term];

	    var docsWithTerm = this.documents.reduce(function(count, document) {
	        return count + (documentHasTerm(term, document) ? 1 : 0);
	    }, 0);

	    var idf = 1 + Math.log((this.documents.length) / ( 1 + docsWithTerm ));

	    // Add the idf to the term cache and return it
	    this._idfCache[term] = idf;
	    return idf;
	};

	// If restoreCache is set to true, all terms idf scores currently cached will be recomputed.
	// Otherwise, the cache will just be wiped clean
	TfIdf.prototype.addDocument = function(document, key, restoreCache) {
	    this.documents.push(buildDocument(document, key));

	    // make sure the cache is invalidated when new documents arrive
	    if(restoreCache === true) {
	        for(var term in this._idfCache) {
	            // invoking idf with the force option set will
	            // force a recomputation of the idf, and it will
	            // automatically refresh the cache value.
	            this.idf(term, true);
	        }
	    }   else {
	        this._idfCache = {};
	    }
	};

	// If restoreCache is set to true, all terms idf scores currently cached will be recomputed.
	// Otherwise, the cache will just be wiped clean
	TfIdf.prototype.addFileSync = function(path, encoding, key, restoreCache) {
	    if(!encoding)
	        encoding = 'utf8';
	    if(!isEncoding(encoding))
	        throw new Error('Invalid encoding: ' + encoding);

	    var document = fs.readFileSync(path, encoding);
	    this.documents.push(buildDocument(document, key));

	    // make sure the cache is invalidated when new documents arrive
	    if(restoreCache === true) {
	        for(var term in this._idfCache) {
	            // invoking idf with the force option set will
	            // force a recomputation of the idf, and it will
	            // automatically refresh the cache value.
	            this.idf(term, true);
	        }
	    }
	    else {
	        this._idfCache = {};
	    }
	};

	TfIdf.prototype.tfidf = function(terms, d) {
	    var _this = this;

	    if(!_.isArray(terms))
	        terms = tokenizer.tokenize(terms.toString().toLowerCase());

	    return terms.reduce(function(value, term) {
	        var idf = _this.idf(term);
	        idf = idf === Infinity ? 0 : idf;
	        return value + (tf(term, _this.documents[d]) * idf);
	    }, 0.0);
	};

	TfIdf.prototype.listTerms = function(d) {
	    var terms = [];

	    for(var term in this.documents[d]) {
	        if(term != '__key')
	           terms.push({term: term, tfidf: this.tfidf(term, d)});
	    }

	    return terms.sort(function(x, y) { return y.tfidf - x.tfidf; });
	};

	TfIdf.prototype.tfidfs = function(terms, callback) {
	    var tfidfs = new Array(this.documents.length);

	    for(var i = 0; i < this.documents.length; i++) {
	        tfidfs[i] = this.tfidf(terms, i);

	        if(callback)
	            callback(i, tfidfs[i], this.documents[i].__key);
	    }

	    return tfidfs;
	};

	// Define a tokenizer other than the default "WordTokenizer"
	TfIdf.prototype.setTokenizer = function(t) {
	    if(!_.isFunction(t.tokenize))
	        throw new Error('Expected a valid Tokenizer');
	    tokenizer = t;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(89).Buffer))

/***/ },
/* 98 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2014 Ken Koch

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	/** 
	 * The basis of the TRIE structure.
	 **/
	function Trie(caseSensitive) {
		this.dictionary = {};
		this.$ = false;

		if(typeof caseSensitive === "undefined") {
			caseSensitive = true;
		}

		this.cs = caseSensitive;
	}

	/**
	 * Add a single string to the TRIE, returns true if the word was already in the 
	 * trie.
	 **/
	Trie.prototype.addString = function(string) {
		if(this.cs === false) {
			string = string.toLowerCase();
		}

		// If the string has only one letter, mark this as a word.
		if(string.length === 0) {
			var wasWord = this.$;
			this.$ = true;
			return wasWord;
		}

		// Make sure theres a Trie node in our dictionary
		var next = this.dictionary[string[0]];

		if(!next) {
			this.dictionary[string[0]] = new Trie(this.cs);
			next = this.dictionary[string[0]];
		}

		// Continue adding the string
		return next.addString(string.substring(1));
	};

	/**
	 * Add multiple strings to the TRIE
	 **/
	Trie.prototype.addStrings = function(list) {
		for(var i in list) {
			this.addString(list[i]);
		}
	};

	/**
	 * A function to search the TRIE and return an array of
	 * words which have same prefix <prefix>
	 * for example if we had the following words in our database:
	 * a, ab, bc, cd, abc, abd
	 * and we search the string: a
	 * we will get :
	 * [a, ab, abc, abd]
	 **/
	Trie.prototype.keysWithPrefix = function(prefix) {
	    if(this.caseSensitive === false) {
	        prefix = prefix.toLowerCase();
	    }

	    function isEmpty (object) {
	        for (var key in object) if (object.hasOwnProperty(key)) return false;
	        return true;
	    }

	    function get (node, word) {
	        if(!node) return null;
	        if(word.length == 0) return node;
	        return get(node.dictionary[word[0]], word.substring(1));
	    }

	    function recurse ( node, stringAgg, resultsAgg) {
	        if (!node) return;

	        // Check if this is a word
	        if (node.$) {
	            resultsAgg.push(stringAgg);
	        }

	        if (isEmpty(node.dictionary)) {
	            return ;
	        }

	        for (var c in node.dictionary) {
	            recurse (node.dictionary[c],stringAgg + c, resultsAgg);
	        }
	    }

	    var results = [];
	    recurse (get(this, prefix), prefix, results);
	    return results;
	};

	/** 
	 * A function to search the given string and return true if it lands
	 * on on a word. Essentially testing if the word exists in the database.
	 **/
	Trie.prototype.contains = function(string) {
		if(this.cs === false) {
			string = string.toLowerCase();
		}

		if(string.length === 0) {
			return this.$;
		}

		// Otherwise, we need to continue searching
		var firstLetter = string[0];
		var next = this.dictionary[firstLetter];		

		// If we don't have a node, this isn't a word
		if(!next) {
			return false;
		}

		// Otherwise continue the search at the next node
		return next.contains(string.substring(1));
	}

	/**
	 * A function to search the TRIE and return an array of words which were encountered along the way.
	 * This will only return words with full prefix matches.
	 * for example if we had the following words in our database:
	 * a, ab, bc, cd, abc
	 * and we searched the string: abcd
	 * we would get only:
	 * [a, ab, abc]
	 **/
	Trie.prototype.findMatchesOnPath = function(search) {
		if(this.cs === false) {
			search = search.toLowerCase();
		}

		function recurse(node, search, stringAgg, resultsAgg) {
			// Check if this is a word.
			if(node.$) {
				resultsAgg.push(stringAgg);
			}

			// Check if the have completed the seearch
			if(search.length === 0) {
				return resultsAgg;
			}

			// Otherwise, continue searching
			var next = node.dictionary[search[0]];
			if(!next) {
				return resultsAgg;
			}
			return recurse(next, search.substring(1), stringAgg + search[0], resultsAgg);
		};

		return recurse(this, search, "", []);
	};

	/**
	 * Returns the longest match and the remaining part that could not be matched.
	 * inspired by [NLTK containers.trie.find_prefix](http://nltk.googlecode.com/svn-/trunk/doc/api/nltk.containers.Trie-class.html).
	 **/
	Trie.prototype.findPrefix = function(search) {
		if(this.cs === false) {
			search = search.toLowerCase();
		}
		
		function recurse(node, search, stringAgg, lastWord) {
			// Check if this is a word
			if(node.$) {
				lastWord = stringAgg;
			}

			// Check if we have no more to search
			if(search.length === 0) {
				return [lastWord, search];
			}

			// Continue searching
			var next = node.dictionary[search[0]];
			if(!next) {
				return [lastWord, search];
			}
			return recurse(next, search.substring(1), stringAgg + search[0], lastWord);
		};

		return recurse(this, search, "", null);
	};

	/**
	 * Computes the number of actual nodes from this node to the end.
	 * Note: This involves traversing the entire structure and may not be
	 * good for frequent use.
	 **/
	Trie.prototype.getSize = function() { 
		var total = 1;
		for(var c in this.dictionary) {
			total += this.dictionary[c].getSize();
		}
		return total;
	};

	/**
	 * EXPORT THE TRIE
	 **/
	module.exports = Trie;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Rob Ellis, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var _ = __webpack_require__(61)._;

	/*
	 Sentences Analizer Class
	 From http://www.writingcentre.uottawa.ca/hypergrammar/sntpurps.html

	 Take a POS input and analyse it for
	  - Type of Sentense
	     - Interrogative
	       - Tag Questions
	       - 
	     - Declarative
	     - Exclamatory 
	     - Imperative

	  - Parts of a Sentense
	     - Subject
	     - Predicate

	  - Show Preposition Phrases
	*/

	var Sentences = function(pos, callback) {
	    this.posObj = pos;
	    this.senType = null;
	    callback(this);
	};

	Sentences.prototype.part = function(callback) {
	    var subject = [],
		predicat = [],
		verbFound = false;
		
	    this.prepositionPhrases();
		
	    for (var i = 0; i < this.posObj.tags.length; i++) {
	        if (this.posObj.tags[i].pos == "VB") {
	            if (i === 0) {
	                verbFound = true;
	            } else {
	                // We need to Test for any EX before the VB
	                if (this.posObj.tags[i - 1].pos != "EX") {
	                    verbFound = true;
	                } else {
	                    predicat.push(this.posObj.tags[i].token);
	                }					
	            }
	        }

	        // Add Pronoun Phrase (pp) Or Subject Phrase (sp)
	        if (!verbFound) {
	            if (this.posObj.tags[i].pp != true)
	                this.posObj.tags[i].spos = "SP";
	            
	            subject.push(this.posObj.tags[i].token);
	        } else {
	            if (this.posObj.tags[i].pp != true)
	                this.posObj.tags[i].spos = "PP";
	            
	            predicat.push(this.posObj.tags[i].token)
	        }
	    }
		
	    if (subject.length == 0) {
		this.posObj.tags.push({token:"You",spos:"SP",pos:"PRP",added:true});
	    }
	    
	    callback(this);	
	};

	// Takes POS and removes IN to NN or NNS
	// Adds a PP for each prepositionPhrases
	Sentences.prototype.prepositionPhrases = function() {
	    var remove = false;

	    for (var i = 0; i < this.posObj.tags.length; i++) {
	        if (this.posObj.tags[i].pos.match("IN")) {
	            remove = true;
	        }
	    
	        if (remove) {
	            this.posObj.tags[i].pp = true;
	        }
	    
	        if (this.posObj.tags[i].pos.match("NN")) {
	            remove = false;
	        }
	    }	
	};

	Sentences.prototype.subjectToString = function() {
	    return this.posObj.tags.map(function(t){ if (t.spos == "SP" || t.spos == "S" ) return t.token }).join(' ');
	};

	Sentences.prototype.predicateToString = function() {
	    return this.posObj.tags.map(function(t){ if (t.spos == "PP" || t.spos == "P" ) return t.token }).join(' ');
	};

	Sentences.prototype.implicitYou = function() {
	    for (var i = 0; i < this.posObj.tags.length;i++) {
	        if (this.posObj.tags[i].added) {
	            return true;
	        }
	    }
	    
	    return false;
	};

	Sentences.prototype.toString = function() {
	    return this.posObj.tags.map(function(t){return t.token}).join(' ');
	};

	// This is quick and incomplete.
	Sentences.prototype.type = function(callback) {
	    var callback = callback || false;

	    // Check for implicit you before popping a tag.
	    var implicitYou = this.implicitYou();

	    // FIXME - punct seems useless
	    var lastElement = this.posObj.punct();
	    lastElement = (lastElement.length != 0) ? lastElement.pop() : this.posObj.tags.pop();

	    if (lastElement.pos !== ".") {
	        if (implicitYou) {
	            this.senType = "COMMAND";
	        } else if (_(["WDT","WP","WP$","WRB"]).contains(this.posObj.tags[0].pos)) {
	            // Sentences that start with: who, what where when why and how, then they are questions
	            this.senType = "INTERROGATIVE";
	        } else if (_(["PRP"]).contains(lastElement.pos)) {
	            // Sentences that end in a Personal pronoun are most likely questions
	            // eg. We should run away, should we [?]
	            // eg. You want to see that again, do you [?]
	            this.senType = "INTERROGATIVE";
	        } else {
	            this.senType = "UNKNOWN";
	        }
	            
	    } else {
	        switch(lastElement.token) {
	            case "?": this.senType = "INTERROGATIVE"; break;
	            case "!": this.senType = (implicitYou) ? "COMMAND":"EXCLAMATORY"; break;
	            case ".": this.senType = (implicitYou) ? "COMMAND":"DECLARATIVE";	break;
	        }
	    }
	    
	    if (callback && _(callback).isFunction()) {
	        callback(this);
	    } else {
	        return this.senType;
	    }
	};

	module.exports = Sentences;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2014, Lee Wenzhu

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */
	'use strict';

	var EdgeWeightedDigraph = __webpack_require__(101),
	    Topological = __webpack_require__(103);

	/**
	  *  The ShortestPathTree represents a data type for solving the
	  *  single-source shortest paths problem in edge-weighted directed
	  *  acyclic graphs (DAGs). The edge weights can be positive, negative, or zero.
	  *  This implementation uses a topological-sort based algorithm.
	  *  the distTo() and hasPathTo() methods take
	  *  constant time and the pathTo() method takes time proportional to the
	  *  number of edges in the longest path returned.
	  */
	var ShortestPathTree = function(digraph, start) {
	    var _this = this;
	    this.edgeTo = [];
	    this.distTo = [];
	    this.distTo[start] = 0.0;
	    this.start = start;
	    this.top = new Topological(digraph);
	    this.top.order().forEach(function(vertex){
	        _this.relaxVertex(digraph, vertex, _this);
	    });
	};

	ShortestPathTree.prototype.relaxEdge = function(e) {
	    var distTo = this.distTo,
	        edgeTo = this.edgeTo;
	    var v = e.from(), w = e.to();
	    if (distTo[w] > distTo[v] + e.weight) {
	        distTo[w] = distTo[v] + e.weight;
	        edgeTo[w] = e;
	    }
	};

	/**
	 * relax a vertex v in the specified digraph g
	 * @param {EdgeWeightedDigraph} the apecified digraph
	 * @param {Vertex} v vertex to be relaxed
	 */
	ShortestPathTree.prototype.relaxVertex = function(digraph, vertex, tree) {
	    var distTo = tree.distTo;
	    var edgeTo = tree.edgeTo;
	    digraph.getAdj(vertex).forEach(function(edge){
	        var w = edge.to();
	        distTo[w] = /\d/.test(distTo[w]) ? distTo[w] : Number.MAX_VALUE;
	        distTo[vertex] = distTo[vertex] || 0;
	        if (distTo[w] > distTo[vertex] + edge.weight) {
	            // in case of the result of 0.28+0.34 is 0.62000001
	            distTo[w] = parseFloat((distTo[vertex] + edge.weight).toFixed(2));
	            edgeTo[w] = edge;
	        }
	    });

	};

	ShortestPathTree.prototype.getDistTo = function(v) {
	    return this.distTo[v];
	};

	ShortestPathTree.prototype.hasPathTo = function(v) {
	    var dist = this.distTo[v];
	    if(v == this.start) return false;
	    return /\d/.test(dist) ? dist != Number.MAX_VALUE : false;
	};

	ShortestPathTree.prototype.pathTo = function(v) {
	    if (!this.hasPathTo(v) || v == this.start) return [];
	    var path = [];
	    var edgeTo = this.edgeTo;
	    for (var e = edgeTo[v]; !!e; e = edgeTo[e.from()]) {
	        path.push(e.to());
	    }
	    path.push(this.start);
	    return path.reverse();
	};

	module.exports = ShortestPathTree;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2014, Lee Wenzhu

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */
	'use strict';

	var util = __webpack_require__(14),
	    Bag = __webpack_require__(102);

	var DirectedEdge = function(start, end, weight) {
	    this.start = start;
	    this.end = end;
	    this.weight = weight;
	};

	DirectedEdge.prototype.weight = function() {
	    return this.weight;
	};

	DirectedEdge.prototype.from = function() {
	    return this.start;
	};

	DirectedEdge.prototype.to = function() {
	    return this.end;
	};

	DirectedEdge.prototype.toString = function() {
	    return util.format('%s -> %s, %s', this.start, this.end, this.weight);
	};

	var EdgeWeightedDigraph = function() {
	    this.edgesNum = 0;
	    this.adj = []; // adjacency list
	};

	/**
	 * the number of vertexs saved.
	 */
	EdgeWeightedDigraph.prototype.v = function() {
	    return this.adj.length;
	};

	/**
	 * the number of edges saved.
	 */
	EdgeWeightedDigraph.prototype.e = function() {
	    return this.edgesNum;
	};

	EdgeWeightedDigraph.prototype.add = function(start, end, weight) {
	    var e = new DirectedEdge(start, end, weight);
	    this.addEdge(e);
	};

	EdgeWeightedDigraph.prototype.addEdge = function(e) {
	    if(!this.adj[e.from()]) {
	        this.adj[e.from()] = new Bag();
	    }
	    this.adj[e.from()].add(e);
	    this.edgesNum++;
	};

	/**
	 * use callback on all edges from v.
	 */
	EdgeWeightedDigraph.prototype.getAdj = function(v) {
	    if(!this.adj[v]) return [];
	    return this.adj[v].unpack();
	};

	/**
	 * use callback on all edges.
	 */
	EdgeWeightedDigraph.prototype.edges = function() {
	    var adj = this.adj;
	    var list = new Bag();
	    for(var i in adj) {
	        adj[i].unpack().forEach(function(item) {
	            list.add(item);
	        });
	    }
	    return list.unpack();
	};

	EdgeWeightedDigraph.prototype.toString = function() {
	    var result = [];
	    var list = this.edges();
	    list.forEach(function(edge) {
	        result.push(edge.toString());
	    });
	    return result.join('\n');
	};

	module.exports = EdgeWeightedDigraph;


/***/ },
/* 102 */
/***/ function(module, exports) {

	/*
	 Copyright (c) 2014, Lee Wenzhu

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */
	'use strict';

	function Bag() {
	    this.dictionary = [];
	    this.nElement = 0;
	};

	Bag.prototype.add = function(element) {
	    this.dictionary.push(element);
	    return this;
	};

	Bag.prototype.isEmpty = function() {
	    return this.nElement > 0;
	};

	Bag.prototype.contains = function(item) {
	    return this.dictionary.indexOf(item) >= 0;
	};

	/**
	 * unpack the bag , and get all items
	 */
	Bag.prototype.unpack = function() {
	    // return a copy is better than original
	    return this.dictionary.slice();
	};

	module.exports = Bag;


/***/ },
/* 103 */
/***/ function(module, exports) {

	/*
	 Copyright (c) 2014, Lee Wenzhu

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */
	'use strict';

	/**
	 * a topo sort for a digraph
	 * @param {Digraph}
	 */
	var Topological = function(g) {
	    this.isDag = true;
	    this.sorted = topoSort(uniqueVertexs(g.edges()), g.edges());
	};

	Topological.prototype.isDAG = function() {
	    return this.isDag;
	};

	/**
	 * get ordered vertexs of digraph
	 */
	Topological.prototype.order = function() {
	    return this.sorted.slice();
	};

	/**
	 * @param {Array} all vertex in digraph
	 * @param {Object} all edges in the digraph
	 */
	function topoSort(vertexs, edges) {
	    var sorted = [];
	    var cursor = vertexs.length,
	        visited = {},
	        i = cursor;
	    while (i--) {
	        if (!visited[i]) visit(vertexs[i], i, []);
	    }

	    return sorted.reverse();

	    function visit(vertex, i, predecessors) {
	        if(predecessors.indexOf(vertex) >= 0) {
	            throw new Error('Cyclic dependency:' + JSON.stringify(vertex));
	        }

	        if(visited[i]) return;
	        visited[i] = true;

	        var outgoing = edges.filter(function(edge) {
	            return edge.to() === vertex;
	        });

	        var preds = [];
	        if(outgoing.length > 0) {
	            preds = predecessors.concat(vertex);
	        }
	        var from;
	        outgoing.forEach(function(edge) {
	            from = edge.from();
	            visit(from, vertexs.indexOf(from), preds);
	        });

	        sorted[--cursor] = vertex;
	    };
	};


	function uniqueVertexs(edges) {
	    var vertexs = [];
	    var from, to;
	    edges.forEach(function(edge) {
	        from = edge.from();
	        to = edge.to();
	        if (vertexs.indexOf(from) < 0) vertexs.push(from);
	        if (vertexs.indexOf(to) < 0) vertexs.push(to);
	    });
	    return vertexs;
	};

	module.exports = Topological;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2014, Lee Wenzhu

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */
	'use strict';

	var EdgeWeightedDigraph = __webpack_require__(101),
	    Topological = __webpack_require__(103);

	/**
	  *  The LongestPathTree represents a data type for solving the
	  *  single-source longest paths problem in edge-weighted directed
	  *  acyclic graphs (DAGs). The edge weights can be positive, negative, or zero.
	  *  This implementation uses a topological-sort based algorithm.
	  *  the distTo() and hasPathTo() methods take
	  *  constant time and the pathTo() method takes time proportional to the
	  *  number of edges in the longest path returned.
	  */
	var LongestPathTree = function(digraph, start) {
	    var _this = this;
	    this.edgeTo = [];
	    this.distTo = [];
	    this.distTo[start] = 0.0;
	    this.start = start;
	    this.top = new Topological(digraph);
	    this.top.order().forEach(function(vertex){
	        _this.relaxVertex(digraph, vertex, _this);
	    });
	};

	LongestPathTree.prototype.relaxEdge = function(e) {
	    var distTo = this.distTo,
	        edgeTo = this.edgeTo;
	    var v = e.from(), w = e.to();
	    if (distTo[w] < distTo[v] + e.weight) {
	        distTo[w] = distTo[v] + e.weight;
	        edgeTo[w] = e;
	    }
	};

	/**
	 * relax a vertex v in the specified digraph g
	 * @param {EdgeWeightedDigraph} the apecified digraph
	 * @param {Vertex} v vertex to be relaxed
	 */
	LongestPathTree.prototype.relaxVertex = function(digraph, vertex, tree) {
	    var distTo = tree.distTo;
	    var edgeTo = tree.edgeTo;

	    digraph.getAdj(vertex).forEach(function(edge){
	        var w = edge.to();
	        distTo[w] = distTo[w] || 0.0;
	        distTo[vertex] = distTo[vertex] || 0.0;
	        if (distTo[w] < distTo[vertex] + edge.weight) {
	            // in case of the result of 0.28+0.34 is 0.62000001
	            distTo[w] = parseFloat((distTo[vertex] + edge.weight).toFixed(2));
	            edgeTo[w] = edge;
	        }
	    });

	};

	LongestPathTree.prototype.getDistTo = function(v) {
	    return this.distTo[v];
	};

	LongestPathTree.prototype.hasPathTo = function(v) {
	    return !!this.distTo[v];
	};

	LongestPathTree.prototype.pathTo = function(v) {
	    if (!this.hasPathTo(v)) return [];
	    var path = [];
	    var edgeTo = this.edgeTo;
	    for (var e = edgeTo[v]; !!e; e = edgeTo[e.from()]) {
	        path.push(e.to());
	    }
	    path.push(this.start);
	    return path.reverse();
	};

	module.exports = LongestPathTree;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Rob Ellis, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var _ = __webpack_require__(61)._,
	    Tokenizer = __webpack_require__(60).WordTokenizer,
	    tokenizer = new Tokenizer();

	exports.setTokenizer = function(t) {
	    if(!_.isFunction(t.tokenize))
	        throw new Error('Expected a valid Tokenizer');
	    tokenizer = t;
	}

	exports.ngrams = function(sequence, n, startSymbol, endSymbol) {
	    return ngrams(sequence, n, startSymbol, endSymbol);
	}

	exports.bigrams = function(sequence, startSymbol, endSymbol) {
	    return ngrams(sequence, 2, startSymbol, endSymbol);
	}

	exports.trigrams = function(sequence, startSymbol, endSymbol) {
	    return ngrams(sequence, 3, startSymbol, endSymbol);
	}

	var ngrams = function(sequence, n, startSymbol, endSymbol) {
	    var result = [];
	    
	    if (!_(sequence).isArray()) {
	        sequence = tokenizer.tokenize(sequence);
	    }

	    var count = _.max([0, sequence.length - n + 1]);

	    // Check for left padding    
	    if(typeof startSymbol !== "undefined" && startSymbol !== null) {
	        // Create an array of (n) start symbols
	        var blanks = [];
	        for(var i = 0 ; i < n ; i++) {
	            blanks.push(startSymbol);
	        }

	        // Create the left padding
	        for(var p = n - 1 ; p > 0 ; p--) {
	            // Create a tuple of (p) start symbols and (n - p) words
	            result.push(blanks.slice(0, p).concat(sequence.slice(0, n - p)));
	        }
	    }

	    // Build the complete ngrams
	    for (var i = 0; i < count; i++) {
	        result.push(sequence.slice(i, i + n));
	    }

	    // Check for right padding
	    if(typeof endSymbol !== "undefined" && endSymbol !== null) {
	        // Create an array of (n) end symbols
	        var blanks = [];
	        for(var i = 0 ; i < n ; i++) {
	            blanks.push(endSymbol);
	        }

	        // create the right padding
	        for(var p = n - 1 ; p > 0 ; p--) {
	            // Create a tuple of (p) start symbols and (n - p) words
	            result.push(sequence.slice(sequence.length - p, sequence.length).concat(blanks.slice(0, n - p)));
	        }
	    }
	    
	    return result;
	}



/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Lee Wenzhu

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var _ = __webpack_require__(61)._;

	exports.ngrams = function(sequence, n, startSymbol, endSymbol) {
	    return ngrams(sequence, n, startSymbol, endSymbol);
	}

	exports.bigrams = function(sequence, startSymbol, endSymbol) {
	    return ngrams(sequence, 2, startSymbol, endSymbol);
	}

	exports.trigrams = function(sequence, startSymbol, endSymbol) {
	    return ngrams(sequence, 3, startSymbol, endSymbol);
	}

	var ngrams = function(sequence, n, startSymbol, endSymbol) {
	    var result = [], i;
	    
	    if (!_(sequence).isArray()) {
	        sequence = sequence.split('');
	    }

	    var count = _.max([0, sequence.length - n + 1]);

	    // Check for left padding    
	    if(typeof startSymbol !== "undefined" && startSymbol !== null) {
	        // Create an array of (n) start symbols
	        var blanks = [];
	        for(i = 0 ; i < n ; i++) {
	            blanks.push(startSymbol);
	        }

	        // Create the left padding
	        for(var p = n - 1 ; p > 0 ; p--) {
	            // Create a tuple of (p) start symbols and (n - p) words
	            result.push(blanks.slice(0, p).concat(sequence.slice(0, n - p)));
	        }
	    }

	    // Build the complete ngrams
	    for (i = 0; i < count; i++) {
	        result.push(sequence.slice(i, i + n));
	    }

	    // Check for right padding
	    if(typeof endSymbol !== "undefined" && endSymbol !== null) {
	        // Create an array of (n) end symbols
	        var blanks = [];
	        for(var i = 0 ; i < n ; i++) {
	            blanks.push(endSymbol);
	        }

	        // create the right padding
	        for(var p = n - 1 ; p > 0 ; p--) {
	            // Create a tuple of (p) start symbols and (n - p) words
	            result.push(sequence.slice(sequence.length - p, sequence.length).concat(blanks.slice(0, n - p)));
	        }
	    }
	    
	    return result;
	};



/***/ },
/* 107 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2012, Adam Phillabaum, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	Unless otherwise stated by a specific section of code

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// Computes the Jaro distance between two string -- intrepreted from:
	// http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance
	// s1 is the first string to compare
	// s2 is the second string to compare
	function distance(s1, s2) {
	    if (typeof(s1) != "string" || typeof(s2) != "string") return 0;
	    if (s1.length == 0 || s2.length == 0) 
	        return 0;
	    s1 = s1.toLowerCase(), s2 = s2.toLowerCase();
	    var matchWindow = (Math.floor(Math.max(s1.length, s2.length) / 2.0)) - 1;
	    var matches1 = new Array(s1.length);
	    var matches2 = new Array(s2.length);
	    var m = 0; // number of matches
	    var t = 0; // number of transpositions

	    //debug helpers
	    //console.log("s1: " + s1 + "; s2: " + s2);
	    //console.log(" - matchWindow: " + matchWindow);

	    // find matches
	    for (var i = 0; i < s1.length; i++) {
		var matched = false;

		// check for an exact match
		if (s1[i] ==  s2[i]) {
			matches1[i] = matches2[i] = matched = true;
			m++
		}

		// check the "match window"
		else {
	        	// this for loop is a little brutal
	        	for (k = (i <= matchWindow) ? 0 : i - matchWindow;
	        		(k <= i + matchWindow) && k < s2.length && !matched;
				k++) {
	            		if (s1[i] == s2[k]) {
	                		if(!matches1[i] && !matches2[k]) {
	                	    		m++;
	               		}

	        	        matches1[i] = matches2[k] = matched = true;
	        	    }
	        	}
		}
	    }

	    if(m == 0)
	        return 0.0;

	    // count transpositions
	    var k = 0;

	    for(var i = 0; i < s1.length; i++) {
	    	if(matches1[k]) {
	    	    while(!matches2[k] && k < matches2.length)
	                k++;
		        if(s1[i] != s2[k] &&  k < matches2.length)  {
	                t++;
	            }

	    	    k++;
	    	}
	    }
	    
	    //debug helpers:
	    //console.log(" - matches: " + m);
	    //console.log(" - transpositions: " + t);
	    t = t / 2.0;
	    return (m / s1.length + m / s2.length + (m - t) / m) / 3;
	}

	// Computes the Winkler distance between two string -- intrepreted from:
	// http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance
	// s1 is the first string to compare
	// s2 is the second string to compare
	// dj is the Jaro Distance (if you've already computed it), leave blank and the method handles it
	function JaroWinklerDistance(s1, s2, dj) {
			if (s1 == s2) {
					return 1 
			}
			else {
			    var jaro;
			    (typeof(dj) == 'undefined')? jaro = distance(s1,s2) : jaro = dj;
			    var p = 0.1; //
			    var l = 0 // length of the matching prefix
			    while(s1[l] == s2[l] && l < 4)
			        l++;
			    
			    return jaro + l * p * (1 - jaro);
			}
	}
	module.exports = JaroWinklerDistance;


/***/ },
/* 108 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2012, Sid Nallu, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	/*
	 * contribution by sidred123
	 */

	/*
	 * Compute the Levenshtein distance between two strings.
	 * Algorithm based from Speech and Language Processing - Daniel Jurafsky and James H. Martin.
	 */

	function LevenshteinDistance (source, target, options) {
	    options = options || {};
	    if(isNaN(options.insertion_cost)) options.insertion_cost = 1;
	    if(isNaN(options.deletion_cost)) options.deletion_cost = 1;
	    if(isNaN(options.substitution_cost)) options.substitution_cost = 1;

	    var sourceLength = source.length;
	    var targetLength = target.length;
	    var distanceMatrix = [[0]];

	    for (var row =  1; row <= sourceLength; row++) {
	        distanceMatrix[row] = [];
	        distanceMatrix[row][0] = distanceMatrix[row-1][0] + options.deletion_cost;
	    }

	    for (var column = 1; column <= targetLength; column++) {
	        distanceMatrix[0][column] = distanceMatrix[0][column-1] + options.insertion_cost;
	    }

	    for (var row = 1; row <= sourceLength; row++) {
	        for (var column = 1; column <= targetLength; column++) {
	            var costToInsert = distanceMatrix[row][column-1] + options.insertion_cost;
	            var costToDelete = distanceMatrix[row-1][column] + options.deletion_cost;

	            var sourceElement = source[row-1];
	            var targetElement = target[column-1];
	            var costToSubstitute = distanceMatrix[row-1][column-1];
	            if (sourceElement !== targetElement) {
	                costToSubstitute = costToSubstitute + options.substitution_cost;
	            }
	            distanceMatrix[row][column] = Math.min(costToInsert, costToDelete, costToSubstitute);
	        }
	    }
	    return distanceMatrix[sourceLength][targetLength];
	}

	module.exports = LevenshteinDistance;


/***/ },
/* 109 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, John Crepezzi, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// Get all of the pairs of letters for a string
	var letterPairs = function (str) {
	  var numPairs = str.length - 1;
	  var pairs = new Array(numPairs);
	  for (var i = 0; i < numPairs; i++) {
	    pairs[i] = str.substring(i, i + 2);
	  }
	  return pairs;
	};

	// Get all of the pairs in all of the words for a string
	var wordLetterPairs = function (str) {
	  var allPairs = [], pairs;
	  var words = str.split(/\s+/);
	  for (var i = 0; i < words.length; i++) {
	    pairs = letterPairs(words[i]);
	    allPairs.push.apply(allPairs, pairs);
	  }
	  return allPairs;
	};

	// Perform some sanitization steps
	var sanitize = function (str) {
	  return str.toLowerCase().replace(/^\s+|\s+$/g, '');
	};

	// Compare two strings, and spit out a number from 0-1
	var compare = function (str1, str2) {
	  var pairs1 = wordLetterPairs(sanitize(str1));
	  var pairs2 = wordLetterPairs(sanitize(str2));
	  var intersection = 0, union = pairs1.length + pairs2.length;
	  var i, j, pair1, pair2;
	  for (i = 0; i < pairs1.length; i++) {
	    pair1 = pairs1[i];
	    for (j = 0; j < pairs2.length; j++) {
	      pair2 = pairs2[j];
	      if (pair1 == pair2) {
	        intersection ++;
	        delete pairs2[j];
	        break;
	      }
	    }
	  }
	  return 2 * intersection / union;
	};

	module.exports = compare;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2013, Kenneth Koch

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * The english normalizer will create a string in which all contractions are expanded to their 
	 * full meaning (i.e. "we'll" becomes "we will"). 
	 *
	 * It currently works off a conversion table and falls back to a set of rules.
	 * Since it is applied first, the conversion table provides an "override" for the rules.
	 **/
	var replacer = __webpack_require__(56).replacer;

	var conversionTable = {
		"can't":"can not",
		"won't":"will not",
		"couldn't've":"could not have",
		"i'm":"I am",
		"how'd":"how did"
	};

	var rules = [
		{ regex: /([azAZ]*)n\'[tT]/g, output: "$1 not" },
		{ regex: /([azAZ]*)\'[sS]/g, output: "$1 is" },
		{ regex: /([azAZ]*)\'[lL][lL]/g, output: "$1 will" },
		{ regex: /([azAZ]*)\'[rR][eE]/g, output: "$1 are" },
		{ regex: /([azAZ]*)\'[vV][eE]/g, output: "$1 have" },
		{ regex: /([azAZ]*)\'[dD]/g, output: "$1 would" }
	];

	// Accepts a list of tokens to expand.
	var normalize_tokens = function(tokens) {
		if(typeof tokens === "string") {
			tokens = [tokens];
		}
	        var results = [];
		var rule_count = rules.length;
		var num_tokens = tokens.length;
	        var i, token, r, rule;
	    
	        for (i = 0; i < num_tokens; i++) {
	            token = tokens[i];
	            // Check the conversion table
	            if (conversionTable[token.toLowerCase()]) {
	                results = results.concat(conversionTable[token.toLowerCase()].split(/\W+/));
	            }
	            
	            // Apply the rules
	            else {
	                var matched = false;
	                for ( r = 0; r < rule_count; r++) {
	                    rule = rules[r];
	                    if (token.match(rule.regex)) {
	                        results = results.concat(token.replace(rule.regex, rule.output).split(/\W+/));
	                        matched = true;
	                        break;
	                    }
	                }
	                if (!matched) {
	                    results.push(token);
	                }
	            }
	        }

		return results;
	};





	// export the relevant stuff.
	exports.normalize_tokens = normalize_tokens;






/***/ },
/* 111 */
/***/ function(module, exports) {

	/*
	 Copyright (c) 2012, Alexy Maslennikov

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * Script to remove diacritics. Original source was taken from
	 * http://lehelk.com/2011/05/06/script-to-remove-diacritics/
	 */
	var diacriticsRemovalMap = [
	    {'base':'A', 'letters':/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},
	    {'base':'AA','letters':/[\uA732]/g},
	    {'base':'AE','letters':/[\u00C6\u01FC\u01E2]/g},
	    {'base':'AO','letters':/[\uA734]/g},
	    {'base':'AU','letters':/[\uA736]/g},
	    {'base':'AV','letters':/[\uA738\uA73A]/g},
	    {'base':'AY','letters':/[\uA73C]/g},
	    {'base':'B', 'letters':/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},
	    {'base':'C', 'letters':/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},
	    {'base':'D', 'letters':/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},
	    {'base':'DZ','letters':/[\u01F1\u01C4]/g},
	    {'base':'Dz','letters':/[\u01F2\u01C5]/g},
	    {'base':'E', 'letters':/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},
	    {'base':'F', 'letters':/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},
	    {'base':'G', 'letters':/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},
	    {'base':'H', 'letters':/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},
	    {'base':'I', 'letters':/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},
	    {'base':'J', 'letters':/[\u004A\u24BF\uFF2A\u0134\u0248]/g},
	    {'base':'K', 'letters':/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},
	    {'base':'L', 'letters':/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},
	    {'base':'LJ','letters':/[\u01C7]/g},
	    {'base':'Lj','letters':/[\u01C8]/g},
	    {'base':'M', 'letters':/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},
	    {'base':'N', 'letters':/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},
	    {'base':'NJ','letters':/[\u01CA]/g},
	    {'base':'Nj','letters':/[\u01CB]/g},
	    {'base':'O', 'letters':/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},
	    {'base':'OI','letters':/[\u01A2]/g},
	    {'base':'OO','letters':/[\uA74E]/g},
	    {'base':'OU','letters':/[\u0222]/g},
	    {'base':'P', 'letters':/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},
	    {'base':'Q', 'letters':/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},
	    {'base':'R', 'letters':/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},
	    {'base':'S', 'letters':/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},
	    {'base':'T', 'letters':/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},
	    {'base':'TZ','letters':/[\uA728]/g},
	    {'base':'U', 'letters':/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},
	    {'base':'V', 'letters':/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},
	    {'base':'VY','letters':/[\uA760]/g},
	    {'base':'W', 'letters':/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},
	    {'base':'X', 'letters':/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},
	    {'base':'Y', 'letters':/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},
	    {'base':'Z', 'letters':/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},
	    {'base':'a', 'letters':/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},
	    {'base':'aa','letters':/[\uA733]/g},
	    {'base':'ae','letters':/[\u00E6\u01FD\u01E3]/g},
	    {'base':'ao','letters':/[\uA735]/g},
	    {'base':'au','letters':/[\uA737]/g},
	    {'base':'av','letters':/[\uA739\uA73B]/g},
	    {'base':'ay','letters':/[\uA73D]/g},
	    {'base':'b', 'letters':/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},
	    {'base':'c', 'letters':/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},
	    {'base':'d', 'letters':/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},
	    {'base':'dz','letters':/[\u01F3\u01C6]/g},
	    {'base':'e', 'letters':/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},
	    {'base':'f', 'letters':/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},
	    {'base':'g', 'letters':/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},
	    {'base':'h', 'letters':/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},
	    {'base':'hv','letters':/[\u0195]/g},
	    {'base':'i', 'letters':/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},
	    {'base':'j', 'letters':/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},
	    {'base':'k', 'letters':/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},
	    {'base':'l', 'letters':/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},
	    {'base':'lj','letters':/[\u01C9]/g},
	    {'base':'m', 'letters':/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},
	    {'base':'n', 'letters':/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},
	    {'base':'nj','letters':/[\u01CC]/g},
	    {'base':'o', 'letters':/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},
	    {'base':'oi','letters':/[\u01A3]/g},
	    {'base':'ou','letters':/[\u0223]/g},
	    {'base':'oo','letters':/[\uA74F]/g},
	    {'base':'p','letters':/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},
	    {'base':'q','letters':/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},
	    {'base':'r','letters':/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},
	    {'base':'s','letters':/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},
	    {'base':'t','letters':/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},
	    {'base':'tz','letters':/[\uA729]/g},
	    {'base':'u','letters':/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},
	    {'base':'v','letters':/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},
	    {'base':'vy','letters':/[\uA761]/g},
	    {'base':'w','letters':/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},
	    {'base':'x','letters':/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},
	    {'base':'y','letters':/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},
	    {'base':'z','letters':/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}
	];


	module.exports = function(str) {
		var rules = diacriticsRemovalMap;
		for (var i = 0; i < rules.length; i++) {
			str = str.replace(rules[i].letters, rules[i].base);
		}
		return str;
	};


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2012, Guillaume Marty

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * A transliteration of Katakana & Hiragana to roman characters using the
	 * modified Hepburn system.
	 * Rules based on CLDR transform rule set `Katakana-Latin-BGN.xml` but with
	 * several bugs fixed:
	 *  * Missing ū
	 *  * Missing tsu + voiced kana
	 *  * typos on my~ transliterations
	 *  * support for long vowel sign
	 *  * support for final small tsu
	 *  * support for u + small vowels
	 *  * support for su/shi/ji + small vowels
	 *  * support for tchi/tsu/te/to + small vowels
	 *  * support for fu + small vowels
	 *  * support for katakana middle dot
	 *
	 * \@todo Take iteration marks into account.
	 */

	var replacer = __webpack_require__(56).replacer;

	var transliterationTable1 = {
	  'ウァ': 'wa', // KATAKANA LETTER U + SMALL A
	  'ウィ': 'wi', // KATAKANA LETTER U + SMALL I
	  'ウェ': 'we', // KATAKANA LETTER U + SMALL E
	  'ウォ': 'wo', // KATAKANA LETTER U + SMALL O
	  'ウー': 'ū', // KATAKANA LETTER VU + PROLONGED SOUND MARK

	  'ヴァ': 'va', // KATAKANA LETTER VU + SMALL A
	  'ヴィ': 'vi', // KATAKANA LETTER VU + SMALL I
	  'ヴェ': 've', // KATAKANA LETTER VU + SMALL E
	  'ヴォ': 'vo', // KATAKANA LETTER VU + SMALL O
	  'ヴュ': 'vyu', // KATAKANA LETTER VU + SMALL YU

	  'うぁ': 'wa', // HIRAGANA LETTER U + SMALL A
	  'うぃ': 'wi', // HIRAGANA LETTER U + SMALL I
	  'うぇ': 'we', // HIRAGANA LETTER U + SMALL E
	  'うぉ': 'wo', // HIRAGANA LETTER U + SMALL O
	  'うー': 'ū', // HIRAGANA LETTER VU + PROLONGED SOUND MARK

	  'ゔぁ': 'va', // HIRAGANA LETTER VU + SMALL A
	  'ゔぃ': 'vi', // HIRAGANA LETTER VU + SMALL I
	  'ゔぇ': 've', // HIRAGANA LETTER VU + SMALL E
	  'ゔぉ': 'vo', // HIRAGANA LETTER VU + SMALL O
	  'ゔゅ': 'vyu' // HIRAGANA LETTER VU + SMALL YU
	};

	var transliterationTable2 = {
	  'イェ': 'ye', // KATAKANA LETTER I + SMALL E

	  'ア': 'a', // KATAKANA LETTER A
	  'イ': 'i', // KATAKANA LETTER I
	  'ウウ': 'ū', // KATAKANA LETTER U + U
	  'ウ': 'u', // KATAKANA LETTER U
	  'エ': 'e', // KATAKANA LETTER E
	  'オウ': 'ō', // KATAKANA LETTER O + U
	  'オ': 'o', // KATAKANA LETTER O

	  'クァ': 'kwa', // KATAKANA LETTER KU + SMALL A
	  'クィ': 'kwi', // KATAKANA LETTER KU + SMALL I
	  'クェ': 'kwe', // KATAKANA LETTER KU + SMALL E
	  'クォ': 'kwo', // KATAKANA LETTER KU + SMALL O

	  'カ': 'ka', // KATAKANA LETTER KA
	  'キョウ': 'kyō', // KATAKANA LETTER KI + SMALL YO + U
	  'キュウ': 'kyū', // KATAKANA LETTER KI + SMALL YU + U
	  'キャ': 'kya', // KATAKANA LETTER KI + SMALL YA
	  'キョ': 'kyo', // KATAKANA LETTER KI + SMALL YO
	  'キュ': 'kyu', // KATAKANA LETTER KI + SMALL YU
	  'キ': 'ki', // KATAKANA LETTER KI
	  'ク': 'ku', // KATAKANA LETTER KU
	  'ケ': 'ke', // KATAKANA LETTER KE
	  'コウ': 'kō', // KATAKANA LETTER KO + U
	  'コ': 'ko', // KATAKANA LETTER KO

	  'シェ': 'she', // KATAKANA LETTER SI + SMALL E
	  'スィ': 'si', // KATAKANA LETTER SU + SMALL I

	  'サ': 'sa', // KATAKANA LETTER SA
	  'ショウ': 'shō', // KATAKANA LETTER SI + SMALL YO + U
	  'シュウ': 'shū', // KATAKANA LETTER SI + SMALL YU + U
	  'シャ': 'sha', // KATAKANA LETTER SI + SMALL YA
	  'ショ': 'sho', // KATAKANA LETTER SI + SMALL YO
	  'シュ': 'shu', // KATAKANA LETTER SI + SMALL YU
	  'シ': 'shi', // KATAKANA LETTER SI
	  'スウ': 'sū', // KATAKANA LETTER SU + U
	  'ス': 'su', // KATAKANA LETTER SU
	  'セ': 'se', // KATAKANA LETTER SE
	  'ソウ': 'sō', // KATAKANA LETTER SO + U
	  'ソ': 'so', // KATAKANA LETTER SO

	  'チェ': 'che', // KATAKANA LETTER TI + SMALL E
	  'ツァ': 'tsa', // KATAKANA LETTER TU + SMALL A
	  'ツィ': 'tsi', // KATAKANA LETTER TU + SMALL I
	  'ツェ': 'tse', // KATAKANA LETTER TU + SMALL E
	  'ツォ': 'tso', // KATAKANA LETTER TU + SMALL O
	  'ティ': 'ti', // KATAKANA LETTER TE + SMALL I
	  'ディ': 'di', // KATAKANA LETTER DE + SMALL I
	  'テュ': 'tyu', // KATAKANA LETTER TE + SMALL YU
	  'デュ': 'dyu', // KATAKANA LETTER DE + SMALL YU
	  'トィ': 'twi', // KATAKANA LETTER TO + SMALL I
	  'トゥ': 'tu', // KATAKANA LETTER TO + SMALL U
	  'ドィ': 'dwi', // KATAKANA LETTER DO + SMALL I
	  'ドゥ': 'du', // KATAKANA LETTER DO + SMALL U

	  'タ': 'ta', // KATAKANA LETTER TA
	  'チョウ': 'chō', // KATAKANA LETTER TI + SMALL YO + U
	  'チュウ': 'chū', // KATAKANA LETTER TI + SMALL YU + U
	  'チャ': 'cha', // KATAKANA LETTER TI + SMALL YA
	  'チョ': 'cho', // KATAKANA LETTER TI + SMALL YO
	  'チュ': 'chu', // KATAKANA LETTER TI + SMALL YU
	  'チ': 'chi', // KATAKANA LETTER TI
	  'ツウ': 'tsū', // KATAKANA LETTER TU + U
	  'ツ': 'tsu', // KATAKANA LETTER TU
	  'テ': 'te', // KATAKANA LETTER TE
	  'トウ': 'tō', // KATAKANA LETTER TO + U
	  'ト': 'to', // KATAKANA LETTER TO

	  'ナ': 'na', // KATAKANA LETTER NA
	  'ニョウ': 'nyō', // KATAKANA LETTER NI + SMALL YO + U
	  'ニュウ': 'nyū', // KATAKANA LETTER NI + SMALL YU + U
	  'ニャ': 'nya', // KATAKANA LETTER NI + SMALL YA
	  'ニョ': 'nyo', // KATAKANA LETTER NI + SMALL YO
	  'ニュ': 'nyu', // KATAKANA LETTER NI + SMALL YU
	  'ニ': 'ni', // KATAKANA LETTER NI
	  'ヌウ': 'nū', // KATAKANA LETTER NU + U
	  'ヌ': 'nu', // KATAKANA LETTER NU
	  'ネ': 'ne', // KATAKANA LETTER NE
	  'ノウ': 'nō', // KATAKANA LETTER NO + U
	  'ノ': 'no', // KATAKANA LETTER NO

	  'ファ': 'fa', // KATAKANA LETTER HU + SMALL A
	  'フィ': 'fi', // KATAKANA LETTER HU + SMALL I
	  //'フゥ': 'fu', // KATAKANA LETTER HU + SMALL U
	  'フェ': 'fe', // KATAKANA LETTER HU + SMALL E
	  'フォ': 'fo', // KATAKANA LETTER HU + SMALL O
	  'フュ': 'fyu', // KATAKANA LETTER HU + SMALL YU
	  'ホェ': 'hwe', // KATAKANA LETTER HO + SMALL E

	  'ハ': 'ha', // KATAKANA LETTER HA
	  'ヒョウ': 'hyō', // KATAKANA LETTER HI + SMALL YO + U
	  'ヒュウ': 'hyū', // KATAKANA LETTER HI + SMALL YU + U
	  'ヒャ': 'hya', // KATAKANA LETTER HI + SMALL YA
	  'ヒョ': 'hyo', // KATAKANA LETTER HI + SMALL YO
	  'ヒュ': 'hyu', // KATAKANA LETTER HI + SMALL YU
	  'ヒ': 'hi', // KATAKANA LETTER HI
	  'フウ': 'fū', // KATAKANA LETTER HU + U
	  'フ': 'fu', // KATAKANA LETTER HU
	  'ヘ': 'he', // KATAKANA LETTER HE
	  'ホウ': 'hō', // KATAKANA LETTER HO + U
	  'ホ': 'ho', // KATAKANA LETTER HO

	  'マ': 'ma', // KATAKANA LETTER MA
	  'ミョウ': 'myō', // KATAKANA LETTER MI + SMALL YO + U
	  'ミュウ': 'myū', // KATAKANA LETTER MI + SMALL YU + U
	  'ミャ': 'mya', // KATAKANA LETTER MI + SMALL YA
	  'ミョ': 'myo', // KATAKANA LETTER MI + SMALL YO
	  'ミュ': 'myu', // KATAKANA LETTER MI + SMALL YU
	  'ミ': 'mi', // KATAKANA LETTER MI
	  'ムウ': 'mū', // KATAKANA LETTER MU + U
	  'ム': 'mu', // KATAKANA LETTER MU
	  'メ': 'me', // KATAKANA LETTER ME
	  'モウ': 'mō', // KATAKANA LETTER MO + U
	  'モ': 'mo', // KATAKANA LETTER MO

	  'ヤ': 'ya', // KATAKANA LETTER YA
	  'ユウ': 'yū', // KATAKANA LETTER YU + U
	  'ユ': 'yu', // KATAKANA LETTER YU
	  'ヨウ': 'yō', // KATAKANA LETTER YO + U
	  'ヨ': 'yo', // KATAKANA LETTER YO

	  'リェ': 'rye', // KATAKANA LETTER RI + SMALL E

	  'ラ': 'ra', // KATAKANA LETTER RA
	  'リョウ': 'ryō', // KATAKANA LETTER RI + SMALL YO + U
	  'リュウ': 'ryū', // KATAKANA LETTER RI + SMALL YU + U
	  'リャ': 'rya', // KATAKANA LETTER RI + SMALL YA
	  'リョ': 'ryo', // KATAKANA LETTER RI + SMALL YO
	  'リュ': 'ryu', // KATAKANA LETTER RI + SMALL YU
	  'リ': 'ri', // KATAKANA LETTER RI
	  'ルウ': 'rū', // KATAKANA LETTER RU + U
	  'ル': 'ru', // KATAKANA LETTER RU
	  'レ': 're', // KATAKANA LETTER RE
	  'ロウ': 'rō', // KATAKANA LETTER RO + U
	  'ロ': 'ro', // KATAKANA LETTER RO

	  'ワ': 'wa', // KATAKANA LETTER WA
	  'ヰ': 'i', // KATAKANA LETTER WI
	  'ヱ': 'e', // KATAKANA LETTER WE
	  'ヲ': 'o', // KATAKANA LETTER WO

	  'ン': 'n', // KATAKANA LETTER N

	  'グァ': 'gwa', // KATAKANA LETTER GU + SMALL A
	  'グィ': 'gwi', // KATAKANA LETTER GU + SMALL I
	  'グェ': 'gwe', // KATAKANA LETTER GU + SMALL E
	  'グォ': 'gwo', // KATAKANA LETTER GU + SMALL O

	  'ガ': 'ga', // KATAKANA LETTER GA
	  'ギョウ': 'gyō', // KATAKANA LETTER GI + SMALL YO + U
	  'ギュウ': 'gyū', // KATAKANA LETTER GI + SMALL YU + U
	  'ギャ': 'gya', // KATAKANA LETTER GI + SMALL YA
	  'ギョ': 'gyo', // KATAKANA LETTER GI + SMALL YO
	  'ギュ': 'gyu', // KATAKANA LETTER GI + SMALL YU
	  'ギ': 'gi', // KATAKANA LETTER GI
	  'グウ': 'gū', // KATAKANA LETTER GU + U
	  'グ': 'gu', // KATAKANA LETTER GU
	  'ゲ': 'ge', // KATAKANA LETTER GE
	  'ゴウ': 'gō', // KATAKANA LETTER GO + U
	  'ゴ': 'go', // KATAKANA LETTER GO

	  'ジェ': 'je', // KATAKANA LETTER ZI + SMALL E
	  'ズィ': 'zi', // KATAKANA LETTER ZU + SMALL I

	  'ザ': 'za', // KATAKANA LETTER ZA
	  'ジョウ': 'jō', // KATAKANA LETTER ZI + SMALL YO + U
	  'ジュウ': 'jū', // KATAKANA LETTER ZI + SMALL YU + U
	  'ジャ': 'ja', // KATAKANA LETTER ZI + SMALL YA
	  'ジョ': 'jo', // KATAKANA LETTER ZI + SMALL YO
	  'ジュ': 'ju', // KATAKANA LETTER ZI + SMALL YU
	  'ジ': 'ji', // KATAKANA LETTER ZI
	  'ズウ': 'zū', // KATAKANA LETTER ZU + U
	  'ズ': 'zu', // KATAKANA LETTER ZU
	  'ゼ': 'ze', // KATAKANA LETTER ZE
	  'ゾウ': 'zō', // KATAKANA LETTER ZO + U
	  'ゾ': 'zo', // KATAKANA LETTER ZO

	  'ダ': 'da', // KATAKANA LETTER DA
	  'ヂ': 'ji', // KATAKANA LETTER DI
	  'ヅウ': 'zū', // KATAKANA LETTER DU + U
	  'ヅ': 'zu', // KATAKANA LETTER DU
	  'デ': 'de', // KATAKANA LETTER DE
	  'ドウ': 'dō', // KATAKANA LETTER DO + U
	  'ド': 'do', // KATAKANA LETTER DO

	  'ブュ': 'byu', // KATAKANA LETTER BU + SMALL YU

	  'バ': 'ba', // KATAKANA LETTER BA
	  'ビョウ': 'byō', // KATAKANA LETTER BI + SMALL YO + U
	  'ビュウ': 'byū', // KATAKANA LETTER BI + SMALL YU + U
	  'ビャ': 'bya', // KATAKANA LETTER BI + SMALL YA
	  'ビョ': 'byo', // KATAKANA LETTER BI + SMALL YO
	  'ビュ': 'byu', // KATAKANA LETTER BI + SMALL YU
	  'ビ': 'bi', // KATAKANA LETTER BI
	  'ブウ': 'bū', // KATAKANA LETTER BU + U
	  'ブ': 'bu', // KATAKANA LETTER BU
	  'ベ': 'be', // KATAKANA LETTER BE
	  'ボウ': 'bō', // KATAKANA LETTER BO + U
	  'ボ': 'bo', // KATAKANA LETTER BO

	  'パ': 'pa', // KATAKANA LETTER PA
	  'ピョウ': 'pyō', // KATAKANA LETTER PI + SMALL YO + U
	  'ピュウ': 'pyū', // KATAKANA LETTER PI + SMALL YU + U
	  'ピャ': 'pya', // KATAKANA LETTER PI + SMALL YA
	  'ピョ': 'pyo', // KATAKANA LETTER PI + SMALL YO
	  'ピュ': 'pyu', // KATAKANA LETTER PI + SMALL YU
	  'ピ': 'pi', // KATAKANA LETTER PI
	  'プウ': 'pū', // KATAKANA LETTER PU + U
	  'プ': 'pu', // KATAKANA LETTER PU
	  'ペ': 'pe', // KATAKANA LETTER PE
	  'ポウ': 'pō', // KATAKANA LETTER PO + U
	  'ポ': 'po', // KATAKANA LETTER PO

	  'ヴ': 'v', // KATAKANA LETTER VU

	  '・': ' ', // KATAKANA MIDDLE DOT

	  'いぇ': 'ye', // HIRAGANA LETTER I + SMALL E

	  'あ': 'a', // HIRAGANA LETTER A
	  'い': 'i', // HIRAGANA LETTER I
	  'うう': 'ū', // HIRAGANA LETTER U + U
	  'う': 'u', // HIRAGANA LETTER U
	  'え': 'e', // HIRAGANA LETTER E
	  'おう': 'ō', // HIRAGANA LETTER O + U
	  'お': 'o', // HIRAGANA LETTER O

	  'くぁ': 'kwa', // HIRAGANA LETTER KU + SMALL A
	  'くぃ': 'kwi', // HIRAGANA LETTER KU + SMALL I
	  'くぇ': 'kwe', // HIRAGANA LETTER KU + SMALL E
	  'くぉ': 'kwo', // HIRAGANA LETTER KU + SMALL O

	  'か': 'ka', // HIRAGANA LETTER KA
	  'きょう': 'kyō', // HIRAGANA LETTER KI + SMALL YO + U
	  'きゅう': 'kyū', // HIRAGANA LETTER KI + SMALL YU + U
	  'きゃ': 'kya', // HIRAGANA LETTER KI + SMALL YA
	  'きょ': 'kyo', // HIRAGANA LETTER KI + SMALL YO
	  'きゅ': 'kyu', // HIRAGANA LETTER KI + SMALL YU
	  'き': 'ki', // HIRAGANA LETTER KI
	  'くう': 'kū', // HIRAGANA LETTER KU + U
	  'く': 'ku', // HIRAGANA LETTER KU
	  'け': 'ke', // HIRAGANA LETTER KE
	  'こう': 'kō', // HIRAGANA LETTER KO + U
	  'こ': 'ko', // HIRAGANA LETTER KO

	  'しぇ': 'she', // HIRAGANA LETTER SI + SMALL E
	  'すぃ': 'si', // HIRAGANA LETTER SU + SMALL I

	  'さ': 'sa', // HIRAGANA LETTER SA
	  'しょう': 'shō', // HIRAGANA LETTER SI + SMALL YO + U
	  'しゅう': 'shū', // HIRAGANA LETTER SI + SMALL YU + U
	  'しゃ': 'sha', // HIRAGANA LETTER SI + SMALL YA
	  'しょ': 'sho', // HIRAGANA LETTER SI + SMALL YO
	  'しゅ': 'shu', // HIRAGANA LETTER SI + SMALL YU
	  'し': 'shi', // HIRAGANA LETTER SI
	  'すう': 'sū', // HIRAGANA LETTER SU + U
	  'す': 'su', // HIRAGANA LETTER SU
	  'せ': 'se', // HIRAGANA LETTER SE
	  'そう': 'sō', // HIRAGANA LETTER SO + U
	  'そ': 'so', // HIRAGANA LETTER SO

	  'ちぇ': 'che', // HIRAGANA LETTER TI + SMALL E
	  'つぁ': 'tsa', // HIRAGANA LETTER TU + SMALL A
	  'つぃ': 'tsi', // HIRAGANA LETTER TU + SMALL I
	  'つぇ': 'tse', // HIRAGANA LETTER TU + SMALL E
	  'つぉ': 'tso', // HIRAGANA LETTER TU + SMALL O
	  'てぃ': 'ti', // HIRAGANA LETTER TE + SMALL I
	  'でぃ': 'di', // HIRAGANA LETTER DE + SMALL I
	  'てゅ': 'tyu', // HIRAGANA LETTER TE + SMALL YU
	  'でゅ': 'dyu', // HIRAGANA LETTER DE + SMALL YU
	  'とぃ': 'twi', // HIRAGANA LETTER TO + SMALL I
	  'とぅ': 'tu', // HIRAGANA LETTER TO + SMALL U
	  'どぃ': 'dwi', // HIRAGANA LETTER DO + SMALL I
	  'どぅ': 'du', // HIRAGANA LETTER DO + SMALL U

	  'た': 'ta', // HIRAGANA LETTER TA
	  'ちょう': 'chō', // HIRAGANA LETTER TI + SMALL YO + U
	  'ちゅう': 'chū', // HIRAGANA LETTER TI + SMALL YU + U
	  'ちゃ': 'cha', // HIRAGANA LETTER TI + SMALL YA
	  'ちょ': 'cho', // HIRAGANA LETTER TI + SMALL YO
	  'ちゅ': 'chu', // HIRAGANA LETTER TI + SMALL YU
	  'ち': 'chi', // HIRAGANA LETTER TI
	  'つう': 'tsū', // HIRAGANA LETTER TU + U
	  'つ': 'tsu', // HIRAGANA LETTER TU
	  'て': 'te', // HIRAGANA LETTER TE
	  'とう': 'tō', // HIRAGANA LETTER TO + U
	  'と': 'to', // HIRAGANA LETTER TO

	  'な': 'na', // HIRAGANA LETTER NA
	  'にょう': 'nyō', // HIRAGANA LETTER NI + SMALL YO + U
	  'にゅう': 'nyū', // HIRAGANA LETTER NI + SMALL YU + U
	  'にゃ': 'nya', // HIRAGANA LETTER NI + SMALL YA
	  'にょ': 'nyo', // HIRAGANA LETTER NI + SMALL YO
	  'にゅ': 'nyu', // HIRAGANA LETTER NI + SMALL YU
	  'に': 'ni', // HIRAGANA LETTER NI
	  'ぬう': 'nū', // HIRAGANA LETTER NU + U
	  'ぬ': 'nu', // HIRAGANA LETTER NU
	  'ね': 'ne', // HIRAGANA LETTER NE
	  'のう': 'nō', // HIRAGANA LETTER NO + U
	  'の': 'no', // HIRAGANA LETTER NO

	  'ふぁ': 'fa', // HIRAGANA LETTER HU + SMALL A
	  'ふぃ': 'fi', // HIRAGANA LETTER HU + SMALL I
	  //'ふぅ': 'fu', // HIRAGANA LETTER HU + SMALL U
	  'ふぇ': 'fe', // HIRAGANA LETTER HU + SMALL E
	  'ふぉ': 'fo', // HIRAGANA LETTER HU + SMALL O
	  'ふゅ': 'fyu', // HIRAGANA LETTER HU + SMALL YU
	  'ほぇ': 'hwe', // HIRAGANA LETTER HO + SMALL E

	  'は': 'ha', // HIRAGANA LETTER HA
	  'ひょう': 'hyō', // HIRAGANA LETTER HI + SMALL YO + U
	  'ひゅう': 'hyū', // HIRAGANA LETTER HI + SMALL YU + U
	  'ひゃ': 'hya', // HIRAGANA LETTER HI + SMALL YA
	  'ひょ': 'hyo', // HIRAGANA LETTER HI + SMALL YO
	  'ひゅ': 'hyu', // HIRAGANA LETTER HI + SMALL YU
	  'ひ': 'hi', // HIRAGANA LETTER HI
	  'ふう': 'fū', // HIRAGANA LETTER HU + U
	  'ふ': 'fu', // HIRAGANA LETTER HU
	  'へ': 'he', // HIRAGANA LETTER HE
	  'ほう': 'hō', // HIRAGANA LETTER HO + U
	  'ほ': 'ho', // HIRAGANA LETTER HO

	  'ま': 'ma', // HIRAGANA LETTER MA
	  'みょう': 'myō', // HIRAGANA LETTER MI + SMALL YO + U
	  'みゅう': 'myū', // HIRAGANA LETTER MI + SMALL YU + U
	  'みゃ': 'mya', // HIRAGANA LETTER MI + SMALL YA
	  'みょ': 'myo', // HIRAGANA LETTER MI + SMALL YO
	  'みゅ': 'myu', // HIRAGANA LETTER MI + SMALL YU
	  'み': 'mi', // HIRAGANA LETTER MI
	  'むう': 'mū', // HIRAGANA LETTER MU + U
	  'む': 'mu', // HIRAGANA LETTER MU
	  'め': 'me', // HIRAGANA LETTER ME
	  'もう': 'mō', // HIRAGANA LETTER MO + U
	  'も': 'mo', // HIRAGANA LETTER MO

	  'や': 'ya', // HIRAGANA LETTER YA
	  'ゆう': 'yū', // HIRAGANA LETTER YU + U
	  'ゆ': 'yu', // HIRAGANA LETTER YU
	  'よう': 'yō', // HIRAGANA LETTER YO + U
	  'よ': 'yo', // HIRAGANA LETTER YO

	  'りぇ': 'rye', // HIRAGANA LETTER RI + SMALL E

	  'ら': 'ra', // HIRAGANA LETTER RA
	  'りょう': 'ryō', // HIRAGANA LETTER RI + SMALL YO + U
	  'りゅう': 'ryū', // HIRAGANA LETTER RI + SMALL YU + U
	  'りゃ': 'rya', // HIRAGANA LETTER RI + SMALL YA
	  'りょ': 'ryo', // HIRAGANA LETTER RI + SMALL YO
	  'りゅ': 'ryu', // HIRAGANA LETTER RI + SMALL YU
	  'り': 'ri', // HIRAGANA LETTER RI
	  'るう': 'rū', // HIRAGANA LETTER RU + U
	  'る': 'ru', // HIRAGANA LETTER RU
	  'れ': 're', // HIRAGANA LETTER RE
	  'ろう': 'rō', // HIRAGANA LETTER RO + U
	  'ろ': 'ro', // HIRAGANA LETTER RO

	  'わ': 'wa', // HIRAGANA LETTER WA
	  'ゐ': 'i', // HIRAGANA LETTER WI
	  'ゑ': 'e', // HIRAGANA LETTER WE
	  'を': 'o', // HIRAGANA LETTER WO

	  'ん': 'n', // HIRAGANA LETTER N

	  'ぐぁ': 'gwa', // HIRAGANA LETTER GU + SMALL A
	  'ぐぃ': 'gwi', // HIRAGANA LETTER GU + SMALL I
	  'ぐぇ': 'gwe', // HIRAGANA LETTER GU + SMALL E
	  'ぐぉ': 'gwo', // HIRAGANA LETTER GU + SMALL O

	  'が': 'ga', // HIRAGANA LETTER GA
	  'ぎょう': 'gyō', // HIRAGANA LETTER GI + SMALL YO + U
	  'ぎゅう': 'gyū', // HIRAGANA LETTER GI + SMALL YU + U
	  'ぎゃ': 'gya', // HIRAGANA LETTER GI + SMALL YA
	  'ぎょ': 'gyo', // HIRAGANA LETTER GI + SMALL YO
	  'ぎゅ': 'gyu', // HIRAGANA LETTER GI + SMALL YU
	  'ぎ': 'gi', // HIRAGANA LETTER GI
	  'ぐう': 'gū', // HIRAGANA LETTER GU + U
	  'ぐ': 'gu', // HIRAGANA LETTER GU
	  'げ': 'ge', // HIRAGANA LETTER GE
	  'ごう': 'gō', // HIRAGANA LETTER GO + U
	  'ご': 'go', // HIRAGANA LETTER GO

	  'じぇ': 'je', // HIRAGANA LETTER ZI + SMALL E
	  'ずぃ': 'zi', // HIRAGANA LETTER ZU + SMALL I

	  'ざ': 'za', // HIRAGANA LETTER ZA
	  'じょう': 'jō', // HIRAGANA LETTER ZI + SMALL YO + U
	  'じゅう': 'jū', // HIRAGANA LETTER ZI + SMALL YU + U
	  'じゃ': 'ja', // HIRAGANA LETTER ZI + SMALL YA
	  'じょ': 'jo', // HIRAGANA LETTER ZI + SMALL YO
	  'じゅ': 'ju', // HIRAGANA LETTER ZI + SMALL YU
	  'じ': 'ji', // HIRAGANA LETTER ZI
	  'ずう': 'zū', // HIRAGANA LETTER ZU + U
	  'ず': 'zu', // HIRAGANA LETTER ZU
	  'ぜ': 'ze', // HIRAGANA LETTER ZE
	  'ぞう': 'zō', // HIRAGANA LETTER ZO + U
	  'ぞ': 'zo', // HIRAGANA LETTER ZO

	  'だ': 'da', // HIRAGANA LETTER DA
	  'ぢ': 'ji', // HIRAGANA LETTER DI
	  'づう': 'zū', // HIRAGANA LETTER DU + U
	  'づ': 'zu', // HIRAGANA LETTER DU
	  'で': 'de', // HIRAGANA LETTER DE
	  'どう': 'dō', // HIRAGANA LETTER DO + U
	  'ど': 'do', // HIRAGANA LETTER DO

	  'ぶゅ': 'byu', // HIRAGANA LETTER BU + SMALL YU

	  'ば': 'ba', // HIRAGANA LETTER BA
	  'びょう': 'byō', // HIRAGANA LETTER BI + SMALL YO + U
	  'びゅう': 'byū', // HIRAGANA LETTER BI + SMALL YU + U
	  'びゃ': 'bya', // HIRAGANA LETTER BI + SMALL YA
	  'びょ': 'byo', // HIRAGANA LETTER BI + SMALL YO
	  'びゅ': 'byu', // HIRAGANA LETTER BI + SMALL YU
	  'び': 'bi', // HIRAGANA LETTER BI
	  'ぶう': 'bū', // HIRAGANA LETTER BU + U
	  'ぶ': 'bu', // HIRAGANA LETTER BU
	  'べ': 'be', // HIRAGANA LETTER BE
	  'ぼう': 'bō', // HIRAGANA LETTER BO + U
	  'ぼ': 'bo', // HIRAGANA LETTER BO

	  'ぱ': 'pa', // HIRAGANA LETTER PA
	  'ぴょう': 'pyō', // HIRAGANA LETTER PI + SMALL YO + U
	  'ぴゅう': 'pyū', // HIRAGANA LETTER PI + SMALL YU + U
	  'ぴゃ': 'pya', // HIRAGANA LETTER PI + SMALL YA
	  'ぴょ': 'pyo', // HIRAGANA LETTER PI + SMALL YO
	  'ぴゅ': 'pyu', // HIRAGANA LETTER PI + SMALL YU
	  'ぴ': 'pi', // HIRAGANA LETTER PI
	  'ぷう': 'pū', // HIRAGANA LETTER PU + U
	  'ぷ': 'pu', // HIRAGANA LETTER PU
	  'ぺ': 'pe', // HIRAGANA LETTER PE
	  'ぽう': 'pō', // HIRAGANA LETTER PO + U
	  'ぽ': 'po', // HIRAGANA LETTER PO

	  'ゔ': 'v' // HIRAGANA LETTER VU
	};

	var transliterationTable3 = {
	  'aァ': 'ā',
	  'aぁ': 'ā',
	  'iィー': 'ī',
	  'iィ': 'ī',
	  'iぃー': 'ī',
	  'iぃ': 'ī',
	  'aー': 'ā',
	  'iー': 'ī',
	  'uー': 'ū',
	  'eー': 'ē',
	  'oー': 'ō',

	  // Fallback for small vowels
	  'ァ': 'a',
	  'ィ': 'i',
	  'ゥ': 'u',
	  'ェ': 'e',
	  'ォ': 'o',
	  'ぁ': 'a',
	  'ぃ': 'i',
	  'ぅ': 'u',
	  'ぇ': 'e',
	  'ぉ': 'o'
	};

	var replace1 = replacer(transliterationTable1);
	var replace2 = replacer(transliterationTable2);
	var replace3 = replacer(transliterationTable3);

	module.exports = function(str) {
	  str = replace1(str);

	  str = str
	    .replace(/ッ(?=[ン])/g, 'n')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[ん])/g, 'n')// HIRAGANA LETTER SMALL TU
	    .replace(/ン(?=[バビブベボパピプペポマミムメモ])/g, 'm')// KATAKANA LETTER N
	    .replace(/ん(?=[ばびぶべぼぱぴぷぺぽまみむめも])/g, 'm')// HIRAGANA LETTER N
	    .replace(/ン(?=[ヤユヨアイウエオ])/g, "n'")// KATAKANA LETTER N
	    .replace(/ん(?=[やゆよあいうえお])/g, "n'");// HIRAGANA LETTER N
	  str = str
	    .replace(/ッ(?=[カキクケコ])/g, 'k')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[かきくけこ])/g, 'k')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[ガギグゲゴ])/g, 'g')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[がぎぐげご])/g, 'g')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[サシスセソ])/g, 's')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[さしすせそ])/g, 's')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[ザズゼゾ])/g, 'z')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[ざずぜぞ])/g, 'z')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[ジ])/g, 'j')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[じ])/g, 'j')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[タチツテト])/g, 't')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[たちつてと])/g, 't')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[ダヂヅデド])/g, 't')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[だぢづでど])/g, 't')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[ハヒヘホ])/g, 'h')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[はひへほ])/g, 'h')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[フ])/g, 'f')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[ふ])/g, 'f')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[バビブベボ])/g, 'b')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[ばびぶべぼ])/g, 'b')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[パピプペポ])/g, 'p')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[ぱぴぷぺぽ])/g, 'p')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[ラリルレロ])/g, 'r')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[らりるれろ])/g, 'r');// HIRAGANA LETTER SMALL TU

	  str = replace2(str);
	  str = replace3(str);

	  str = str
	    .replace(/(ッ|っ)\B/g, 't');// FINAL KATAKANA LETTER SMALL TU

	  return str;
	};


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	let models = {
	  Term : __webpack_require__(114),
	  Text : __webpack_require__(120),
	  Sentence : __webpack_require__(124),
	  Verb : __webpack_require__(129),
	  Adjective : __webpack_require__(140),
	  Adverb : __webpack_require__(138),
	  Noun : __webpack_require__(146),
	  Value : __webpack_require__(170),
	  Person : __webpack_require__(167),
	  Place : __webpack_require__(168),
	  Date : __webpack_require__(173),
	  Organisation : __webpack_require__(169),
	  Lexicon : __webpack_require__(176),
	};

	const extend = function(m, context) {
	  context = context || {};
	  return m;
	};

	function NLP() {

	  this.mixin = function(obj) {
	    obj = obj || {};
	    Object.keys(obj).forEach(function(k) {
	      Object.keys(obj[k]).forEach(function(method) {
	        models[k].fn[method] = obj[k][method];
	      });
	    });
	  };

	  this.term = function(s, context) {
	    return extend(new models.Term(s), context);
	  };
	  this.noun = function(s) {
	    return new models.Noun(s);
	  };
	  this.verb = function(s) {
	    return new models.Verb(s);
	  };
	  this.adjective = function(s) {
	    return new models.Adjective(s);
	  };
	  this.adverb = function(s) {
	    return new models.Adverb(s);
	  };

	  this.value = function(s) {
	    return new models.Value(s);
	  };
	  this.person = function(s) {
	    return new models.Person(s);
	  };
	  this.place = function(s) {
	    return new models.Place(s);
	  };
	  this.date = function(s) {
	    return new models.Date(s);
	  };
	  this.organisation = function(s) {
	    return new models.Organisation(s);
	  };

	  this.text = function(s) {
	    return new models.Text(s);
	  };
	  this.sentence = function(s) {
	    return new models.Sentence(s);
	  };
	}

	let nlp = new NLP();

	//export to window or webworker
	if (typeof window === 'object' || typeof DedicatedWorkerGlobalScope === 'function') {
	  self.nlp_compromise = nlp;
	}
	//export to commonjs
	if (typeof module !== 'undefined' && module.exports) {
	  module.exports = nlp;
	}
	//export to amd
	if (true) {
	  !(__WEBPACK_AMD_DEFINE_FACTORY__ = (nlp), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}

	// let t = nlp.text(`he was there`);
	// t.negate();
	// console.log(t.text());


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const syllables = __webpack_require__(115);
	const is_acronym = __webpack_require__(116);
	const americanize = __webpack_require__(117);
	const britishize = __webpack_require__(119);

	class Term {
	  constructor(str, tag) {
	    //fail-safe
	    if (str === null || str === undefined) {
	      str = '';
	    }
	    str = (str).toString();
	    //set .text
	    this.text = str;
	    //the normalised working-version of the word
	    this.normal = '';
	    //if it's a contraction, the 'hidden word'
	    this.implicit = '';
	    //set .normal
	    this.rebuild();
	    //the reasoning behind it's part-of-speech
	    this.reason = '';
	    //these are orphaned POS that have no methods
	    let types = {
	      Determiner: 'Determiner',
	      Conjunction: 'Conjunction',
	      Preposition: 'Preposition',
	      Posessive: 'Posessive',
	    };
	    this.pos = {};
	    this.tag = types[tag] || '?';
	    //record them in pos{}
	    if (types[tag]) {
	      this.pos[types[tag]] = true;
	    }
	  }

	  //when the text changes, rebuild derivative fields
	  rebuild() {
	    this.text = this.text || '';
	    this.text = this.text.trim();
	    this.normal = '';
	    this.normalize();
	  }
	  changeTo(str) {
	    this.text = str;
	    this.rebuild();
	  }

	  //Term methods..
	  is_capital() {
	    if (this.text.match(/[A-Z][a-z]/)) { //tranditional capital
	      return true;
	    }
	    return false;
	  }
	  //FBI or F.B.I.
	  is_acronym() {
	    return is_acronym(this.text);
	  }
	  //working word
	  normalize() {
	    let str = this.text || '';
	    str = str.toLowerCase();
	    str = str.replace(/[,\.!:;\?\(\)]/, '');
	    str = str.replace(/’/g, '\'');
	    str = str.replace(/"/g, '');
	    // coerce single curly quotes
	    str = str.replace(/[\u2018\u2019\u201A\u201B\u2032\u2035]+/g, '\'');
	    // coerce double curly quotes
	    str = str.replace(/[\u201C\u201D\u201E\u201F\u2033\u2036]+/g, '"');
	    if (!str.match(/[a-z0-9]/i)) {
	      return '';
	    }
	    this.normal = str;
	    return this.normal;
	  }
	  //localization for us/uk
	  americanize() {
	    return americanize(this.normal);
	  }
	  britishize() {
	    return britishize(this.normal);
	  }
	  //naiive regex-based syllable splitting
	  syllables() {
	    return syllables(this.normal);
	  }
	}

	Term.fn = Term.prototype;
	// let t = new Term('NSA');
	// console.log(t.britishize());

	module.exports = Term;


/***/ },
/* 115 */
/***/ function(module, exports) {

	//chop a string into pronounced syllables
	'use strict';

	//suffix fixes
	function postprocess(arr) {
	  //trim whitespace
	  arr = arr.map(function(w) {
	    return w.trim();
	  });
	  arr = arr.filter(function(w) {
	    return w !== '';
	  });
	  // if (arr.length > 2) {
	  //   return arr;
	  // }
	  const ones = [
	    /^[^aeiou]?ion/,
	    /^[^aeiou]?ised/,
	    /^[^aeiou]?iled/
	  ];
	  const l = arr.length;
	  if (l > 1) {
	    const suffix = arr[l - 2] + arr[l - 1];
	    for (let i = 0; i < ones.length; i++) {
	      if (suffix.match(ones[i])) {
	        arr[l - 2] = arr[l - 2] + arr[l - 1];
	        arr.pop();
	      }
	    }
	  }
	  return arr;
	}

	const syllables = function(str) {
	  let all = [];

	  //method is nested because it's called recursively
	  const doer = function(w) {
	    const vow = /[aeiouy]$/;
	    const chars = w.split('');
	    let before = '';
	    let after = '';
	    let current = '';
	    for (let i = 0; i < chars.length; i++) {
	      before = chars.slice(0, i).join('');
	      current = chars[i];
	      after = chars.slice(i + 1, chars.length).join('');
	      let candidate = before + chars[i];

	      //it's a consonant that comes after a vowel
	      if (before.match(vow) && !current.match(vow)) {
	        if (after.match(/^e[sm]/)) {
	          candidate += 'e';
	          after = after.replace(/^e/, '');
	        }
	        all.push(candidate);
	        return doer(after);
	      }
	      //unblended vowels ('noisy' vowel combinations)
	      if (candidate.match(/(eo|eu|ia|oa|ua|ui)$/i)) { //'io' is noisy, not in 'ion'
	        all.push(before);
	        all.push(current);
	        return doer(after); //recursion
	      }
	    }
	    //if still running, end last syllable
	    if (str.match(/[aiouy]/) || str.match(/ee$/)) { //allow silent trailing e
	      all.push(w);
	    } else {
	      all[all.length - 1] = (all[all.length - 1] || '') + str; //append it to the last one
	    }
	  };

	  str.split(/\s\-/).forEach(function(s) {
	    doer(s);
	  });
	  all = postprocess(all);

	  //for words like 'tree' and 'free'
	  if (all.length === 0) {
	    all = [str];
	  }
	  //filter blanks
	  all = all.filter(function(s) {
	    return s !== '' && s !== null && s !== undefined;
	  });

	  return all;
	};

	// console.log(syllables('civilised'));

	module.exports = syllables;


/***/ },
/* 116 */
/***/ function(module, exports) {

	'use strict';
	const is_acronym = function(str) {
	  //like N.D.A
	  if (str.match(/([A-Z]\.)+[A-Z]?$/)) {
	    return true;
	  }
	  //like NDA
	  if (str.match(/[A-Z]{3}$/)) {
	    return true;
	  }
	  return false;
	};
	module.exports = is_acronym;


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	// convert british spellings into american ones
	// built with patterns+exceptions from https://en.wikipedia.org/wiki/British_spelling
	'use strict';
	const exceptions = __webpack_require__(118).reduce(function(h, a) {
	  h[a[0]] = a[1];
	  return h;
	}, {});


	const patterns = [
	  // ise -> ize
	  {
	    reg: /([^aeiou][iy])s(e|ed|es|ing)?$/,
	    repl: '$1z$2'
	  },

	  // our -> or
	  {
	    reg: /colour/,
	    repl: 'color'
	  },
	  {
	    reg: /(..)our(ly|y|ite|ed|ing|s|al|ous|ies|full?|able|ably|er|ism|ist|less)?s?$/,
	    repl: '$1or$2'
	  },


	  // xion -> tion
	  {
	    reg: /([aeiou])xion([ed])?$/,
	    repl: '$1tion$2'
	  },
	  //logue -> log
	  {
	    reg: /logue?/,
	    repl: 'log'
	  },
	  // ae -> e
	  {
	    reg: /([o|a])e/,
	    repl: 'e'
	  },
	  //eing -> ing
	  {
	    reg: /e(ing|able)$/,
	    repl: '$1'
	  },
	  // illful -> ilful
	  {
	    reg: /([aeiou]+[^aeiou]+[aeiou]+)ll(ful|ment|est|ing|or|er|ed)$/, //must be second-syllable
	    repl: '$1l$2'
	  },
	  {
	    reg: /(..)sation/,
	    repl: '$1zation'
	  },
	  {
	    reg: /isabl(i|e)/,
	    repl: 'izabl$1'
	  },
	  {
	    reg: /iser/,
	    repl: 'izer'
	  },
	  {
	    reg: /(..)sing(ly)?/,
	    repl: '$1zing$2'
	  },
	  {
	    reg: /(i|a)niser/,
	    repl: '$1nizer'
	  },

	  {
	    reg: /isement/,
	    repl: 'izement'
	  },

	  //re -> er
	  {
	    reg: /euvre/,
	    repl: 'euver'
	  },
	  {
	    reg: /outre/,
	    repl: 'outer'
	  },

	  {
	    reg: /centre/,
	    repl: 'center'
	  },
	  // re -> er
	  {
	    reg: /(.[^cdnv])re(s)?$/,
	    repl: '$1er$2'
	  },
	  {
	    reg: /fibre/,
	    repl: 'fiber'
	  },

	  {
	    reg: /uring/,
	    repl: 'oring'
	  },
	  {
	    reg: /fence/,
	    repl: 'fense'
	  },

	  {
	    reg: /gramme/,
	    repl: 'gram'
	  },
	  {
	    reg: /anaes/,
	    repl: 'anes'
	  },
	  {
	    reg: /behove/,
	    repl: 'behoove'
	  },
	  {
	    reg: /baulk/,
	    repl: 'balk'
	  },



	  {
	    reg: /biass/,
	    repl: 'bias'
	  },
	  {
	    reg: /alyse/,
	    repl: 'alyze'
	  },

	  {
	    reg: /cheque/,
	    repl: 'check'
	  },

	  {
	    reg: /^cosi/,
	    repl: 'cozi'
	  },
	  {
	    reg: /defenc/,
	    repl: 'defens'
	  },
	  {
	    reg: /draught/,
	    repl: 'draft'
	  },
	  {
	    reg: /duell/,
	    repl: 'duel'
	  },
	  {
	    reg: /fillet/,
	    repl: 'filet'
	  },
	  {
	    reg: /fulfil/,
	    repl: 'fulfill'
	  },
	  {
	    reg: /gaol/,
	    repl: 'jail'
	  },
	  {
	    reg: /gauge/,
	    repl: 'gage'
	  },
	  {
	    reg: /grey/,
	    repl: 'gray'
	  },
	  {
	    reg: /licence/,
	    repl: 'license'
	  },
	  {
	    reg: /manoeuvre/,
	    repl: 'maneuver'
	  },
	  {
	    reg: /marvellous/,
	    repl: 'marvelous'
	  },
	  {
	    reg: /mould/,
	    repl: 'mold'
	  },

	  {
	    reg: /plough/,
	    repl: 'plow'
	  },
	  {
	    reg: /practise/,
	    repl: 'practice'
	  },

	  {
	    reg: /tranquill/,
	    repl: 'tranquil'
	  },
	  {
	    reg: /triall/,
	    repl: 'trial'
	  },
	  {
	    reg: /sceptic/,
	    repl: 'skeptic'
	  },
	  {
	    reg: /sulph/,
	    repl: 'sulf'
	  },
	  {
	    reg: /syphon/,
	    repl: 'siphon'
	  },
	  {
	    reg: /tonne/,
	    repl: 'ton'
	  },
	  {
	    reg: /anaesthetis/,
	    repl: 'anesthetiz'
	  },
	  {
	    reg: /anaesthetise/,
	    repl: 'anesthetize'
	  },
	  {
	    reg: /disc$/,
	    repl: 'disk'
	  },
	  {
	    reg: /tranquillise/,
	    repl: 'tranquilize'
	  }
	];

	const americanize = function(str) {
	  if (exceptions[str]) {
	    return exceptions[str];
	  }
	  let single = str.replace(/s$/, ''); //eww
	  if (exceptions[single]) {
	    return exceptions[single] + 's';
	  }
	  for (let i = 0; i < patterns.length; i++) {
	    if (str.match(patterns[i].reg)) {
	      return str.replace(patterns[i].reg, patterns[i].repl);
	    }
	  }

	  return str;
	};

	// console.log(americanize("synthesise") === "synthesize")
	// console.log(americanize('are'));
	// console.log(americanize('yoghourt') === 'yogurt');
	// console.log(americanize('yoghourts') === 'yogurts');
	// console.log(exceptions['yoghourt']);

	module.exports = americanize;


/***/ },
/* 118 */
/***/ function(module, exports) {

	//two-way us/uk transitions with no patterns
	module.exports = [
	  ['axe', 'ax'],
	  ['jewellery', 'jewelry'],
	  ['almanack', 'almanac'],
	  ['aluminium', 'aluminum'],
	  ['axe', 'ax'],
	  ['artefact', 'artifact'],
	  ['buses', 'busses'],
	  ['chequered', 'checkered'],
	  ['cypher', 'cipher'],
	  ['disc', 'disk'],
	  ['chilli', 'chili'],
	  ['inflexion', 'inflection'],
	  ['storey', 'story'],
	  ['pyjama', 'pajama'],
	  ['tyre', 'tire'],
	  ['waggon', 'wagon'],
	  ['woollen', 'woolen'],
	  ['woolly', 'wooly'],
	  ['woollies', 'woolies'],
	  ['yoghourt', 'yogurt'],
	  ['yoghurt', 'yogurt'],







	  ['aerogramme', 'aerogram'],
	  ['aerogrammes', 'aerograms'],
	  ['anaesthetise', 'anesthetize'],
	  ['anaesthetised', 'anesthetized'],
	  ['anaesthetises', 'anesthetizes'],
	  ['anaesthetising', 'anesthetizing'],
	  ['appal', 'appall'],
	  ['appals', 'appalls'],
	  ['armourers', 'armorers'],
	  ['bannister', 'banister'],
	  ['bannisters', 'banisters'],
	  ['battleaxe', 'battleax'],
	  ['behaviourists', 'behaviorists'],
	  ['bevvies', 'bevies'],
	  ['bevvy', 'bevy'],
	  ['biassing', 'biasing'],
	  ['busing', 'bussing'],
	  ['calliper', 'caliper'],
	  ['callipers', 'calipers'],
	  ['callisthenics', 'calisthenics'],
	  ['cancellation', 'cancelation'],
	  ['cancellations', 'cancelations'],
	  ['catalogued', 'cataloged'],
	  ['centred', 'centered'],
	  ['clarinettist', 'clarinetist'],
	  ['clarinettists', 'clarinetists'],
	  ['connexion', 'connection'],
	  ['connexions', 'connections'],
	  ['cosy', 'cozy'],
	  ['councillors', 'councilors'],
	  ['counsellors', 'counselors'],
	  ['crenellated', 'crenelated'],
	  ['crueller', 'crueler'],
	  ['cruellest', 'cruelest'],
	  ['dialled', 'dialed'],
	  ['dialling', 'dialing'],
	  ['distill', 'distil'],
	  ['distills', 'distils'],
	  ['enrol', 'enroll'],
	  ['enrols', 'enrolls'],
	  ['enthral', 'enthrall'],
	  ['enthrals', 'enthralls'],
	  ['epaulette', 'epaulet'],
	  ['epaulettes', 'epaulets'],
	  ['favourites', 'favorites'],
	  ['favouritism', 'favoritism'],
	  ['flautist', 'flutist'],
	  ['flautists', 'flutists'],
	  ['flavourings', 'flavorings'],
	  ['flavoursome', 'flavorsome'],
	  ['gases', 'gasses'],
	  ['gauging', 'gaging'],
	  ['ghettoise', 'ghettoize'],
	  ['ghettoised', 'ghettoized'],
	  ['ghettoises', 'ghettoizes'],
	  ['gipsies', 'gypsies'],
	  ['groyne', 'groin'],
	  ['groynes', 'groins'],
	  ['gruelling', 'grueling'],
	  ['gruellingly', 'gruelingly'],
	  ['gryphon', 'griffin'],
	  ['gryphons', 'griffins'],
	  ['instal', 'install'],
	  ['instalment', 'installment'],
	  ['instalments', 'installments'],
	  ['instals', 'installs'],
	  ['instil', 'instill'],
	  ['instils', 'instills'],
	  ['jewellers', 'jewelers'],
	  ['labourers', 'laborers'],
	  ['levellers', 'levelers'],
	  ['libellous', 'libelous'],
	  ['licencing', 'licensing'],
	  ['louvred', 'louvered'],
	  ['louvres', 'louvers'],
	  ['manoeuvrability', 'maneuverability'],
	  ['manoeuvrable', 'maneuverable'],
	  ['manoeuvre', 'maneuver'],
	  ['manoeuvred', 'maneuvered'],
	  ['manoeuvres', 'maneuvers'],
	  ['manoeuvring', 'maneuvering'],
	  ['manoeuvrings', 'maneuverings'],
	  ['minibuses', 'minibusses'],
	  ['modellers', 'modelers'],
	  ['moult', 'molt'],
	  ['moulted', 'molted'],
	  ['moulting', 'molting'],
	  ['moults', 'molts'],
	  ['moustache', 'mustache'],
	  ['moustached', 'mustached'],
	  ['moustaches', 'mustaches'],
	  ['moustachioed', 'mustachioed'],
	  ['neighbourhood', 'neighborhood'],
	  ['neighbourhoods', 'neighborhoods'],
	  ['neighbourliness', 'neighborliness'],
	  ['outmanoeuvre', 'outmaneuver'],
	  ['outmanoeuvred', 'outmaneuvered'],
	  ['outmanoeuvres', 'outmaneuvers'],
	  ['outmanoeuvring', 'outmaneuvering'],
	  ['panellist', 'panelist'],
	  ['panellists', 'panelists'],
	  ['philtre', 'filter'],
	  ['philtres', 'filters'],
	  ['ploughshare', 'plowshare'],
	  ['ploughshares', 'plowshares'],
	  ['pouffe', 'pouf'],
	  ['pouffes', 'poufs'],
	  ['practise', 'practice'],
	  ['practised', 'practiced'],
	  ['practises', 'practices'],
	  ['practising', 'practicing'],
	  ['pretence', 'pretense'],
	  ['pretences', 'pretenses'],
	  ['pummelled', 'pummel'],
	  ['pummelling', 'pummeled'],
	  ['pzazz', 'pizzazz'],
	  ['recognisably', 'recognizably'],
	  ['recognisance', 'recognizance'],
	  ['reconnoitred', 'reconnoitered'],
	  ['reconnoitring', 'reconnoitering'],
	  ['revellers', 'revelers'],
	  ['snowploughs', 'snowplow'],
	  ['storeys', 'stories'],
	  ['theatregoer', 'theatergoer'],
	  ['theatregoers', 'theatergoers'],
	  ['tranquillise', 'tranquilize'],
	  ['tranquillised', 'tranquilized'],
	  ['tranquilliser', 'tranquilizer'],
	  ['tranquillisers', 'tranquilizers'],
	  ['tranquillises', 'tranquilizes'],
	  ['tranquillising', 'tranquilizing'],
	  ['tranquilly', 'tranquility'],
	  ['travellers', 'travelers'],
	  ['videodiscs', 'videodisks'],







	];


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	// convert american spellings into british ones
	// built with patterns+exceptions from https://en.wikipedia.org/wiki/British_spelling
	// (some patterns are only safe to do in one direction)
	'use strict';
	const exceptions = __webpack_require__(118).reduce(function(h, a) {
	  h[a[1]] = a[0];
	  return h;
	}, {});

	const patterns = [
	  // ise -> ize
	  {
	    reg: /([^aeiou][iy])z(e|ed|es|ing|er)?$/,
	    repl: '$1s$2'
	  },
	  // our -> or
	  {
	    reg: /(..)our(ly|y|ite)?$/,
	    repl: '$1or$2'
	  },
	  // re -> er
	  {
	    reg: /([^cdnv])re(s)?$/,
	    repl: '$1er$2'
	  },
	  // xion -> tion
	  {
	    reg: /([aeiou])xion([ed])?$/,
	    repl: '$1tion$2'
	  },
	  //logue -> log
	  {
	    reg: /logue$/,
	    repl: 'log'
	  },
	  // ae -> e
	  {
	    reg: /([o|a])e/,
	    repl: 'e'
	  },
	  //eing -> ing
	  {
	    reg: /e(ing|able)$/,
	    repl: '$1'
	  },
	  // illful -> ilful
	  {
	    reg: /([aeiou]+[^aeiou]+[aeiou]+)ll(ful|ment|est|ing|or|er|ed)$/, //must be second-syllable
	    repl: '$1l$2'
	  },
	  {
	    reg: /ization/,
	    repl: 'isation'
	  },
	  {
	    reg: /izable/,
	    repl: 'isable'
	  },
	  {
	    reg: /orabl/,
	    repl: 'ourabl'
	  },
	  {
	    reg: /zingly/,
	    repl: 'singly'
	  },
	  {
	    reg: /ilizer/,
	    repl: 'iliser'
	  },
	  {
	    reg: /pedic/,
	    repl: 'paedic'
	  },
	  {
	    reg: /anesthes/,
	    repl: 'anaesthes'
	  },
	  {
	    reg: /ar(b|m|d)or/,
	    repl: 'ar$1our'
	  },
	  {
	    reg: /balk/,
	    repl: 'baulk'
	  },
	  {
	    reg: /behavior/,
	    repl: 'behaviour'
	  },
	  {
	    reg: /behove/,
	    repl: 'behoove'
	  },
	  {
	    reg: /canceled/,
	    repl: 'cancelled'
	  },
	  {
	    reg: /catalog/,
	    repl: 'catalogue'
	  },
	  {
	    reg: /meter/,
	    repl: 'metre'
	  },
	  {
	    reg: /center/,
	    repl: 'centre'
	  },
	  {
	    reg: /clamor/,
	    repl: 'clamour'
	  },
	  {
	    reg: /color/,
	    repl: 'colour'
	  },
	  {
	    reg: /defense/,
	    repl: 'defence'
	  },
	  {
	    reg: /endeavor/,
	    repl: 'endeavour'
	  },
	  {
	    reg: /favor/,
	    repl: 'favour'
	  },
	  {
	    reg: /flavor/,
	    repl: 'flavour'
	  },
	  {
	    reg: /filet/,
	    repl: 'fillet'
	  },
	  {
	    reg: /jail/,
	    repl: 'gaol'
	  },
	  {
	    reg: /gray/,
	    repl: 'grey'
	  },
	  {
	    reg: /^hematol/,
	    repl: 'haematol'
	  },
	  {
	    reg: /^hemo/,
	    repl: 'haemo'
	  },
	  {
	    reg: /^install/,
	    repl: 'instal'
	  },
	  {
	    reg: /mold/,
	    repl: 'mould'
	  },
	  {
	    reg: /neighbor/,
	    repl: 'neighbour'
	  },
	  {
	    reg: /odor/,
	    repl: 'odour'
	  },
	  {
	    reg: /^pedo/,
	    repl: 'paedo'
	  },
	  {
	    reg: /^pedia/,
	    repl: 'paedia'
	  },
	  {
	    reg: /^parlor/,
	    repl: 'parlour'
	  },
	  {
	    reg: /plow/,
	    repl: 'plough'
	  },
	  {
	    reg: /skeptic/,
	    repl: 'sceptic'
	  },
	  {
	    reg: /rumor/,
	    repl: 'rumour'
	  },
	  {
	    reg: /practice/,
	    repl: 'practise'
	  },
	  {
	    reg: /maneuver/,
	    repl: 'manoeuvre'
	  },
	  {
	    reg: /level(ed|er|ing)?$/,
	    repl: 'levell$1'
	  },
	  {
	    reg: /travel(ed|er|ing)?$/,
	    repl: 'travell$1'
	  },
	  {
	    reg: /tranquil/,
	    repl: 'tranquill'
	  },
	  {
	    reg: /tranquilize/,
	    repl: 'tranquillise'
	  },
	  {
	    reg: /vigor/,
	    repl: 'vigour'
	  },
	  {
	    reg: /fiber/,
	    repl: 'fibre'
	  },
	  {
	    reg: /drafts/,
	    repl: 'draughts'
	  },
	  {
	    reg: /disk/,
	    repl: 'disc'
	  },
	  {
	    reg: /uel(er|est|ed)/,
	    repl: 'uell$1'
	  },
	  {
	    reg: /cozi(er|est|es|ly)/,
	    repl: 'cosi$1'
	  },
	  {
	    reg: /colorize/,
	    repl: 'colourise'
	  },
	  {
	    reg: /honor/,
	    repl: 'honour'
	  },
	  {
	    reg: /abor(ed|ing)/,
	    repl: 'abour$1'
	  },
	  {
	    reg: /pedal(ed|ing)/,
	    repl: 'pedall$1'
	  },
	  {
	    reg: /shovel(ed|ing|er)/,
	    repl: 'shovell$1'
	  },
	  {
	    reg: /al(ed|ing|er)/,
	    repl: 'all$1'
	  },
	  {
	    reg: /el(ed|ing|er)/,
	    repl: 'ell$1'
	  },
	  {
	    reg: /ol(ed|ing|er)/,
	    repl: 'oll$1'
	  },
	  {
	    reg: /avor(ed|ing|er)/,
	    repl: 'avour$1'
	  },
	  {
	    reg: /anesth/,
	    repl: 'anaesth'
	  },
	  {
	    reg: /behoove/,
	    repl: 'behove'
	  },
	  {
	    reg: /sulfur/,
	    repl: 'sulphur'
	  },

	];

	const britishize = function(str) {
	  if (exceptions[str]) {
	    return exceptions[str];
	  }
	  let single = str.replace(/s$/, ''); //eww
	  if (exceptions[single]) {
	    return exceptions[single];
	  }
	  for (let i = 0; i < patterns.length; i++) {
	    if (str.match(patterns[i].reg)) {
	      return str.replace(patterns[i].reg, patterns[i].repl);
	    }
	  }
	  return str;
	};

	// console.log(britishize("synthesize") === "synthesise")
	// console.log(britishize("synthesized") === "synthesised")

	module.exports = britishize;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const sentence_parser = __webpack_require__(121);
	const Sentence = __webpack_require__(124);
	const ngram = __webpack_require__(190);
	const fns = __webpack_require__(125);

	//a text object is a series of sentences, along with the generic methods for transforming them
	class Text {
	  constructor(str) {
	    const the = this;
	    this.raw_text = str || '';
	    //build-up sentence methods
	    this.sentences = sentence_parser(str).map(function(s) {
	      return new Sentence(s);
	    });

	    this.contractions = {
	      // he'd -> he would
	      expand: function() {
	        return the.sentences.map(function(s) {
	          return s.contractions.expand();
	        });
	      },
	      // he would -> he'd
	      contract: function() {
	        return the.sentences.map(function(s) {
	          return s.contractions.contract();
	        });
	      }
	    };
	  }

	  //Text methods
	  ngram(options) {
	    let terms = this.terms();
	    terms = terms.map(function(t) {
	      return t.normal;
	    });
	    return ngram(terms, options);
	  }

	  //map over sentence methods
	  text() {
	    const arr = this.sentences.map(function(s) {
	      return s.text();
	    });
	    return fns.flatten(arr).join(' ');
	  }
	  normalized() {
	    const arr = this.sentences.map(function(s) {
	      return s.normalized();
	    });
	    return fns.flatten(arr).join(' ');
	  }
	  terms() {
	    const arr = this.sentences.map(function(s) {
	      return s.terms;
	    });
	    return fns.flatten(arr);
	  }
	  normalised() {
	    const arr = this.sentences.map(function(s) {
	      return s.normalized();
	    });
	    return fns.flatten(arr).join(' ');
	  }
	  tags() {
	    return this.sentences.map(function(s) {
	      return s.tags();
	    });
	  }
	  syllables() {
	    return this.sentences.reduce(function(arr, s) {
	      arr = arr.concat(s.syllables());
	      return arr;
	    }, []);
	  }
	  to_past() {
	    return this.sentences.map(function(s) {
	      return s.to_past();
	    });
	  }
	  to_present() {
	    return this.sentences.map(function(s) {
	      return s.to_present();
	    });
	  }
	  to_future() {
	    return this.sentences.map(function(s) {
	      return s.to_future();
	    });
	  }
	  negate() {
	    return this.sentences.map(function(s) {
	      return s.negate();
	    });
	  }
	  //mining
	  people() {
	    let arr = [];
	    for(let i = 0; i < this.sentences.length; i++) {
	      arr = arr.concat(this.sentences[i].people());
	    }
	    return arr;
	  }
	  places() {
	    let arr = [];
	    for(let i = 0; i < this.sentences.length; i++) {
	      arr = arr.concat(this.sentences[i].places());
	    }
	    return arr;
	  }
	  organisations() {
	    let arr = [];
	    for(let i = 0; i < this.sentences.length; i++) {
	      arr = arr.concat(this.sentences[i].organisations());
	    }
	    return arr;
	  }
	  dates() {
	    let arr = [];
	    for(let i = 0; i < this.sentences.length; i++) {
	      arr = arr.concat(this.sentences[i].dates());
	    }
	    return arr;
	  }
	  values() {
	    let arr = [];
	    for(let i = 0; i < this.sentences.length; i++) {
	      arr = arr.concat(this.sentences[i].values());
	    }
	    return arr;
	  }
	}
	Text.fn = Text.prototype;

	module.exports = Text;


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	//(Rule-based sentence boundary segmentation) - chop given text into its proper sentences.
	// Ignore periods/questions/exclamations used in acronyms/abbreviations/numbers, etc.
	// @spencermountain 2015 MIT
	'use strict';
	let abbreviations = __webpack_require__(122).abbreviations;

	const sentence_parser = function(text) {
	  const sentences = [];
	  //first do a greedy-split..
	  const chunks = text.split(/(\S.+?[.\?!])(?=\s+|$|")/g);

	  //detection of non-sentence chunks
	  const abbrev_reg = new RegExp('\\b(' + abbreviations.join('|') + ')[.!?] ?$', 'i');
	  const acronym_reg = new RegExp('[ |\.][A-Z]\.?$', 'i');
	  const elipses_reg = new RegExp('\\.\\.\\.*$');

	  //loop through these chunks, and join the non-sentence chunks back together..
	  const chunks_length = chunks.length;
	  for (let i = 0; i < chunks_length; i++) {
	    if (chunks[i]) {
	      //trim whitespace
	      chunks[i] = chunks[i].replace(/^\s+|\s+$/g, '');
	      //should this chunk be combined with the next one?
	      if (chunks[i + 1] && chunks[i].match(abbrev_reg) || chunks[i].match(acronym_reg) || chunks[i].match(elipses_reg)) {
	        chunks[i + 1] = ((chunks[i] || '') + ' ' + (chunks[i + 1] || '')).replace(/ +/g, ' ');
	      } else if (chunks[i] && chunks[i].length > 0) { //this chunk is a proper sentence..
	        sentences.push(chunks[i]);
	        chunks[i] = '';
	      }
	    }
	  }
	  //if we never got a sentence, return the given text
	  if (sentences.length === 0) {
	    return [text];
	  }

	  return sentences;
	};

	module.exports = sentence_parser;


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	//these are common word shortenings used in the lexicon and sentence segmentation methods
	//there are all nouns, or at the least, belong beside one.
	'use strict';
	const honourifics = __webpack_require__(123); //stored seperately, for 'noun.is_person()'

	//common abbreviations
	let main = [
	  'arc', 'al', 'exp', 'rd', 'st', 'dist', 'mt', 'fy', 'pd', 'pl', 'plz', 'tce', 'llb', 'md', 'bl', 'ma', 'ba', 'lit',
	  'ex', 'eg', 'ie', 'circa', 'ca', 'cca', 'vs', 'etc', 'esp', 'ft', 'bc', 'ad'
	];

	//person titles like 'jr', (stored seperately)
	main = main.concat(honourifics);

	//org main
	let orgs = [
	  'dept', 'univ', 'assn', 'bros', 'inc', 'ltd', 'co', 'corp',
	  //proper nouns with exclamation marks
	  'yahoo', 'joomla', 'jeopardy'
	];
	main = main.concat(orgs);

	//place main
	let places = [
	  'ala', 'ariz', 'ark', 'cal', 'calif', 'col', 'colo', 'conn', 'del', 'fed', 'fla', 'fl', 'ga', 'ida', 'ind', 'ia', 'la', 'kan', 'kans', 'ken', 'ky', 'la', 'md', 'mich', 'minn', 'mont', 'neb', 'nebr', 'nev', 'okla', 'penna', 'penn', 'pa', 'dak', 'tenn', 'tex', 'ut', 'vt', 'va', 'wash', 'wis', 'wisc', 'wy', 'wyo', 'usafa', 'alta', 'ont', 'que', 'sask', 'yuk',
	  'ave', 'blvd', 'cl', 'ct', 'cres', 'hwy'
	];
	main = main.concat(places);

	//date abbrevs.
	//these are added seperately because they are not nouns
	let dates = ['jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec', 'sept', 'sep'];
	main = main.concat(dates);

	module.exports = {
	  abbreviations: main,
	  dates: dates,
	  orgs: orgs,
	  places: places
	};


/***/ },
/* 123 */
/***/ function(module, exports) {

	//these are common person titles used in the lexicon and sentence segmentation methods
	//they are also used to identify that a noun is a person
	module.exports = [
	  //honourifics
	  'jr',
	  'mr',
	  'mrs',
	  'ms',
	  'dr',
	  'prof',
	  'sr',
	  'sen',
	  'corp',
	  'rep',
	  'gov',
	  'atty',
	  'supt',
	  'det',
	  'rev',
	  'col',
	  'gen',
	  'lt',
	  'cmdr',
	  'adm',
	  'capt',
	  'sgt',
	  'cpl',
	  'maj',
	  'miss',
	  'misses',
	  'mister',
	  'sir',
	  'esq',
	  'mstr',
	  'phd',
	  'adj',
	  'adv',
	  'asst',
	  'bldg',
	  'brig',
	  'comdr',
	  'hon',
	  'messrs',
	  'mlle',
	  'mme',
	  'op',
	  'ord',
	  'pvt',
	  'reps',
	  'res',
	  'sens',
	  'sfc',
	  'surg',
	];


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const Term = __webpack_require__(114);
	const fns = __webpack_require__(125);
	const tagger = __webpack_require__(126);
	const pos = __webpack_require__(128);
	const passive_voice = __webpack_require__(188);
	const negate = __webpack_require__(189);
	const contract = __webpack_require__(127).contract;

	//a sentence is an array of Term objects, along with their various methods
	class Sentence {

	  constructor(str) {
	    const the = this;
	    this.str = str || '';
	    const terms = str.split(' ');
	    //build-up term-objects
	    this.terms = terms.map(function(s) {
	      return new Term(s);
	    });
	    this.terms = tagger(this);
	    //contractions
	    this.contractions = {
	      // "he'd go" -> "he would go"
	      expand: function() {
	        //the hard part is already done, just flip them
	        the.terms.forEach(function(t) {
	          if (t.implicit) {
	            t.changeTo(t.implicit);
	            t.implicit = '';
	          }
	        });
	        return the;
	      },
	      // "he would go" -> "he'd go"
	      contract: function() {
	        return contract(the.terms);
	      }
	    };
	  }

	  //Sentence methods:

	  //insert a new word at this point
	  addBefore(i, str) {
	    let t = new Term(str);
	    this.terms.splice(i, 0, t);
	  }
	  addAfter(i, str) {
	    let t = new Term(str);
	    this.terms.splice(i + 1, 0, t);
	  }

	  //the ending punctuation
	  terminator() {
	    const allowed = ['.', '?', '!'];
	    const punct = this.str.slice(-1) || '';
	    if (allowed.indexOf(punct) !== -1) {
	      return punct;
	    }
	    return '.';
	  }

	  //part-of-speech assign each term
	  tag() {
	    this.terms = tagger(this);
	    return this.terms;
	  }

	  //is it a question/statement
	  sentence_type() {
	    const char = this.terminator();
	    const types = {
	      '?': 'interrogative',
	      '!': 'exclamative',
	      '.': 'declarative',
	    };
	    return types[char] || 'declarative';
	  }

	  // A was verbed by B - B verbed A
	  is_passive() {
	    return passive_voice(this);
	  }
	  // A is B - A is not B
	  negate() {
	    return negate(this);
	  }
	  // john walks quickly -> john walked quickly
	  to_past() {
	    this.terms.forEach(function(t) {
	      if (t instanceof pos.Verb) {
	        t.to_past();
	      }
	    });
	    return this;
	  }
	  // john walked quickly -> john walks quickly
	  to_present() {
	    this.terms.forEach(function(t) {
	      if (t instanceof pos.Verb) {
	        t.to_present();
	      }
	    });
	    return this;
	  }
	  // john walked quickly -> john will walk quickly
	  to_future() {
	    this.terms.forEach(function(t) {
	      if (t instanceof pos.Verb) {
	        t.to_future();
	      }
	    });
	    return this;
	  }

	  //map over Term methods
	  text() {
	    return this.terms.reduce(function(s, t) {
	      //implicit contractions shouldn't be included
	      if (t.text) {
	        if (s === '') {
	          s = t.text;
	        } else {
	          s += ' ' + t.text;
	        }
	      }
	      return s;
	    }, '');
	  }
	  //like text but for cleaner text
	  normalized() {
	    return this.terms.reduce(function(s, t) {
	      if (t.text) {
	        s += ' ' + t.normal;
	      }
	      return s;
	    }, '');
	  }
	  //return only the POS tags
	  tags() {
	    return fns.pluck(this.terms, 'tag');
	  }
	  syllables() {
	    return this.terms.reduce(function(arr, t) {
	      arr = arr.concat(t.syllables());
	      return arr;
	    }, []);
	  }
	  //mining for specific things
	  people() {
	    return this.terms.filter(function(t) {
	      return t.pos['Person'];
	    });
	  }
	  places() {
	    return this.terms.filter(function(t) {
	      return t.pos['Place'];
	    });
	  }
	  dates() {
	    return this.terms.filter(function(t) {
	      return t.pos['Date'];
	    });
	  }
	  organisations() {
	    return this.terms.filter(function(t) {
	      return t.pos['Organisation'];
	    });
	  }
	  values() {
	    return this.terms.filter(function(t) {
	      return t.pos['Value'];
	    });
	  }
	}

	Sentence.fn = Sentence.prototype;

	module.exports = Sentence;


/***/ },
/* 125 */
/***/ function(module, exports) {

	'use strict';
	exports.pluck = function(arr, str) {
	  arr = arr || [];
	  return arr.map(function(o) {
	    return o[str];
	  });
	};

	exports.flatten = function(arr) {
	  let all = [];
	  arr.forEach(function(a) {
	    all = all.concat(a);
	  });
	  return all;
	};

	exports.sameArr = function(arr, arrB) {
	  if (typeof arr !== typeof arrB || arr.length !== arrB.length) {
	    return null;
	  }
	  for(let i = 0; i < arr.length; i++) {
	    if (arr[i] !== arrB[i]) {
	      return false;
	    }
	  }
	  return true;
	};

	exports.compact = function(arr) {
	  return arr.filter(function(a) {
	    if (a === undefined || a === null) {
	      return false;
	    }
	    return true;
	  });
	};

	//string utilities
	exports.endsWith = function(str, suffix) {
	  return str.indexOf(suffix, str.length - suffix.length) !== -1;
	};

	exports.titlecase = function(str) {
	  if (!str) {
	    return '';
	  }
	  return str.charAt(0).toUpperCase() + str.slice(1);
	};


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	//part-of-speech tagging
	'use strict';
	const contractions = __webpack_require__(127);
	const lexicon = __webpack_require__(176);
	const word_rules = __webpack_require__(184);
	const grammar_rules = __webpack_require__(185);
	const fancy_lumping = __webpack_require__(186);
	const phrasal_verbs = __webpack_require__(187);
	const fns = __webpack_require__(125);
	const pos = __webpack_require__(128);

	//swap the Term object with a proper Pos class
	const assign = function(t, tag, reason) {
	  let P = pos.classMapping[tag] || pos.Term;
	  let implicit = t.implicit;
	  t = new P(t.text, tag);
	  t.reason = reason;
	  t.implicit = implicit;
	  return t;
	};

	//consult lexicon for this known-word
	const lexicon_pass = function(terms) {
	  return terms.map(function(t) {
	    //check lexicon straight-up
	    if (lexicon[t.normal] !== undefined) {
	      return assign(t, lexicon[t.normal], 'lexicon_pass');
	    }
	    //try to match it without a prefix - eg. outworked -> worked
	    if (t.normal.match(/^(over|under|out|-|un|re|en).{4}/)) {
	      const attempt = t.normal.replace(/^(over|under|out|.*?-|un|re|en)/, '');
	      return assign(t, lexicon[attempt], 'lexicon_prefix');
	    }
	    //match 'twenty-eight'
	    if (t.normal.match(/-/)) {
	      let sides = t.normal.split('-');
	      if (lexicon[sides[0]]) {
	        return assign(t, lexicon[sides[0]], 'lexicon_dash');
	      }
	      if (lexicon[sides[1]]) {
	        return assign(t, lexicon[sides[1]], 'lexicon_dash');
	      }
	    }
	    return t;
	  });
	};

	//set POS for capitalised words
	const capital_signals = function(terms) {
	  //first words need careful rules
	  if (terms[0].is_acronym()) {
	    terms[0] = assign(terms[0], 'Noun', 'acronym');
	  }
	  //non-first-word capitals are nouns
	  for (let i = 1; i < terms.length; i++) {
	    if (terms[i].is_capital() || terms[i].is_acronym()) {
	      terms[i] = assign(terms[i], 'Noun', 'capital_signal');
	    }
	  }
	  return terms;
	};

	//regex hints for words/suffixes
	const word_rules_pass = function(terms) {
	  for (let i = 0; i < terms.length; i++) {
	    if (terms[i].tag !== '?') {
	      continue;
	    }
	    for (let o = 0; o < word_rules.length; o++) {
	      if (terms[i].normal.length > 4 && terms[i].normal.match(word_rules[o].reg)) {
	        terms[i] = assign(terms[i], word_rules[o].pos, 'rules_pass_' + o);
	        break;
	      }
	    }
	  }
	  return terms;
	};

	//turn [noun, noun..] into [noun..]
	const chunk_neighbours = function(terms) {
	  let new_terms = [];
	  let last = null;
	  for(let i = 0; i < terms.length; i++) {
	    let t = terms[i];
	    //if the tags match (but it's not a hidden contraction)
	    if (last !== null && t.tag === last && !t.implicit) {
	      new_terms[new_terms.length - 1].text += ' ' + t.text;
	      new_terms[new_terms.length - 1].normalize();
	    } else {
	      new_terms.push(t);
	    }
	    last = t.tag;
	  }
	  return new_terms;
	};


	//hints from the sentence grammar
	const grammar_rules_pass = function(s) {
	  let tags = s.tags();
	  for(let i = 0; i < s.terms.length; i++) {
	    for(let o = 0; o < grammar_rules.length; o++) {
	      let rule = grammar_rules[o];
	      //does this rule match
	      if (fns.sameArr(rule.before, tags.slice(i, i + rule.before.length))) {
	        //change before/after for each term
	        for(let c = 0; c < rule.before.length; c++) {
	          s.terms[i + c] = assign(s.terms[i + c], rule.after[c], 'grammar_rule ' + c);
	        }
	      }
	    }
	  }
	  return s.terms;
	};

	const noun_fallback = function(terms) {
	  for(let i = 0; i < terms.length; i++) {
	    if (terms[i].tag === '?' && terms[i].normal.match(/[a-z]/)) {
	      terms[i] = assign(terms[i], 'Noun', 'fallback');
	    }
	  }
	  return terms;
	};

	//turn nouns into person/place
	const specific_pos = function(terms) {
	  for(let i = 0; i < terms.length; i++) {
	    let t = terms[i];
	    if (t instanceof pos.Noun) {
	      if (t.is_person()) {
	        terms[i] = assign(t, 'Person');
	      } else if (t.is_place()) {
	        terms[i] = assign(t, 'Place');
	      } else if (t.is_value()) {
	        terms[i] = assign(t, 'Value');
	      } else if (t.is_date()) {
	        terms[i] = assign(t, 'Date');
	      } else if (t.is_organisation()) {
	        terms[i] = assign(t, 'Organisation');
	      }
	    }
	  }
	  return terms;
	};

	const tagger = function(s) {
	  //word-level rules
	  s.terms = capital_signals(s.terms);
	  s.terms = contractions.easy_ones(s.terms);
	  s.terms = lexicon_pass(s.terms);
	  s.terms = word_rules_pass(s.terms);
	  //repeat these steps a couple times, to wiggle-out the grammar
	  for(let i = 0; i < 2; i++) {
	    s.terms = grammar_rules_pass(s);
	    s.terms = chunk_neighbours(s.terms);
	    s.terms = noun_fallback(s.terms);
	    s.terms = phrasal_verbs(s.terms);
	    s.terms = specific_pos(s.terms);
	    s.terms = contractions.hard_ones(s.terms);
	    s.terms = fancy_lumping(s.terms);
	  }
	  return s.terms;
	};

	module.exports = tagger;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	//add a 'quiet' token for contractions so we can represent their grammar
	//some contractions need detailed POS tense info, to resolve the is/was/has part
	'use strict';
	const pos = __webpack_require__(128);

	const easy_contractions = {
	  'i\'d': ['i', 'would'],
	  'she\'d': ['she', 'would'],
	  'he\'d': ['he', 'would'],
	  'they\'d': ['they', 'would'],
	  'we\'d': ['we', 'would'],
	  'i\'ll': ['i', 'will'],
	  'she\'ll': ['she', 'will'],
	  'he\'ll': ['he', 'will'],
	  'they\'ll': ['they', 'will'],
	  'we\'ll': ['we', 'will'],
	  'i\'ve': ['i', 'have'],
	  'they\'ve': ['they', 'have'],
	  'we\'ve': ['we', 'have'],
	  'should\'ve': ['should', 'have'],
	  'would\'ve': ['would', 'have'],
	  'could\'ve': ['could', 'have'],
	  'must\'ve': ['must', 'have'],
	  'i\'m': ['i', 'am'],
	  'we\'re': ['we', 'are'],
	  'they\'re': ['they', 'are'],
	  'cannot': ['can', 'not']
	};
	let ambiguous = {
	  'he\'s': 'he',
	  'she\'s': 'she',
	  'it\'s': 'it',
	  'who\'s': 'who',
	  'what\'s': 'what',
	  'where\'s': 'where',
	  'when\'s': 'when',
	  'why\'s': 'why',
	  'how\'s': 'how'
	};
	let opposite_map = Object.keys(ambiguous).reduce(function(h, k) {
	  h[ambiguous[k]] = k;
	  return h;
	}, {});

	//take remaining sentence after contraction and decide which verb fits best [is/was/has]
	let chooseVerb = function(terms) {
	  for(let i = 0; i < terms.length; i++) {
	    //he's nice
	    if (terms[i].pos['Adjective']) {
	      return 'is';
	    }
	    //he's followed
	    if (terms[i].tag === 'PastTense') {
	      return 'has';
	    }
	    //he's following
	    if (terms[i].tag === 'Gerund') {
	      return 'is';
	    }
	  }
	  return 'is';
	};

	const easy_ones = function(terms) {
	  for (let i = 0; i < terms.length; i++) {
	    const t = terms[i];
	    if (easy_contractions[t.normal]) {
	      //first one assumes the whole word, but has implicit first-half of contraction
	      terms[i].implicit = easy_contractions[t.normal][0];
	      //second one gets an empty term '', but has an implicit verb, like 'is'
	      let word_two = new pos.Term('');
	      word_two.implicit = easy_contractions[t.normal][1];
	      terms.splice(i + 1, 0, word_two);
	      i++;
	    }
	  }
	  return terms;
	};

	const hard_ones = function(terms) {
	  for (let i = 0; i < terms.length; i++) {
	    const t = terms[i];
	    if (ambiguous[t.normal]) {
	      let pronoun = ambiguous[t.normal];
	      let verb = chooseVerb(terms.slice(i, terms.length)); //send the rest of the sentence over
	      //first one assumes the whole word, but has implicit first-half of contraction
	      terms[i].implicit = pronoun;
	      //second one gets an empty term '', but has an implicit verb, like 'is'
	      let word_two = new pos.Term('');
	      word_two.implicit = verb;
	      terms.splice(i + 1, 0, word_two);
	      i++;
	    }
	  }
	  return terms;
	};

	const combine_contraction = function(terms, i, k) {
	  //combine two terms
	  terms[i].implicit = terms[i].text;
	  terms[i + 1].implicit = terms[i + 1].text;
	  terms[i].text = k;
	  terms[i].rebuild();
	  //undo second term
	  terms[i + 1].text = '';
	  terms[i + 1].rebuild();
	  return terms;
	};

	//turn 'i will' into "i'll"
	const contract = function(terms) {
	  for (let i = 0; i < terms.length - 1; i++) {
	    const t = terms[i];
	    Object.keys(easy_contractions).forEach(function(k) {
	      let arr = easy_contractions[k];
	      let next = terms[i + 1];
	      if (terms[i].normal === arr[0] && next.normal === arr[1]) {
	        terms = combine_contraction(terms, i, k);
	        return;
	      }
	      //'hard ones'
	      if (opposite_map[terms[i].normal] && (next.normal === 'is' || next.normal === 'was' || next.normal === 'has')) {
	        terms = combine_contraction(terms, i, opposite_map[terms[i].normal]);
	        return;
	      }
	    });
	  }
	  return terms;
	};

	module.exports = {
	  easy_ones,
	  hard_ones,
	  contract
	};


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	
	const Term = __webpack_require__(114);

	const Verb = __webpack_require__(129);
	const Adverb = __webpack_require__(138);
	const Adjective = __webpack_require__(140);

	const Noun = __webpack_require__(146);
	const Person = __webpack_require__(167);
	const Place = __webpack_require__(168);
	const Organisation = __webpack_require__(169);
	const Value = __webpack_require__(170);
	const _Date = __webpack_require__(173);


	const tag_mapping = {
	  //nouns
	  'NNA': 'Acronym',
	  'NNS': 'Plural',
	  'NN': 'Noun',
	  'NNO': 'Posessive',
	  'CD': 'Value',
	  // 'NNP': 'Noun',
	  // 'NNPA': 'Noun',
	  // 'NNAB': 'Noun',
	  // 'NNPS': 'Noun',
	  // 'NNG': 'Noun',
	  // 'CD': 'Noun',
	  // 'NU': 'Noun',
	  // 'DA': 'Noun',

	  //glue
	  'PP': 'Posessive',
	  'PRP': 'Pronoun',
	  'UH': 'Expression', //interjection
	  'FW': 'Expression', //foreign-word
	  'DT': 'Determiner',
	  'CC': 'Conjunction',
	  'IN': 'Preposition',

	  //verbs
	  'VB': 'Verb',
	  'VBD': 'PastTense',
	  'VBF': 'FutureTense',
	  'VBP': 'Infinitive',
	  'VBZ': 'PresentTense',
	  'VBG': 'Gerund',
	  'VBN': 'Verb',
	  'CP': 'Copula',
	  'MD': 'Modal',
	  'JJ': 'Adjective',
	  'JJR': 'Comparative',
	  'JJS': 'Superlative',
	  'RB': 'Adverb',
	};

	const classMapping = {
	  'Noun': Noun,
	  'Honourific': Noun,
	  'Acronym': Noun,
	  'Plural': Noun,
	  'Pronoun': Noun,
	  'Actor': Noun,
	  'Abbreviation': Noun,

	  'Verb': Verb,
	  'PresentTense': Verb,
	  'FutureTense': Verb,
	  'PastTense': Verb,
	  'PresentTense': Verb,
	  'Infinitive': Verb,
	  'PerfectTense': Verb,
	  'PluperfectTense': Verb,
	  'Gerund': Verb,
	  'Copula': Verb,
	  'Modal': Verb,

	  'Comparative': Adjective,
	  'Superlative': Adjective,
	  'Adjective': Adjective,

	  'Determiner': Term,
	  'Preposition': Term,
	  'Expression': Term,
	  'Conjunction': Term,
	  'Posessive': Term,

	  'Adverb': Adverb,
	  'Value': Value,
	  'Place': Place,
	  'Person': Person,
	  'Organisation': Organisation,
	  'Date': _Date,
	};

	module.exports = {
	  tag_mapping,
	  classMapping,
	  Term,
	  'Date': _Date,
	  Value,
	  Verb,
	  Person,
	  Place,
	  Organisation,
	  Adjective,
	  Adverb,
	  Noun,
	};


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const Term = __webpack_require__(114);
	const conjugate = __webpack_require__(130);
	const negate = __webpack_require__(137);

	const verbTags = {
	  infinitive: 'Infinitive',
	  present: 'PresentTense',
	  past: 'PastTense',
	  gerund: 'Gerund',
	  actor: 'Actor',
	  future: 'FutureTense',
	  pluperfect: 'PluperfectTense',
	  perfect: 'PerfectTense',

	  PerfectTense: 'PerfectTense',
	  PluperfectTense: 'PluperfectTense',
	  FutureTense: 'FutureTense',
	  PastTense: 'PastTense',
	  PresentTense: 'PresentTense',
	};

	class Verb extends Term {
	  constructor(str, tag) {
	    super(str);
	    this.tag = tag;
	    this.pos['Verb'] = true;
	    this.conjugations = {}; //cached conjugations
	    //if we've been told which
	    this.pos[tag] = true;
	    if (tag && verbTags[tag]) {
	      this.conjugations[tag] = this.normal;
	    }
	  }


	  //retrieve a specific form
	  conjugation() {
	    //check cached conjugations
	    this.conjugations = this.conjugate();
	    let keys = Object.keys(this.conjugations);
	    for(let i = 0; i < keys.length; i++) {
	      if (this.conjugations[keys[i]] === this.normal) {
	        return verbTags[keys[i]];
	      }
	    }
	    return verbTags[predict(this.normal)];
	  }

	  conjugate() {
	    this.conjugations = conjugate(this.normal);
	    return this.conjugations;
	  }
	  to_past() {
	    let tense = 'past';
	    if (!this.conjugations[tense]) {
	      this.conjugate(this.normal);
	    }
	    this.tag = verbTags[tense];
	    this.changeTo(this.conjugations[tense]);
	    return this.conjugations[tense];
	  }
	  to_present() {
	    let tense = 'present';
	    if (!this.conjugations[tense]) {
	      this.conjugate(this.normal);
	    }
	    this.tag = verbTags[tense];
	    this.changeTo(this.conjugations[tense]);
	    return this.conjugations[tense];
	  }
	  to_future() {
	    let tense = 'future';
	    if (!this.conjugations[tense]) {
	      this.conjugate(this.normal);
	    }
	    this.tag = verbTags[tense];
	    this.changeTo(this.conjugations[tense]);
	    return this.conjugations[tense];
	  }


	  //is this verb negative already?
	  isNegative() {
	    const str = this.normal;
	    if (str.match(/(n't|\bnot\b)/)) {
	      return true;
	    }
	    return false;
	  }

	  negate(form) {
	    if (this.isNegative()) {
	      return this.text;
	    }
	    this.changeTo(negate(this, form));
	    return this.text;

	  }

	}
	Verb.fn = Verb.prototype;

	// let v = new Verb("walk", "asdf")
	// console.log(v.form())

	module.exports = Verb;


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	//turn a verb into its other grammatical forms.
	'use strict';
	const verb_to_actor = __webpack_require__(131);
	const to_infinitive = __webpack_require__(132);
	const from_infinitive = __webpack_require__(134);
	const irregular_verbs = __webpack_require__(133);
	const predict = __webpack_require__(135);


	//make sure object has all forms
	const fufill = function(obj, prefix) {
	  if (!obj.infinitive) {
	    return obj;
	  }
	  if (!obj.gerund) {
	    if (obj.infinitive.match(/e$/)) {
	      obj.gerund = obj.infinitive.replace(/e$/, 'ing');
	    } else {
	      obj.gerund = obj.infinitive + 'ing';
	    }
	  }
	  if (obj.actor === undefined) {
	    obj.actor = verb_to_actor(obj.infinitive);
	  }
	  if (!obj.present) {
	    obj.present = obj.infinitive + 's';
	  }
	  if (!obj.past) {
	    if (obj.infinitive.match(/e$/)) {
	      obj.past = obj.infinitive + 'd';
	    } else {
	      obj.past = obj.infinitive + 'ed';
	    }
	  }
	  //add the prefix to all forms, if it exists
	  if (prefix) {
	    Object.keys(obj).forEach(function(k) {
	      obj[k] = prefix + obj[k];
	    });
	  }
	  //future is 'will'+infinitive
	  if (!obj.future) {
	    obj.future = 'will ' + obj.infinitive;
	  }
	  //perfect is 'have'+past-tense
	  if (!obj.perfect) {
	    obj.perfect = 'have ' + (obj.participle || obj.past);
	  }
	  //pluperfect is 'had'+past-tense
	  if (!obj.pluperfect) {
	    obj.pluperfect = 'had ' + obj.past;
	  }
	  //future perfect is 'will have'+past-tense
	  if (!obj.future_perfect) {
	    obj.future_perfect = 'will have ' + obj.past;
	  }
	  return obj;
	};

	const conjugate = function(w) {
	  if (w === undefined) {
	    return {};
	  }

	  //for phrasal verbs ('look out'), conjugate look, then append 'out'
	  const phrasal_reg = new RegExp('^(.*?) (in|out|on|off|behind|way|with|of|do|away|across|ahead|back|over|under|together|apart|up|upon|aback|down|about|before|after|around|to|forth|round|through|along|onto)$', 'i');
	  if (w.match(' ') && w.match(phrasal_reg)) {
	    const split = w.match(phrasal_reg, '');
	    const phrasal_verb = split[1];
	    const particle = split[2];
	    const result = conjugate(phrasal_verb); //recursive
	    Object.keys(result).forEach(function(k) {
	      if (result[k]) {
	        result[k] += ' ' + particle;
	      }
	    });
	    return result;
	  }

	  //for pluperfect ('had tried') remove 'had' and call it past-tense
	  w = w.replace(/^had /i, '');
	  //for perfect ('have tried') remove 'have' and call it past-tense
	  w = w.replace(/^have /i, '');
	  //for future perfect ('will have tried') remove 'will have' and call it past-tense
	  w = w.replace(/^will have /i, '');
	  //chop it if it's future-tense
	  w = w.replace(/^will /i, '');

	  //un-prefix the verb, and add it in later
	  let prefix = '';
	  let match = w.match(/^(over|under|re|anti|full)[- ]?([a-z]*)/i);
	  if (match) {
	    prefix = match[1];
	    w = match[2];
	  }

	  //guess the tense, so we know which transormation to make
	  const predicted = predict(w) || 'infinitive';
	  //check against suffix rules
	  let infinitive = to_infinitive(w, predicted);
	  //check irregulars
	  let obj = irregular_verbs[w] || irregular_verbs[infinitive] || {};
	  obj.infinitive = infinitive;
	  //apply regex-transformations
	  let conjugations = from_infinitive(infinitive);
	  Object.keys(conjugations).forEach(function(k) {
	    if (!obj[k]) {
	      obj[k] = conjugations[k];
	    }
	  });
	  return fufill(obj, prefix);
	};
	module.exports = conjugate;

	// console.log(conjugate('convolute'));


	// console.log(conjugate('overtake'));
	// console.log(conjugate("watch out"))
	// console.log(conjugate("watch"))
	// console.log(conjugate("smash"))
	// console.log(conjugate("word"))
	// // broken
	// console.log(conjugate("read"))
	// console.log(conjugate("free"))
	// console.log(conjugate("flesh"))
	// console.log(conjugate("branch"))
	// console.log(conjugate("spred"))
	// console.log(conjugate("bog"))
	// console.log(conjugate("nod"))
	// console.log(conjugate("had tried"))
	// console.log(conjugate("have tried"))


/***/ },
/* 131 */
/***/ function(module, exports) {

	//somone who does this present-tense verb
	//turn 'walk' into 'walker'
	'use strict';
	const actor = function(str) {
	  str = str || '';
	  const irregulars = {
	    'tie': 'tier',
	    'dream': 'dreamer',
	    'sail': 'sailer',
	    'run': 'runner',
	    'rub': 'rubber',
	    'begin': 'beginner',
	    'win': 'winner',
	    'claim': 'claimant',
	    'deal': 'dealer',
	    'spin': 'spinner'
	  };
	  const dont = {
	    'aid': 1,
	    'fail': 1,
	    'appear': 1,
	    'happen': 1,
	    'seem': 1,
	    'try': 1,
	    'say': 1,
	    'marry': 1,
	    'be': 1,
	    'forbid': 1,
	    'understand': 1,
	    'bet': 1
	  };
	  const transforms = [{
	    'reg': /e$/i,
	    'repl': 'er'
	  }, {
	    'reg': /([aeiou])([mlgp])$/i,
	    'repl': '$1$2$2er'
	  }, {
	    'reg': /([rlf])y$/i,
	    'repl': '$1ier'
	  }, {
	    'reg': /^(.?.[aeiou])t$/i,
	    'repl': '$1tter'
	  }];

	  if (dont.hasOwnProperty(str)) {
	    return null;
	  }
	  if (irregulars.hasOwnProperty(str)) {
	    return irregulars[str];
	  }
	  for (let i = 0; i < transforms.length; i++) {
	    if (str.match(transforms[i].reg)) {
	      return str.replace(transforms[i].reg, transforms[i].repl);
	    }
	  }
	  return str + 'er';
	};

	// console.log(verb_to_actor('set'))
	// console.log(verb_to_actor('sweep'))
	// console.log(verb_to_actor('watch'))
	module.exports = actor;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const irregular_verbs = __webpack_require__(133);
	let known_verbs = Object.keys(irregular_verbs).reduce(function(h, k) {
	  Object.keys(irregular_verbs[k]).forEach(function(k2) {
	    h[irregular_verbs[k][k2]] = k;
	  });
	  return h;
	}, {});


	let rules = {
	  participle: [
	    {
	      reg: /own$/i,
	      to: 'ow'
	    },
	    {
	      reg: /(.)un([g|k])$/i,
	      to: '$1in$2'
	    },
	    {
	      reg: /(..)en$/i,
	      to: '$1e'
	    },
	  ],
	  actor: [
	    {
	      reg: /(er)er$/i,
	      to: '$1'
	    }
	  ],
	  present: [
	    {
	      reg: /(ies)$/i,
	      to: 'y'
	    }, {
	      reg: /(tch|sh)es$/i,
	      to: '$1'
	    }, {
	      reg: /(ss)es$/i,
	      to: '$1'
	    }, {
	      reg: /([tzlshicgrvdnkmu])es$/i,
	      to: '$1e'
	    }, {
	      reg: /(n[dtk]|c[kt]|[eo]n|i[nl]|er|a[ytrl])s$/i,
	      to: '$1'
	    }, {
	      reg: /(ow)s$/i,
	      to: '$1'
	    }, {
	      reg: /(op)s$/i,
	      to: '$1'
	    }, {
	      reg: /([eirs])ts$/i,
	      to: '$1t'
	    }, {
	      reg: /(ll)s$/i,
	      to: '$1'
	    }, {
	      reg: /(el)s$/i,
	      to: '$1'
	    }, {
	      reg: /(ip)es$/i,
	      to: '$1e'
	    }, {
	      reg: /ss$/i,
	      to: 'ss'
	    }, {
	      reg: /s$/i,
	      to: ''
	    }],
	  gerund: [
	    {
	      reg: /pping$/i,
	      to: 'p'
	    }, {
	      reg: /lling$/i,
	      to: 'll'
	    }, {
	      reg: /tting$/i,
	      to: 't'
	    }, {
	      reg: /ssing$/i,
	      to: 'ss'
	    }, {
	      reg: /gging$/i,
	      to: 'g'
	    }, {
	      reg: /([^aeiou])ying$/i,
	      to: '$1y'
	    }, {
	      reg: /(i.)ing$/i,
	      to: '$1e'
	    }, {
	      reg: /(u[rtcb]|[bdtpkg]l|n[cg]|a[gdkvtc]|[ua]s|[dr]g|yz|o[rlsp]|cre)ing$/i,
	      to: '$1e'
	    }, {
	      reg: /(ch|sh)ing$/i,
	      to: '$1'
	    }, {
	      reg: /(..)ing$/i,
	      to: '$1'
	    }],
	  past: [
	    {
	      reg: /(ued)$/i,
	      to: 'ue'
	    }, {
	      reg: /(e|i)lled$/i,
	      to: '$1ll'
	    }, {
	      reg: /(sh|ch)ed$/i,
	      to: '$1'
	    }, {
	      reg: /(tl|gl)ed$/i,
	      to: '$1e'
	    }, {
	      reg: /(ss)ed$/i,
	      to: '$1'
	    }, {
	      reg: /pped$/i,
	      to: 'p'
	    }, {
	      reg: /tted$/i,
	      to: 't'
	    }, {
	      reg: /gged$/i,
	      to: 'g'
	    }, {
	      reg: /(h|ion|n[dt]|ai.|[cs]t|pp|all|ss|tt|int|ail|ld|en|oo.|er|k|pp|w|ou.|rt|ght|rm)ed$/i,
	      to: '$1'
	    }, {
	      reg: /(..[^aeiou])ed$/i,
	      to: '$1e'
	    }, {
	      reg: /ied$/i,
	      to: 'y'
	    }, {
	      reg: /(.o)ed$/i,
	      to: '$1o'
	    }, {
	      reg: /(.i)ed$/i,
	      to: '$1'
	    }, {
	      reg: /([rl])ew$/i,
	      to: '$1ow'
	    }, {
	      reg: /([pl])t$/i,
	      to: '$1t'
	    }]
	};

	const to_infinitive = function (str, from_tense) {
	  if (known_verbs[str]) {
	    return known_verbs[str];
	  }
	  if (from_tense === 'infinitive') {
	    return str;
	  }
	  let regs = rules[from_tense] || [];
	  for(let i = 0; i < regs.length; i++) {
	    if (str.match(regs[i].reg)) {
	      return str.replace(regs[i].reg, regs[i].to);
	    }
	  }
	  return str;
	};

	// console.log(to_infinitive('wrecked', 'past'));

	module.exports = to_infinitive;


/***/ },
/* 133 */
/***/ function(module, exports) {

	//a list of exceptions to the verb rules
	module.exports = {
	  arise: {
	    past: 'arose',
	    participle: 'arisen'
	  },
	  babysit: {
	    past: 'babysat',
	    actor: 'babysitter'
	  },
	  be: {
	    past: 'was',
	    present: 'am',
	    future: 'will be',
	    perfect: 'have been',
	    pluperfect: 'had been',
	    future_perfect: 'will have been',
	    actor: '',
	    gerund: 'am'
	  },
	  is: {
	    past: 'was',
	    present: 'is',
	    future: 'will be',
	    perfect: 'have been',
	    pluperfect: 'had been',
	    future_perfect: 'will have been',
	    actor: '',
	    gerund: 'being'
	  },
	  beat: {
	    gerund: 'beating',
	    actor: 'beater'
	  },
	  begin: {
	    gerund: 'beginning',
	    past: 'began'
	  },
	  bet: {
	    actor: 'better'
	  },
	  bind: {
	    past: 'bound'
	  },
	  bite: {
	    gerund: 'biting',
	    past: 'bit'
	  },
	  bleed: {
	    past: 'bled'
	  },
	  break: {
	    past: 'broke'
	  },
	  breed: {
	    past: 'bred'
	  },
	  bring: {
	    past: 'brought'
	  },
	  broadcast: {
	    past: 'broadcast'
	  },
	  build: {
	    past: 'built'
	  },
	  buy: {
	    past: 'bought'
	  },
	  catch: {
	    past: 'caught'
	  },
	  choose: {
	    gerund: 'choosing',
	    past: 'chose'
	  },
	  cost: {
	    past: 'cost'
	  },
	  deal: {
	    past: 'dealt'
	  },
	  dig: {
	    gerund: 'digging',
	    past: 'dug'
	  },
	  do: {
	    past: 'did',
	    present: 'does'
	  },
	  draw: {
	    past: 'drew'
	  },
	  drink: {
	    past: 'drank'
	  },
	  drive: {
	    gerund: 'driving',
	    past: 'drove'
	  },
	  eat: {
	    gerund: 'eating',
	    past: 'ate',
	    actor: 'eater'
	  },
	  fall: {
	    past: 'fell'
	  },
	  feed: {
	    past: 'fed'
	  },
	  feel: {
	    past: 'felt',
	    actor: 'feeler'
	  },
	  fight: {
	    past: 'fought'
	  },
	  find: {
	    past: 'found'
	  },
	  fly: {
	    past: 'flew'
	  },
	  forbid: {
	    past: 'forbade'
	  },
	  forget: {
	    gerund: 'forgeting',
	    past: 'forgot'
	  },
	  forgive: {
	    gerund: 'forgiving',
	    past: 'forgave'
	  },
	  freeze: {
	    gerund: 'freezing',
	    past: 'froze'
	  },
	  get: {
	    past: 'got'
	  },
	  give: {
	    gerund: 'giving',
	    past: 'gave'
	  },
	  go: {
	    past: 'went',
	    present: 'goes'
	  },
	  hang: {
	    past: 'hung'
	  },
	  have: {
	    gerund: 'having',
	    past: 'had',
	    present: 'has'
	  },
	  hear: {
	    past: 'heard'
	  },
	  hide: {
	    past: 'hid'
	  },
	  hold: {
	    past: 'held'
	  },
	  hurt: {
	    past: 'hurt'
	  },
	  lay: {
	    past: 'laid'
	  },
	  lead: {
	    past: 'led'
	  },
	  leave: {
	    past: 'left'
	  },
	  lie: {
	    gerund: 'lying',
	    past: 'lay'
	  },
	  light: {
	    past: 'lit'
	  },
	  lose: {
	    gerund: 'losing',
	    past: 'lost'
	  },
	  make: {
	    past: 'made'
	  },
	  mean: {
	    past: 'meant'
	  },
	  meet: {
	    gerund: 'meeting',
	    past: 'met',
	    actor: 'meeter'
	  },
	  pay: {
	    past: 'paid'
	  },
	  read: {
	    past: 'read'
	  },
	  ring: {
	    past: 'rang'
	  },
	  rise: {
	    past: 'rose'
	  },
	  run: {
	    gerund: 'running',
	    past: 'ran'
	  },
	  say: {
	    past: 'said'
	  },
	  see: {
	    past: 'saw'
	  },
	  sell: {
	    past: 'sold'
	  },
	  shine: {
	    past: 'shone'
	  },
	  shoot: {
	    past: 'shot'
	  },
	  show: {
	    past: 'showed'
	  },
	  sing: {
	    past: 'sang'
	  },
	  sink: {
	    past: 'sank'
	  },
	  sit: {
	    past: 'sat'
	  },
	  slide: {
	    past: 'slid'
	  },
	  speak: {
	    past: 'spoke'
	  },
	  spin: {
	    gerund: 'spinning',
	    past: 'spun'
	  },
	  spread: {
	    past: 'spread'
	  },
	  stand: {
	    past: 'stood'
	  },
	  steal: {
	    past: 'stole',
	    actor: 'stealer'
	  },
	  stick: {
	    past: 'stuck'
	  },
	  sting: {
	    past: 'stung'
	  },
	  strike: {
	    gerund: 'striking',
	    past: 'struck'
	  },
	  swear: {
	    past: 'swore'
	  },
	  swim: {
	    past: 'swam'
	  },
	  swing: {
	    past: 'swung'
	  },
	  teach: {
	    past: 'taught',
	    present: 'teaches'
	  },
	  tear: {
	    past: 'tore'
	  },
	  tell: {
	    past: 'told'
	  },
	  think: {
	    past: 'thought'
	  },
	  understand: {
	    past: 'understood'
	  },
	  wake: {
	    past: 'woke'
	  },
	  wear: {
	    past: 'wore'
	  },
	  win: {
	    gerund: 'winning',
	    past: 'won'
	  },
	  withdraw: {
	    past: 'withdrew'
	  },
	  write: {
	    gerund: 'writing',
	    past: 'wrote'
	  },
	  tie: {
	    gerund: 'tying',
	    past: 'tied'
	  },
	  ski: {
	    past: 'skiied'
	  },
	  boil: {
	    actor: 'boiler'
	  },
	  miss: {
	    present: 'miss'
	  },
	  act: {
	    actor: 'actor'
	  },
	  compete: {
	    gerund: 'competing',
	    past: 'competed',
	    actor: 'competitor'
	  },
	  being: {
	    gerund: 'are',
	    past: 'were',
	    present: 'are'
	  },
	  imply: {
	    past: 'implied',
	    present: 'implies'
	  },
	  ice: {
	    gerund: 'icing',
	    past: 'iced'
	  },
	  develop: {
	    past: 'develop',
	    actor: 'developer'
	  },
	  wait: {
	    gerund: 'waiting',
	    past: 'waited',
	    actor: 'waiter'
	  },
	  aim: {
	    actor: 'aimer'
	  },
	  spill: {
	    past: 'spilt'
	  },
	  drop: {
	    gerund: 'dropping',
	    past: 'dropped'
	  },
	  log: {
	    gerund: 'logging',
	    past: 'logged'
	  },
	  rub: {
	    gerund: 'rubbing',
	    past: 'rubbed'
	  },
	  smash: {
	    present: 'smashes'
	  },
	  suit: {
	    gerund: 'suiting',
	    past: 'suited',
	    actor: 'suiter'
	  }
	};


/***/ },
/* 134 */
/***/ function(module, exports) {

	'use strict';

	let rules = [
	  {
	    reg: /(eave)$/i,
	    repl: {
	      pr: '$1s',
	      pa: '$1d',
	      gr: 'eaving',
	      ar: '$1r'
	    }
	  },
	  {
	    reg: /(end)$/i,
	    repl: {
	      pr: '$1s',
	      pa: 'ent',
	      gr: '$1ing',
	      ar: '$1er'
	    }
	  },
	  {
	    reg: /(ide)$/i,
	    repl: {
	      pr: '$1s',
	      pa: 'ode',
	      gr: 'iding',
	      ar: 'ider'
	    }
	  },
	  {
	    reg: /(ake)$/i,
	    repl: {
	      pr: '$1s',
	      pa: 'ook',
	      gr: 'aking',
	      ar: '$1r'
	    }
	  },
	  {
	    reg: /(eed)$/i,
	    repl: {
	      pr: '$1s',
	      pa: '$1ed',
	      gr: '$1ing',
	      ar: '$1er'
	    }
	  },

	  {
	    reg: /(e)(ep)$/i,
	    repl: {
	      pr: '$1$2s',
	      pa: '$1pt',
	      gr: '$1$2ing',
	      ar: '$1$2er'
	    }
	  }, {
	    reg: /(a[tg]|i[zn]|ur|nc|gl|is)e$/i,
	    repl: {
	      pr: '$1es',
	      pa: '$1ed',
	      gr: '$1ing',
	      prt: '$1en'
	    }
	  }, {
	    reg: /([i|f|rr])y$/i,
	    repl: {
	      pr: '$1ies',
	      pa: '$1ied',
	      gr: '$1ying'
	    }
	  }, {
	    reg: /([td]er)$/i,
	    repl: {
	      pr: '$1s',
	      pa: '$1ed',
	      gr: '$1ing'
	    }
	  }, {
	    reg: /([bd]l)e$/i,
	    repl: {
	      pr: '$1es',
	      pa: '$1ed',
	      gr: '$1ing'
	    }
	  }, {
	    reg: /(ish|tch|ess)$/i,
	    repl: {
	      pr: '$1es',
	      pa: '$1ed',
	      gr: '$1ing'
	    }
	  }, {
	    reg: /(ion|end|e[nc]t)$/i,
	    repl: {
	      pr: '$1s',
	      pa: '$1ed',
	      gr: '$1ing'
	    }
	  }, {
	    reg: /(om)e$/i,
	    repl: {
	      pr: '$1es',
	      pa: 'ame',
	      gr: '$1ing'
	    }
	  }, {
	    reg: /([aeiu])([pt])$/i,
	    repl: {
	      pr: '$1$2s',
	      pa: '$1$2',
	      gr: '$1$2$2ing'
	    }
	  }, {
	    reg: /(er)$/i,
	    repl: {
	      pr: '$1s',
	      pa: '$1ed',
	      gr: '$1ing'
	    }
	  }, {
	    reg: /(en)$/i,
	    repl: {
	      pr: '$1s',
	      pa: '$1ed',
	      gr: '$1ing'
	    },
	  },
	  {
	    reg: /(..)(ow)$/i,
	    repl: {
	      pr: '$1$2s',
	      pa: '$1ew',
	      gr: '$1$2ing',
	      prt: '$1$2n'
	    }
	  }
	];

	let keys = {
	  pr: 'present',
	  pa: 'past',
	  gr: 'gerund',
	  prt: 'participle',
	  ar: 'actor',
	};

	const from_infinitive = function(str) {
	  let obj = {
	    infinitive: str
	  };
	  if (!str) {
	    return obj;
	  }
	  for(let i = 0; i < rules.length; i++) {
	    if (str.match(rules[i].reg)) {
	      Object.keys(rules[i].repl).forEach(function(k) {
	        obj[keys[k]] = str.replace(rules[i].reg, rules[i].repl[k]);
	      });
	      return obj;
	    }
	  }
	  return obj;
	};
	// console.log(from_infinitive('arise'));

	module.exports = from_infinitive;


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	//this method is used to predict which current conjugation a verb is

	//this method is the slowest in the whole library,
	const fns = __webpack_require__(125);
	const suffix_rules = __webpack_require__(136);
	const irregular_verbs = __webpack_require__(133);
	let known_verbs = Object.keys(irregular_verbs).reduce(function(h, k) {
	  Object.keys(irregular_verbs[k]).forEach(function(k2) {
	    h[irregular_verbs[k][k2]] = k2;
	  });
	  return h;
	}, {});

	const predict = function(w) {

	  //check if known infinitive
	  if (irregular_verbs[w]) {
	    return 'infinitive';
	  }
	  //check if known infinitive
	  if (known_verbs[w]) {
	    return known_verbs[w];
	  }

	  if (w.match(/will ha(ve|d) [a-z]{2}/)) {
	    return 'future_perfect';
	  }
	  if (w.match(/will [a-z]{2}/)) {
	    return 'future';
	  }
	  if (w.match(/had [a-z]{2}/)) {
	    return 'pluperfect';
	  }
	  if (w.match(/have [a-z]{2}/)) {
	    return 'perfect';
	  }
	  if (w.match(/..erer$/)) {
	    return 'actor';
	  }
	  if (w.match(/[^aeiou]ing$/)) {
	    return 'gerund';
	  }

	  const arr = Object.keys(suffix_rules);
	  for (let i = 0; i < arr.length; i++) {
	    if (fns.endsWith(w, arr[i]) && arr[i].length < w.length) {
	      return suffix_rules[arr[i]];
	    }
	  }
	  return 'infinitive';
	};

	module.exports = predict;


/***/ },
/* 136 */
/***/ function(module, exports) {

	'use strict';
	//suffix signals for verb tense, generated from test data
	const compact = {
	  'gerund': [],
	  'infinitive': [
	    'ate',
	    'ize',
	    'tion',
	    'rify',
	    'then',
	    'ress',
	    'ify',
	    'age',
	    'nce',
	    'ect',
	    'ise',
	    'ine',
	    'ish',
	    'ace',
	    'ash',
	    'ure',
	    'tch',
	    'end',
	    'ack',
	    'and',
	    'ute',
	    'ade',
	    'ock',
	    'ite',
	    'ase',
	    'ose',
	    'use',
	    'ive',
	    'int',
	    'nge',
	    'lay',
	    'est',
	    'ain',
	    'ant',
	    'eed',
	    'er',
	    'le'
	  ],
	  'participle': [
	    'own',
	    'unk',
	    'ung',
	    'en'
	  ],
	  'past': [
	    'ed',
	    'lt',
	    'nt',
	    'pt',
	    'ew',
	    'ld'
	  ],
	  'present': [
	    'rks',
	    'cks',
	    'nks',
	    'ngs',
	    'mps',
	    'tes',
	    'zes',
	    'ers',
	    'les',
	    'acks',
	    'ends',
	    'ands',
	    'ocks',
	    'lays',
	    'eads',
	    'lls',
	    'els',
	    'ils',
	    'ows',
	    'nds',
	    'ays',
	    'ams',
	    'ars',
	    'ops',
	    'ffs',
	    'als',
	    'urs',
	    'lds',
	    'ews',
	    'ips',
	    'es',
	    'ts',
	    'ns',
	    's'
	  ]
	};
	const suffix_rules = {};
	const keys = Object.keys(compact);
	const l = keys.length;

	for (let i = 0; i < l; i++) {
	  let l2 = compact[keys[i]].length;
	  for (let o = 0; o < l2; o++) {
	    suffix_rules[compact[keys[i]][o]] = keys[i];
	  }
	}
	module.exports = suffix_rules;


/***/ },
/* 137 */
/***/ function(module, exports) {

	'use strict';
	//recieves a verb object, and returns a negated string
	//sort out don't/didn't/doesn't/won't
	const negate = function(v, form) {

	  let exceptions = {
	    'is': 'isn\'t',
	    'are': 'aren\'t',
	    'was': 'wasn\'t',
	    'will': 'won\'t',
	    'had': 'hadn\'t',
	    //modals
	    'did': 'didn\'t',
	    'would': 'wouldn\'t',
	    'could': 'couldn\'t',
	    'should': 'shouldn\'t',
	    'can': 'can\'t',
	    'must': 'mustn\'t',
	    'have': 'hasn\'t',
	    'does': 'doesn\'t',
	    //un-negate?
	    'didn\'t': 'did',
	    'doesn\'t': 'does',
	    'wouldn\'t': 'would',
	    'couldn\'t': 'could',
	    'shouldn\'t': 'should',
	    'can\'t': 'can',
	    'won\'t': 'will',
	    'mustn\'t': 'must',
	    'shan\'t': 'shall',
	    'shant': 'shall',
	    'not': '',
	    'don\'t': '',
	  };
	  //hard-coded exceptions
	  if (exceptions[v.normal]) {
	    return exceptions[v.normal];
	  }

	  //multiple-word verbs, like 'have walked'
	  let words = v.normal.split(' ');
	  if (words.length > 1 && exceptions[words[0]]) {
	    return exceptions[words[0]] + ' ' + words.slice(1, words.length).join(' ');
	  }
	  form = form || v.conjugation();
	  //walked -> didn't walk
	  if (form === 'PastTense') {
	    return 'didn\'t ' + v.conjugate()['infinitive'];
	  }
	  //walks -> doesn't walk
	  if (form === 'PresentTense') {
	    return 'doesn\'t ' + v.conjugate()['infinitive'];
	  }
	  //walking -> not walking
	  if (form === 'Gerund') {
	    return 'not ' + v.text;
	  }
	  //walker -> non-walker ?
	  if (form === 'Actor') {
	    return 'non-' + v.text;
	  }
	  //walk -> not walk ?
	  if (form === 'Infinitive') {
	    return 'not ' + v.text;
	  }

	  return v.text;

	};

	module.exports = negate;


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const Term = __webpack_require__(114);
	const to_adjective = __webpack_require__(139);

	class Adverb extends Term {
	  constructor(str, tag) {
	    super(str);
	    this.tag = tag;
	    this.pos['Adverb'] = true;
	  }
	  to_adjective() {
	    return to_adjective(this.normal);
	  }
	}
	Adverb.fn = Adverb.prototype;
	// let t = new Adverb("quickly")
	// console.log(t.to_adjective())

	module.exports = Adverb;


/***/ },
/* 139 */
/***/ function(module, exports) {

	//turns 'quickly' into 'quick'
	'use strict';
	const to_adjective = function(str) {
	  const irregulars = {
	    'idly': 'idle',
	    'sporadically': 'sporadic',
	    'basically': 'basic',
	    'grammatically': 'grammatical',
	    'alphabetically': 'alphabetical',
	    'economically': 'economical',
	    'conically': 'conical',
	    'politically': 'political',
	    'vertically': 'vertical',
	    'practically': 'practical',
	    'theoretically': 'theoretical',
	    'critically': 'critical',
	    'fantastically': 'fantastic',
	    'mystically': 'mystical',
	    'pornographically': 'pornographic',
	    'fully': 'full',
	    'jolly': 'jolly',
	    'wholly': 'whole'
	  };
	  const transforms = [{
	    'reg': /bly$/i,
	    'repl': 'ble'
	  }, {
	    'reg': /gically$/i,
	    'repl': 'gical'
	  }, {
	    'reg': /([rsdh])ically$/i,
	    'repl': '$1ical'
	  }, {
	    'reg': /ically$/i,
	    'repl': 'ic'
	  }, {
	    'reg': /uly$/i,
	    'repl': 'ue'
	  }, {
	    'reg': /ily$/i,
	    'repl': 'y'
	  }, {
	    'reg': /(.{3})ly$/i,
	    'repl': '$1'
	  }];
	  if (irregulars.hasOwnProperty(str)) {
	    return irregulars[str];
	  }
	  for (let i = 0; i < transforms.length; i++) {
	    if (str.match(transforms[i].reg)) {
	      return str.replace(transforms[i].reg, transforms[i].repl);
	    }
	  }
	  return str;
	};

	// console.log(to_adjective('quickly') === 'quick')
	// console.log(to_adjective('marvelously') === 'marvelous')
	module.exports = to_adjective;


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const Term = __webpack_require__(114);

	const to_comparative = __webpack_require__(141);
	const to_superlative = __webpack_require__(143);
	const adj_to_adv = __webpack_require__(144);
	const adj_to_noun = __webpack_require__(145);

	class Adjective extends Term {
	  constructor(str, tag) {
	    super(str);
	    this.tag = tag;
	    this.pos['Adjective'] = true;
	  }

	  to_comparative() {
	    return to_comparative(this.normal);
	  }
	  to_superlative() {
	    return to_superlative(this.normal);
	  }
	  to_noun() {
	    return adj_to_noun(this.normal);
	  }
	  to_adverb() {
	    return adj_to_adv(this.normal);
	  }
	  conjugate() {
	    return {
	      comparative: to_comparative(this.normal),
	      superlative: to_superlative(this.normal),
	      adverb: adj_to_adv(this.normal),
	      noun: adj_to_noun(this.normal)
	    };
	  }

	}
	Adjective.fn = Adjective.prototype;
	// let t = new Adjective("quick")
	// console.log(t.conjugate())

	module.exports = Adjective;


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	//turn 'quick' into 'quickly'
	'use strict';
	const convertables = __webpack_require__(142);

	const to_comparative = function(str) {
	  const irregulars = {
	    'grey': 'greyer',
	    'gray': 'grayer',
	    'green': 'greener',
	    'yellow': 'yellower',
	    'red': 'redder',
	    'good': 'better',
	    'well': 'better',
	    'bad': 'worse',
	    'sad': 'sadder'
	  };

	  const dont = {
	    'overweight': 1,
	    'main': 1,
	    'nearby': 1,
	    'asleep': 1,
	    'weekly': 1,
	    'secret': 1,
	    'certain': 1
	  };

	  const transforms = [{
	    reg: /y$/i,
	    repl: 'ier'
	  }, {
	    reg: /([aeiou])t$/i,
	    repl: '$1tter'
	  }, {
	    reg: /([aeou])de$/i,
	    repl: '$1der'
	  }, {
	    reg: /nge$/i,
	    repl: 'nger'
	  }];

	  const matches = [
	    /ght$/,
	    /nge$/,
	    /ough$/,
	    /ain$/,
	    /uel$/,
	    /[au]ll$/,
	    /ow$/,
	    /old$/,
	    /oud$/,
	    /e[ae]p$/
	  ];

	  const not_matches = [
	    /ary$/,
	    /ous$/
	  ];

	  if (dont.hasOwnProperty(str)) {
	    return null;
	  }

	  for (let i = 0; i < transforms.length; i++) {
	    if (str.match(transforms[i].reg)) {
	      return str.replace(transforms[i].reg, transforms[i].repl);
	    }
	  }

	  if (convertables.hasOwnProperty(str)) {
	    if (str.match(/e$/)) {
	      return str + 'r';
	    }
	    return str + 'er';
	  }

	  if (irregulars.hasOwnProperty(str)) {
	    return irregulars[str];
	  }

	  for (let i = 0; i < not_matches.length; i++) {
	    if (str.match(not_matches[i])) {
	      return 'more ' + str;
	    }
	  }

	  for (let i = 0; i < matches.length; i++) {
	    if (str.match(matches[i])) {
	      return str + 'er';
	    }
	  }
	  return 'more ' + str;
	};

	// console.log(to_comparative("great"))

	module.exports = to_comparative;


/***/ },
/* 142 */
/***/ function(module, exports) {

	//these are adjectives that can become comparative + superlative with out "most/more"
	//its a whitelist for conjugation
	//this data is shared between comparative/superlative methods
	module.exports = [
	  'absurd',
	  'aggressive',
	  'alert',
	  'alive',
	  'awesome',
	  'beautiful',
	  'big',
	  'bitter',
	  'black',
	  'blue',
	  'bored',
	  'boring',
	  'brash',
	  'brave',
	  'brief',
	  'bright',
	  'broad',
	  'brown',
	  'calm',
	  'charming',
	  'cheap',
	  'clean',
	  'cold',
	  'cool',
	  'cruel',
	  'cute',
	  'damp',
	  'deep',
	  'dear',
	  'dead',
	  'dark',
	  'dirty',
	  'drunk',
	  'dull',
	  'eager',
	  'efficient',
	  'even',
	  'faint',
	  'fair',
	  'fanc',
	  'fast',
	  'fat',
	  'feeble',
	  'few',
	  'fierce',
	  'fine',
	  'flat',
	  'forgetful',
	  'frail',
	  'full',
	  'gentle',
	  'glib',
	  'great',
	  'green',
	  'gruesome',
	  'handsome',
	  'hard',
	  'harsh',
	  'high',
	  'hollow',
	  'hot',
	  'impolite',
	  'innocent',
	  'keen',
	  'kind',
	  'lame',
	  'lean',
	  'light',
	  'little',
	  'loose',
	  'long',
	  'loud',
	  'low',
	  'lush',
	  'macho',
	  'mean',
	  'meek',
	  'mellow',
	  'mundane',
	  'near',
	  'neat',
	  'new',
	  'nice',
	  'normal',
	  'odd',
	  'old',
	  'pale',
	  'pink',
	  'plain',
	  'poor',
	  'proud',
	  'purple',
	  'quick',
	  'rare',
	  'rapid',
	  'red',
	  'rich',
	  'ripe',
	  'rotten',
	  'round',
	  'rude',
	  'sad',
	  'safe',
	  'scarce',
	  'scared',
	  'shallow',
	  'sharp',
	  'short',
	  'shrill',
	  'simple',
	  'slim',
	  'slow',
	  'small',
	  'smart',
	  'smooth',
	  'soft',
	  'sore',
	  'sour',
	  'square',
	  'stale',
	  'steep',
	  'stiff',
	  'straight',
	  'strange',
	  'strong',
	  'sweet',
	  'swift',
	  'tall',
	  'tame',
	  'tart',
	  'tender',
	  'tense',
	  'thick',
	  'thin',
	  'tight',
	  'tough',
	  'vague',
	  'vast',
	  'vulgar',
	  'warm',
	  'weak',
	  'wet',
	  'white',
	  'wide',
	  'wild',
	  'wise',
	  'young',
	  'yellow',
	  'easy',
	  'narrow',
	  'late',
	  'early',
	  'soon',
	  'close',
	  'empty',
	  'dry',
	  'windy',
	  'noisy',
	  'thirsty',
	  'hungry',
	  'fresh',
	  'quiet',
	  'clear',
	  'heavy',
	  'happy',
	  'funny',
	  'lucky',
	  'pretty',
	  'important',
	  'interesting',
	  'attractive',
	  'dangerous',
	  'intellegent',
	  'pure',
	  'orange',
	  'large',
	  'firm',
	  'grand',
	  'formal',
	  'raw',
	  'weird',
	  'glad',
	  'mad',
	  'strict',
	  'tired',
	  'solid',
	  'extreme',
	  'mature',
	  'true',
	  'free',
	  'curly',
	  'angry'
	].reduce(function(h, s) {
	  h[s] = 'Adjective';
	  return h;
	}, {});


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	//turn 'quick' into 'quickest'
	'use strict';
	const convertables = __webpack_require__(142);

	const to_superlative = function(str) {
	  const irregulars = {
	    'nice': 'nicest',
	    'late': 'latest',
	    'hard': 'hardest',
	    'inner': 'innermost',
	    'outer': 'outermost',
	    'far': 'furthest',
	    'worse': 'worst',
	    'bad': 'worst',
	    'good': 'best'
	  };

	  const dont = {
	    'overweight': 1,
	    'ready': 1
	  };

	  const transforms = [{
	    'reg': /y$/i,
	    'repl': 'iest'
	  }, {
	    'reg': /([aeiou])t$/i,
	    'repl': '$1ttest'
	  }, {
	    'reg': /([aeou])de$/i,
	    'repl': '$1dest'
	  }, {
	    'reg': /nge$/i,
	    'repl': 'ngest'
	  }];

	  const matches = [
	    /ght$/,
	    /nge$/,
	    /ough$/,
	    /ain$/,
	    /uel$/,
	    /[au]ll$/,
	    /ow$/,
	    /oud$/,
	    /...p$/
	  ];

	  const not_matches = [
	    /ary$/
	  ];

	  const generic_transformation = function(s) {
	    if (s.match(/e$/)) {
	      return s + 'st';
	    }
	    return s + 'est';
	  };

	  for (let i = 0; i < transforms.length; i++) {
	    if (str.match(transforms[i].reg)) {
	      return str.replace(transforms[i].reg, transforms[i].repl);
	    }
	  }

	  if (convertables.hasOwnProperty(str)) {
	    return generic_transformation(str);
	  }

	  if (dont.hasOwnProperty(str)) {
	    return 'most ' + str;
	  }

	  if (irregulars.hasOwnProperty(str)) {
	    return irregulars[str];
	  }
	  for (let i = 0; i < not_matches.length; i++) {
	    if (str.match(not_matches[i])) {
	      return 'most ' + str;
	    }
	  }

	  for (let i = 0; i < matches.length; i++) {
	    if (str.match(matches[i])) {
	      return generic_transformation(str);
	    }
	  }
	  return 'most ' + str;
	};

	// console.log(to_superlative("great"))

	module.exports = to_superlative;


/***/ },
/* 144 */
/***/ function(module, exports) {

	//turn 'quick' into 'quickly'
	'use strict';
	const adj_to_adv = function(str) {
	  const irregulars = {
	    'idle': 'idly',
	    'public': 'publicly',
	    'vague': 'vaguely',
	    'day': 'daily',
	    'icy': 'icily',
	    'single': 'singly',
	    'female': 'womanly',
	    'male': 'manly',
	    'simple': 'simply',
	    'whole': 'wholly',
	    'special': 'especially',
	    'straight': 'straight',
	    'wrong': 'wrong',
	    'fast': 'fast',
	    'hard': 'hard',
	    'late': 'late',
	    'early': 'early',
	    'well': 'well',
	    'best': 'best',
	    'latter': 'latter',
	    'bad': 'badly'
	  };

	  const dont = {
	    'foreign': 1,
	    'black': 1,
	    'modern': 1,
	    'next': 1,
	    'difficult': 1,
	    'degenerate': 1,
	    'young': 1,
	    'awake': 1,
	    'back': 1,
	    'blue': 1,
	    'brown': 1,
	    'orange': 1,
	    'complex': 1,
	    'cool': 1,
	    'dirty': 1,
	    'done': 1,
	    'empty': 1,
	    'fat': 1,
	    'fertile': 1,
	    'frozen': 1,
	    'gold': 1,
	    'grey': 1,
	    'gray': 1,
	    'green': 1,
	    'medium': 1,
	    'parallel': 1,
	    'outdoor': 1,
	    'unknown': 1,
	    'undersized': 1,
	    'used': 1,
	    'welcome': 1,
	    'yellow': 1,
	    'white': 1,
	    'fixed': 1,
	    'mixed': 1,
	    'super': 1,
	    'guilty': 1,
	    'tiny': 1,
	    'able': 1,
	    'unable': 1,
	    'same': 1,
	    'adult': 1
	  };

	  const transforms = [{
	    reg: /al$/i,
	    repl: 'ally'
	  }, {
	    reg: /ly$/i,
	    repl: 'ly'
	  }, {
	    reg: /(.{3})y$/i,
	    repl: '$1ily'
	  }, {
	    reg: /que$/i,
	    repl: 'quely'
	  }, {
	    reg: /ue$/i,
	    repl: 'uly'
	  }, {
	    reg: /ic$/i,
	    repl: 'ically'
	  }, {
	    reg: /ble$/i,
	    repl: 'bly'
	  }, {
	    reg: /l$/i,
	    repl: 'ly'
	  }];

	  const not_matches = [
	    /airs$/,
	    /ll$/,
	    /ee.$/,
	    /ile$/
	  ];

	  if (dont[str]) {
	    return null;
	  }
	  if (irregulars[str]) {
	    return irregulars[str];
	  }
	  if (str.length <= 3) {
	    return null;
	  }
	  for (let i = 0; i < not_matches.length; i++) {
	    if (str.match(not_matches[i])) {
	      return null;
	    }
	  }
	  for (let i = 0; i < transforms.length; i++) {
	    if (str.match(transforms[i].reg)) {
	      return str.replace(transforms[i].reg, transforms[i].repl);
	    }
	  }
	  return str + 'ly';
	};
	// console.log(adj_to_adv('direct'))

	module.exports = adj_to_adv;


/***/ },
/* 145 */
/***/ function(module, exports) {

	//convert cute to cuteness
	'use strict';
	const to_noun = function(w) {
	  const irregulars = {
	    'clean': 'cleanliness',
	    'naivety': 'naivety'
	  };
	  if (!w) {
	    return '';
	  }
	  if (irregulars.hasOwnProperty(w)) {
	    return irregulars[w];
	  }
	  if (w.match(' ')) {
	    return w;
	  }
	  if (w.match(/w$/)) {
	    return w;
	  }
	  const transforms = [{
	    'reg': /y$/,
	    'repl': 'iness'
	  }, {
	    'reg': /le$/,
	    'repl': 'ility'
	  }, {
	    'reg': /ial$/,
	    'repl': 'y'
	  }, {
	    'reg': /al$/,
	    'repl': 'ality'
	  }, {
	    'reg': /ting$/,
	    'repl': 'ting'
	  }, {
	    'reg': /ring$/,
	    'repl': 'ring'
	  }, {
	    'reg': /bing$/,
	    'repl': 'bingness'
	  }, {
	    'reg': /sing$/,
	    'repl': 'se'
	  }, {
	    'reg': /ing$/,
	    'repl': 'ment'
	  }, {
	    'reg': /ess$/,
	    'repl': 'essness'
	  }, {
	    'reg': /ous$/,
	    'repl': 'ousness'
	  }];

	  for (let i = 0; i < transforms.length; i++) {
	    if (w.match(transforms[i].reg)) {
	      return w.replace(transforms[i].reg, transforms[i].repl);
	    }
	  }

	  if (w.match(/s$/)) {
	    return w;
	  }
	  return w + 'ness';
	};

	// console.log(to_noun("great"))

	module.exports = to_noun;


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const Term = __webpack_require__(114);
	const article = __webpack_require__(147);
	const is_plural = __webpack_require__(148);
	const is_place = __webpack_require__(150);
	const is_person = __webpack_require__(152);
	const pronoun = __webpack_require__(154);
	const is_value = __webpack_require__(157);
	const is_date = __webpack_require__(159);
	const is_organisation = __webpack_require__(161);
	const singularize = __webpack_require__(163);
	const pluralize = __webpack_require__(166);
	const is_uncountable = __webpack_require__(164);

	class Noun extends Term {
	  constructor(str, tag) {
	    super(str);
	    this.tag = tag;
	    this.pos['Noun'] = true;
	    if (tag) {
	      this.pos[tag] = true;
	    }
	  }
	  //noun methods
	  article() {
	    return article(this.text);
	  }
	  pronoun() {
	    if (this.is_organisation() || this.is_place() || this.is_value()) {
	      return 'it';
	    }
	    return pronoun(this.normal);
	  }
	  is_plural() {
	    return is_plural(this.normal);
	  }
	  is_uncountable() {
	    return is_uncountable(this.normal);
	  }
	  pluralize() {
	    return pluralize(this.normal);
	  }
	  singularize() {
	    return singularize(this.normal);
	  }
	  //sub-classes
	  is_person() {
	    return is_person(this.normal);
	  }
	  is_organisation() {
	    return is_organisation(this.normal, this.text);
	  }
	  is_date() {
	    return is_date(this.normal);
	  }
	  is_value() {
	    return is_value(this.normal);
	  }
	  is_place() {
	    return is_place(this.normal);
	  }

	}

	Noun.fn = Noun.prototype;

	module.exports = Noun;

	// let t = new Noun('NDA');
	// console.log(t.article());


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	const is_acronym = __webpack_require__(116);

	//chooses an indefinite aricle 'a/an' for a word
	const irregulars = {
	  'hour': 'an',
	  'heir': 'an',
	  'heirloom': 'an',
	  'honest': 'an',
	  'honour': 'an',
	  'honor': 'an',
	  'uber': 'an' //german u
	};

	const indefinite_article = function(str) {
	  if (!str) {
	    return null;
	  }
	  //pronounced letters of acronyms that get a 'an'
	  const an_acronyms = {
	    A: true,
	    E: true,
	    F: true,
	    H: true,
	    I: true,
	    L: true,
	    M: true,
	    N: true,
	    O: true,
	    R: true,
	    S: true,
	    X: true
	  };
	  //'a' regexes
	  const a_regexs = [
	    /^onc?e/i, //'wu' sound of 'o'
	    /^u[bcfhjkqrstn][aeiou]/i, // 'yu' sound for hard 'u'
	    /^eul/i
	  ];

	  //begin business time
	  ////////////////////
	  //explicit irregular forms
	  if (irregulars.hasOwnProperty(str)) {
	    return irregulars[str];
	  }
	  //spelled-out acronyms
	  if (is_acronym(str) && an_acronyms.hasOwnProperty(str.substr(0, 1))) {
	    return 'an';
	  }
	  //'a' regexes
	  for (let i = 0; i < a_regexs.length; i++) {
	    if (str.match(a_regexs[i])) {
	      return 'a';
	    }
	  }
	  //basic vowel-startings
	  if (str.match(/^[aeiou]/i)) {
	    return 'an';
	  }
	  return 'a';
	};

	module.exports = indefinite_article;

	// console.log(indefinite_article('N.D.A'));


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const irregulars = __webpack_require__(149);

	//similar to plural/singularize rules, but not the same
	const plural_indicators = [
	  /(^v)ies$/i,
	  /ises$/i,
	  /ives$/i,
	  /(antenn|formul|nebul|vertebr|vit)ae$/i,
	  /(octop|vir|radi|nucle|fung|cact|stimul)i$/i,
	  /(buffal|tomat|tornad)oes$/i,
	  /(analy|ba|diagno|parenthe|progno|synop|the)ses$/i,
	  /(vert|ind|cort)ices$/i,
	  /(matr|append)ices$/i,
	  /(x|ch|ss|sh|s|z|o)es$/i,
	  /men$/i,
	  /news$/i,
	  /.tia$/i,
	  /(^f)ves$/i,
	  /(lr)ves$/i,
	  /(^aeiouy|qu)ies$/i,
	  /(m|l)ice$/i,
	  /(cris|ax|test)es$/i,
	  /(alias|status)es$/i,
	  /ics$/i
	];

	//similar to plural/singularize rules, but not the same
	const singular_indicators = [
	  /(ax|test)is$/i,
	  /(octop|vir|radi|nucle|fung|cact|stimul)us$/i,
	  /(octop|vir)i$/i,
	  /(rl)f$/i,
	  /(alias|status)$/i,
	  /(bu)s$/i,
	  /(al|ad|at|er|et|ed|ad)o$/i,
	  /(ti)um$/i,
	  /(ti)a$/i,
	  /sis$/i,
	  /(?:(^f)fe|(lr)f)$/i,
	  /hive$/i,
	  /(^aeiouy|qu)y$/i,
	  /(x|ch|ss|sh|z)$/i,
	  /(matr|vert|ind|cort)(ix|ex)$/i,
	  /(m|l)ouse$/i,
	  /(m|l)ice$/i,
	  /(antenn|formul|nebul|vertebr|vit)a$/i,
	  /.sis$/i,
	  /^(?!talis|.*hu)(.*)man$/i
	];

	const is_plural = function(str) {
	  str = (str || '').toLowerCase();
	  //handle 'mayors of chicago'
	  const preposition = str.match(/([a-z]*) (of|in|by|for) [a-z]/);
	  if (preposition && preposition[1]) {
	    str = preposition[1];
	  }
	  // if it's a known irregular case
	  for (let i = 0; i < irregulars.length; i++) {
	    if (irregulars[i][1] === str) {
	      return true;
	    }
	    if (irregulars[i][0] === str) {
	      return false;
	    }
	  }
	  for (let i = 0; i < plural_indicators.length; i++) {
	    if (str.match(plural_indicators[i])) {
	      return true;
	    }
	  }
	  for (let i = 0; i < singular_indicators.length; i++) {
	    if (str.match(singular_indicators[i])) {
	      return false;
	    }
	  }
	  // some 'looks pretty plural' rules
	  if (str.match(/s$/) && !str.match(/ss$/) && str.length > 3) { //needs some lovin'
	    return true;
	  }
	  return false;
	};

	// console.log(is_plural('octopus') === false)
	// console.log(is_plural('octopi') === true)
	// console.log(is_plural('eyebrow') === false)
	// console.log(is_plural('eyebrows') === true)
	// console.log(is_plural('child') === false)
	// console.log(is_plural('children') === true)

	module.exports = is_plural;


/***/ },
/* 149 */
/***/ function(module, exports) {

	//nouns with irregular plural/singular forms
	//used in noun.inflect, and also in the lexicon.
	//compressed with '_' to reduce some redundancy.
	'use strict';
	let main = [
	  ['child', '_ren'],
	  ['person', 'people'],
	  ['leaf', 'leaves'],
	  ['database', '_s'],
	  ['quiz', '_zes'],
	  ['child', '_ren'],
	  ['stomach', '_s'],
	  ['sex', '_es'],
	  ['move', '_s'],
	  ['shoe', '_s'],
	  ['goose', 'geese'],
	  ['phenomenon', 'phenomena'],
	  ['barracks', '_'],
	  ['deer', '_'],
	  ['syllabus', 'syllabi'],
	  ['index', 'indices'],
	  ['appendix', 'appendices'],
	  ['criterion', 'criteria'],
	  ['man', 'men'],
	  ['sex', '_es'],
	  ['rodeo', '_s'],
	  ['epoch', '_s'],
	  ['zero', '_s'],
	  ['avocado', '_s'],
	  ['halo', '_s'],
	  ['tornado', '_s'],
	  ['tuxedo', '_s'],
	  ['sombrero', '_s'],
	  ['addendum', 'addenda'],
	  ['alga', '_e'],
	  ['alumna', '_e'],
	  ['alumnus', 'alumni'],
	  ['bacillus', 'bacilli'],
	  ['cactus', 'cacti'],
	  ['beau', '_x'],
	  ['château', '_x'],
	  ['chateau', '_x'],
	  ['tableau', '_x'],
	  ['corpus', 'corpora'],
	  ['curriculum', 'curricula'],
	  ['echo', '_es'],
	  ['embargo', '_es'],
	  ['foot', 'feet'],
	  ['genus', 'genera'],
	  ['hippopotamus', 'hippopotami'],
	  ['larva', '_e'],
	  ['libretto', 'libretti'],
	  ['loaf', 'loaves'],
	  ['matrix', 'matrices'],
	  ['memorandum', 'memoranda'],
	  ['mosquito', '_es'],
	  ['opus', 'opera'],
	  ['ovum', 'ova'],
	  ['ox', '_en'],
	  ['radius', 'radii'],
	  ['referendum', 'referenda'],
	  ['thief', 'thieves'],
	  ['tooth', 'teeth']
	];

	main = main.map(function(a) {
	  a[1] = a[1].replace('_', a[0]);
	  return a;
	});

	module.exports = main;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	const places = __webpack_require__(151);
	const abbreviations = __webpack_require__(122);

	//add Country names
	let isPlace = places.countries.reduce(function(h, s) {
	  h[s] = true;
	  return h;
	}, {});
	//add City names
	places.cities.forEach(function(s) {
	  isPlace[s] = true;
	});
	//add place abbreviations names
	abbreviations.places.forEach(function(s) {
	  isPlace[s] = true;
	});

	//these are signals too
	let placeSignals = [
	  'west',
	  'east',
	  'nort',
	  'south',
	  'western',
	  'eastern',
	  'nortern',
	  'southern',
	  'city',
	  'town',
	  'county',
	  'state',
	  'province',
	].reduce(function(h, s) {
	  h[s] = true;
	  return h;
	}, {});

	const is_place = function(str) {
	  let words = str.split();
	  for(let i = 0; i < words.length; i++) {
	    if (isPlace[words[i]]) {
	      return true;
	    }
	    if (placeSignals[words[i]] && !placeSignals[str]) {
	      return true;
	    }
	  }

	  return false;
	};

	module.exports = is_place;


/***/ },
/* 151 */
/***/ function(module, exports) {

	'use strict';

	let countries = [
	  'china',
	  'india',
	  'america',
	  'united states',
	  'usa',
	  'u.s.a.',
	  'ussr',
	  'united states of america',
	  'indonesia',
	  'brazil',
	  'pakistan',
	  'nigeria',
	  'bangladesh',
	  'russia',
	  'japan',
	  'mexico',
	  'philippines',
	  'vietnam',
	  'ethiopia',
	  'egypt',
	  'germany',
	  'iran',
	  'turkey',
	  'dr congo',
	  'thailand',
	  'france',
	  'united kingdom',
	  'italy',
	  'myanmar',
	  'south africa',
	  'south korea',
	  'colombia',
	  'spain',
	  'ukraine',
	  'tanzania',
	  'kenya',
	  'argentina',
	  'algeria',
	  'poland',
	  'sudan',
	  'uganda',
	  'canada',
	  'iraq',
	  'morocco',
	  'peru',
	  'uzbekistan',
	  'saudi arabia',
	  'malaysia',
	  'venezuela',
	  'nepal',
	  'afghanistan',
	  'yemen',
	  'north korea',
	  'ghana',
	  'mozambique',
	  'taiwan',
	  'australia',
	  'syria',
	  'madagascar',
	  'angola',
	  'cameroon',
	  'sri lanka',
	  'romania',
	  'burkina faso',
	  'niger',
	  'kazakhstan',
	  'netherlands',
	  'chile',
	  'malawi',
	  'ecuador',
	  'guatemala',
	  'côte d\'ivoire',
	  'mali',
	  'cambodia',
	  'senegal',
	  'zambia',
	  'zimbabwe',
	  'chad',
	  'south sudan',
	  'belgium',
	  'cuba',
	  'tunisia',
	  'guinea',
	  'greece',
	  'rwanda',
	  'czech republic',
	  'somalia',
	  'portugal',
	  'haiti',
	  'benin',
	  'burundi',
	  'bolivia',
	  'hungary',
	  'sweden',
	  'belarus',
	  'dominican republic',
	  'azerbaijan',
	  'honduras',
	  'austria',
	  'united arab emirates',
	  'israel',
	  'switzerland',
	  'tajikistan',
	  'bulgaria',
	  'serbia',
	  'papua new guinea',
	  'paraguay',
	  'laos',
	  'jordan',
	  'el salvador',
	  'eritrea',
	  'libya',
	  'togo',
	  'sierra leone',
	  'nicaragua',
	  'kyrgyzstan',
	  'denmark',
	  'finland',
	  'slovakia',
	  'turkmenistan',
	  'norway',
	  'lebanon',
	  'costa rica',
	  'central african republic',
	  'republic of ireland',
	  'new zealand',
	  'georgia',
	  'congo-brazzaville',
	  'palestine',
	  'liberia',
	  'croatia',
	  'oman',
	  'bosnia and herzegovina',
	  'kuwait',
	  'moldova',
	  'mauritania',
	  'panama',
	  'uruguay',
	  'armenia',
	  'lithuania',
	  'albania',
	  'mongolia',
	  'jamaica',
	  'namibia',
	  'lesotho',
	  'qatar',
	  'macedonia',
	  'slovenia',
	  'botswana',
	  'latvia',
	  'gambia',
	  'guinea-bissau',
	  'gabon',
	  'equatorial guinea',
	  'trinidad-tobago',
	  'estonia',
	  'mauritius',
	  'swaziland',
	  'bahrain',
	  'timor-leste',
	  'djibouti',
	  'cyprus',
	  'fiji',
	  'guyana',
	  'comoros',
	  'bhutan',
	  'solomon islands',
	  'luxembourg',
	  'suriname',
	  'cape verde',
	  'malta',
	  'bahamas',
	  'iceland'
	];

	let cities = [
	  'shanghai',
	  'beijing',
	  'guangzhou',
	  'tianjin',
	  'shenzhen',
	  'mumbai',
	  'new delhi',
	  'chennai',
	  'bangalore',
	  'ahmedabad',
	  'new york',
	  'los angeles',
	  'chicago',
	  'houston',
	  'philadelphia',
	  'phoenix',
	  'jakarta',
	  'rio de janeiro',
	  'salvador',
	  'brasília',
	  'curitiba',
	  'karachi',
	  'dhaka',
	  'chittagong',
	  'moscow',
	  'saint petersburg',
	  'yekaterinburg',
	  'tokyo',
	  'yokohama',
	  'osaka',
	  'nagoya',
	  'sapporo',
	  'kobe',
	  'mexico',
	  'guadalajara',
	  'puebla',
	  'manila',
	  'cebu',
	  'ho chi minh',
	  'hanoi',
	  'cairo',
	  'alexandria',
	  'giza',
	  'berlin',
	  'hamburg',
	  'munich',
	  'cologne',
	  'frankfurt',
	  'stuttgart',
	  'tehran',
	  'karaj',
	  'istanbul',
	  'ankara',
	  'i̇zmir',
	  'bursa',
	  'bangkok',
	  'chiang mai',
	  'paris',
	  'marseille',
	  'lyon',
	  'toulouse',
	  'nice',
	  'nantes',
	  'london',
	  'birmingham',
	  'manchester',
	  'liverpool',
	  'rome',
	  'milan',
	  'naples',
	  'turin',
	  'palermo',
	  'genoa',
	  'yangon',
	  'mandalay',
	  'cape town',
	  'port elizabeth',
	  'pretoria',
	  'durban',
	  'seoul',
	  'busan',
	  'incheon',
	  'daegu',
	  'daejeon',
	  'bogotá',
	  'medellín',
	  'barranquilla',
	  'madrid',
	  'barcelona',
	  'valencia',
	  'seville',
	  'zaragoza',
	  'kiev',
	  'kharkiv',
	  'odessa',
	  'dnipropetrovsk',
	  'lviv',
	  'buenos aires',
	  'rosario',
	  'la plata',
	  'warsaw',
	  'kraków',
	  'łódź',
	  'wrocław',
	  'poznań',
	  'gdańsk',
	  'kampala',
	  'toronto',
	  'vancouver',
	  'calgary',
	  'ottawa',
	  'edmonton',
	  'fes',
	  'tangier',
	  'lima',
	  'kuala lumpur',
	  'caracas',
	  'kabul',
	  'sana\'a',
	  'pyongyang',
	  'new taipei',
	  'kaohsiung',
	  'taichung',
	  'taipei',
	  'tainan',
	  'sydney',
	  'melbourne',
	  'brisbane',
	  'perth',
	  'damascus',
	  'homs',
	  'colombo',
	  'kandy',
	  'bucharest',
	  'timișoara',
	  'iași',
	  'cluj-napoca',
	  'constanța',
	  'craiova',
	  'hauts-bassins region',
	  'nord region',
	  'almaty',
	  'amsterdam',
	  'the hague',
	  'rotterdam',
	  'utrecht',
	  'eindhoven',
	  'tilburg',
	  'santiago',
	  'quito',
	  'guatemala',
	  'abidjan',
	  'phnom penh',
	  'dakar',
	  'antwerp',
	  'ghent',
	  'charleroi',
	  'liège',
	  'brussels',
	  'havana',
	  'tunis',
	  'athens',
	  'thessaloniki',
	  'piraeus',
	  'patras',
	  'heraklion',
	  'prague',
	  'brno',
	  'pilsen',
	  'lisbon',
	  'porto',
	  'budapest',
	  'miskolc',
	  'stockholm',
	  'gothenburg',
	  'malmö',
	  'västerås',
	  'minsk',
	  'baku',
	  'tegucigalpa',
	  'vienna',
	  'graz',
	  'linz',
	  'salzburg',
	  'innsbruck',
	  'abu dhabi',
	  'tel aviv',
	  'haifa',
	  'ashdod',
	  'petah tikva',
	  'zürich',
	  'geneva',
	  'basel',
	  'lausanne',
	  'bern',
	  'winterthur',
	  'dushanbe',
	  'sofia',
	  'varna',
	  'burgas',
	  'belgrade',
	  'niš',
	  'amman',
	  'aqaba',
	  'san salvador',
	  'copenhagen',
	  'aarhus',
	  'aalborg',
	  'helsinki',
	  'espoo',
	  'tampere',
	  'vantaa',
	  'turku',
	  'bratislava',
	  'košice',
	  'ashgabat',
	  'oslo',
	  'bergen',
	  'trondheim',
	  'beirut',
	  'san josé',
	  'dublin',
	  'cork',
	  'auckland',
	  'christchurch',
	  'wellington',
	  'hamilton',
	  'dunedin',
	  'tbilisi',
	  'zagreb',
	  'split',
	  'banja luka',
	  'kuwait',
	  'chișinău',
	  'panama',
	  'montevideo',
	  'yerevan',
	  'vilnius',
	  'kaunas',
	  'klaipėda',
	  'tirana',
	  'ulan bator',
	  'doha',
	  'skopje',
	  'ljubljana',
	  'maribor',
	  'riga',
	  'daugavpils',
	  'tallinn',
	  'tartu',
	  'nicosia',
	  'limassol',
	  'luxembourg',
	  'reykjavik',
	  'kópavogur'
	];

	module.exports = {
	  countries: countries,
	  cities: cities,
	};


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const firstnames = __webpack_require__(153);
	let honourifics = __webpack_require__(123).reduce(function(h, s) {
	  h[s] = true;
	  return h;
	}, {});

	let whitelist = {
	  'he': true,
	  'she': true,
	  'i': true,
	  'you': true,
	};

	const is_person = function(str) {
	  if (whitelist[str] || firstnames[str]) {
	    return true;
	  }
	  let words = str.split(' ');
	  if (words.length > 1) {
	    let first = words[0];
	    if (honourifics[first] || firstnames[first]) {
	      return true;
	    }
	  }
	  return false;
	};

	module.exports = is_person;

	// console.log(is_person('Illi Danza'));


/***/ },
/* 153 */
/***/ function(module, exports) {

	// common first-names in compressed form.
	//from http://www.ssa.gov/oact/babynames/limits.html  and http://www.servicealberta.gov.ab.ca/pdf/vs/2001_Boys.pdf
	//not sure what regional/cultural/demographic bias this has. Probably a lot.
	// 73% of people are represented in the top 1000 names
	//used to reduce redundant named-entities in longer text. (don't spot the same person twice.)
	//used to identify gender for coreference resolution
	'use strict';
	const main = [];

	//an ad-hoc prefix encoding for names. 2ms decompression of names
	const male_names = {
	  'will': 'iam,ie,ard,is,iams',
	  'fred': ',erick,die,rick,dy',
	  'marc': 'us,,o,os,el',
	  'darr': 'ell,yl,en,el,in',
	  'fran': 'k,cis,cisco,klin,kie',
	  'terr': 'y,ance,ence,ell',
	  'rand': 'y,all,olph,al',
	  'brad': 'ley,,ford,y',
	  'jeff': 'rey,,ery,ry',
	  'john': ',ny,nie,athan',
	  'greg': 'ory,,g,orio',
	  'mar': 'k,tin,vin,io,shall,ty,lon,lin',
	  'car': 'l,los,lton,roll,y,ey',
	  'ken': 'neth,,t,ny,dall,drick',
	  'har': 'old,ry,vey,ley,lan,rison',
	  'ste': 'ven,phen,ve,wart,phan,rling',
	  'jer': 'ry,emy,ome,emiah,maine,ald',
	  'mic': 'hael,heal,ah,key,hel',
	  'dar': 'yl,in,nell,win,ius',
	  'dan': 'iel,ny,,e',
	  'wil': 'bur,son,bert,fred,fredo',
	  'ric': 'hard,ky,ardo,k,key',
	  'cli': 'fford,nton,fton,nt,ff',
	  'cla': 'rence,ude,yton,rk,y',
	  'ben': 'jamin,,nie,ny,ito',
	  'rod': 'ney,erick,olfo,ger,',
	  'rob': 'ert,erto,bie,',
	  'gar': 'y,ry,rett,land',
	  'sam': 'uel,,my,mie',
	  'and': 'rew,re,y,res',
	  'jos': 'eph,e,hua,h',
	  'joe': ',l,y,sph',
	  'leo': 'nard,n,,nardo',
	  'tom': ',my,as,mie',
	  'bry': 'an,ant,ce,on',
	  'ant': 'hony,onio,oine,on',
	  'jac': 'k,ob,kson',
	  'cha': 'rles,d,rlie,se',
	  'sha': 'wn,ne,un',
	  'bre': 'nt,tt,ndan,t',
	  'jes': 'se,us,s',
	  'al': 'bert,an,len,fred,exander,ex,vin,lan,fredo,berto,ejandro,fonso,ton,,onzo,i,varo',
	  'ro': 'nald,ger,y,nnie,land,n,ss,osevelt,gelio,lando,man,cky,yce,scoe,ry',
	  'de': 'nnis,rek,an,rrick,lbert,vin,wey,xter,wayne,metrius,nis,smond',
	  'ja': 'mes,son,y,red,vier,ke,sper,mal,rrod',
	  'el': 'mer,lis,bert,ias,ijah,don,i,ton,liot,liott,vin,wood',
	  'ma': 'tthew,nuel,urice,thew,x,tt,lcolm,ck,son',
	  'do': 'nald,uglas,n,nnie,ug,minic,yle,mingo,minick',
	  'er': 'ic,nest,ik,nesto,ick,vin,nie,win',
	  'ra': 'ymond,lph,y,mon,fael,ul,miro,phael',
	  'ed': 'ward,win,die,gar,uardo,,mund,mond',
	  'co': 'rey,ry,dy,lin,nrad,rnelius',
	  'le': 'roy,wis,ster,land,vi',
	  'lo': 'uis,nnie,renzo,ren,well,uie,u,gan',
	  'da': 'vid,le,ve,mon,llas,mian,mien',
	  'jo': 'nathan,n,rge,rdan,nathon,aquin',
	  'ru': 'ssell,ben,dolph,dy,fus,ssel,sty',
	  'ke': 'vin,ith,lvin,rmit',
	  'ar': 'thur,nold,mando,turo,chie,mand',
	  're': 'ginald,x,ynaldo,uben,ggie',
	  'ge': 'orge,rald,ne,rard,offrey,rardo',
	  'la': 'rry,wrence,nce,urence,mar,mont',
	  'mo': 'rris,ses,nte,ises,nty',
	  'ju': 'an,stin,lio,lian,lius,nior',
	  'pe': 'ter,dro,rry,te,rcy',
	  'tr': 'avis,oy,evor,ent',
	  'he': 'nry,rbert,rman,ctor,ath',
	  'no': 'rman,el,ah,lan,rbert',
	  'em': 'anuel,il,ilio,mett,manuel',
	  'wa': 'lter,yne,rren,llace,de',
	  'mi': 'ke,guel,lton,tchell,les',
	  'sa': 'lvador,lvatore,ntiago,ul,ntos',
	  'ch': 'ristopher,ris,ester,ristian,uck',
	  'pa': 'ul,trick,blo,t',
	  'st': 'anley,uart,an',
	  'hu': 'gh,bert,go,mberto',
	  'br': 'ian,uce,andon,ain',
	  'vi': 'ctor,ncent,rgil,cente',
	  'ca': 'lvin,meron,leb',
	  'gu': 'y,illermo,stavo',
	  'lu': 'is,ther,ke,cas',
	  'gr': 'ant,ady,over,aham',
	  'ne': 'il,lson,al,d',
	  't': 'homas,imothy,odd,ony,heodore,im,yler,ed,yrone,aylor,erence,immy,oby,eddy,yson',
	  's': 'cott,ean,idney,ergio,eth,pencer,herman,ylvester,imon,heldon,cotty,olomon',
	  'r': 'yan',
	  'n': 'icholas,athan,athaniel,ick,icolas',
	  'a': 'dam,aron,drian,ustin,ngelo,braham,mos,bel,gustin,ugust,dolfo',
	  'b': 'illy,obby,arry,ernard,ill,ob,yron,lake,ert,oyd,illie,laine,art,uddy,urton',
	  'e': 'ugene,arl,verett,nrique,van,arnest,frain,than,steban',
	  'h': 'oward,omer,orace,ans,al',
	  'p': 'hillip,hilip,reston,hil,ierre',
	  'c': 'raig,urtis,lyde,ecil,esar,edric,leveland,urt',
	  'j': 'immy,im,immie',
	  'g': 'lenn,ordon,len,ilbert,abriel,ilberto',
	  'm': 'elvin,yron,erle,urray',
	  'k': 'yle,arl,urt,irk,ristopher',
	  'o': 'scar,tis,liver,rlando,mar,wen,rville,tto',
	  'l': 'loyd,yle,ionel',
	  'f': 'loyd,ernando,elix,elipe,orrest,abian,idel',
	  'w': 'esley,endell,m,oodrow,inston',
	  'd': 'ustin,uane,wayne,wight,rew,ylan',
	  'z': 'achary',
	  'v': 'ernon,an,ance',
	  'i': 'an,van,saac,ra,rving,smael,gnacio,rvin',
	  'q': 'uentin,uinton',
	  'x': 'avier'
	};
	const female_names = {
	  'mari': 'a,e,lyn,an,anne,na,ssa,bel,sa,sol,tza',
	  'kris': 'ten,tin,tina,ti,tine,ty,ta,tie',
	  'jean': 'ette,ne,nette,nie,ine,nine',
	  'chri': 'stine,stina,sty,stie,sta,sti',
	  'marg': 'aret,ie,arita,uerite,ret,o',
	  'ange': 'la,lica,lina,lia,line',
	  'fran': 'ces,cine,cisca',
	  'kath': 'leen,erine,y,ryn,arine',
	  'sher': 'ry,ri,yl,i,rie',
	  'caro': 'l,lyn,line,le,lina',
	  'dian': 'e,a,ne,na',
	  'jenn': 'ifer,ie,y,a',
	  'luci': 'lle,a,nda,le',
	  'kell': 'y,i,ey,ie',
	  'rosa': ',lie,lind',
	  'jani': 'ce,e,s,ne',
	  'stac': 'y,ey,ie,i',
	  'shel': 'ly,ley,ia',
	  'laur': 'a,en,ie,el',
	  'trac': 'y,ey,i,ie',
	  'jane': 't,,lle,tte',
	  'bett': 'y,ie,e,ye',
	  'rose': 'mary,marie,tta',
	  'joan': ',ne,n,na',
	  'mar': 'y,tha,jorie,cia,lene,sha,yann,cella,ta,la,cy,tina',
	  'lor': 'i,raine,etta,a,ena,ene,na,ie',
	  'sha': 'ron,nnon,ri,wna,nna,na,una',
	  'dor': 'othy,is,a,een,thy,othea',
	  'cla': 'ra,udia,ire,rice,udette',
	  'eli': 'zabeth,sa,sabeth,se,za',
	  'kar': 'en,la,a,i,in',
	  'tam': 'my,ara,i,mie,ika',
	  'ann': 'a,,e,ie,ette',
	  'car': 'men,rie,la,a,mela',
	  'mel': 'issa,anie,inda',
	  'ali': 'ce,cia,son,sha,sa',
	  'bri': 'ttany,dget,ttney,dgette',
	  'lyn': 'n,da,ne,ette',
	  'del': 'ores,la,ia,oris',
	  'ter': 'esa,ri,i',
	  'son': 'ia,ya,ja,dra',
	  'deb': 'orah,ra,bie,ora',
	  'jac': 'queline,kie,quelyn,lyn',
	  'lat': 'oya,asha,onya,isha',
	  'che': 'ryl,lsea,ri,rie',
	  'vic': 'toria,ki,kie,ky',
	  'sus': 'an,ie,anne,ana',
	  'rob': 'erta,yn',
	  'est': 'her,elle,ella,er',
	  'lea': 'h,,nne,nn',
	  'lil': 'lian,lie,a,y',
	  'ma': 'ureen,ttie,xine,bel,e,deline,ggie,mie,ble,ndy,ude,yra,nuela,vis,gdalena,tilda',
	  'jo': 'yce,sephine,,di,dy,hanna,sefina,sie,celyn,lene,ni,die',
	  'be': 'verly,rtha,atrice,rnice,th,ssie,cky,linda,ulah,rnadette,thany,tsy,atriz',
	  'ca': 'therine,thy,ssandra,ndace,ndice,mille,itlin,ssie,thleen,llie',
	  'le': 'slie,na,ona,ticia,igh,la,nora,ola,sley,ila',
	  'el': 'aine,len,eanor,sie,la,ena,oise,vira,sa,va,ma',
	  'sa': 'ndra,rah,ra,lly,mantha,brina,ndy,die,llie',
	  'mi': 'chelle,ldred,chele,nnie,riam,sty,ndy,randa,llie',
	  'co': 'nnie,lleen,nstance,urtney,ra,rinne,nsuelo,rnelia',
	  'ju': 'lie,dith,dy,lia,anita,ana,stine',
	  'da': 'wn,nielle,rlene,na,isy,rla,phne',
	  're': 'becca,nee,na,bekah,ba',
	  'al': 'ma,lison,berta,exandra,yssa,ta',
	  'ra': 'chel,mona,chael,quel,chelle',
	  'an': 'drea,ita,a,gie,toinette,tonia',
	  'ge': 'raldine,rtrude,orgia,nevieve,orgina',
	  'de': 'nise,anna,siree,na,ana,e',
	  'ja': 'smine,na,yne',
	  'lu': 'cy,z,la,pe,ella,isa',
	  'je': 'ssica,nifer,well,ri',
	  'ad': 'a,rienne,die,ele,riana,eline',
	  'pa': 'tricia,mela,ula,uline,tsy,m,tty,ulette,tti,trice,trica,ige',
	  'ke': 'ndra,rri,isha,ri',
	  'mo': 'nica,lly,nique,na,llie',
	  'lo': 'uise,is,la',
	  'he': 'len,ather,idi,nrietta,lene,lena',
	  'me': 'gan,rcedes,redith,ghan,agan',
	  'wi': 'lma,lla,nnie',
	  'ga': 'il,yle,briela,brielle,le',
	  'er': 'in,ica,ika,ma,nestine',
	  'ce': 'cilia,lia,celia,leste,cile',
	  'ka': 'tie,y,trina,yla,te',
	  'ol': 'ga,ivia,lie,a',
	  'li': 'nda,sa,ndsay,ndsey,zzie',
	  'na': 'ncy,talie,omi,tasha,dine',
	  'la': 'verne,na,donna,ra',
	  'vi': 'rginia,vian,ola',
	  'ha': 'rriet,nnah',
	  'pe': 'ggy,arl,nny,tra',
	  'br': 'enda,andi,ooke',
	  'ki': 'mberly,m,mberley,rsten',
	  'au': 'drey,tumn,dra',
	  'bo': 'nnie,bbie,nita,bbi',
	  'do': 'nna,lores,lly,minique',
	  'gl': 'oria,adys,enda,enna',
	  'tr': 'icia,ina,isha,udy',
	  'ta': 'ra,nya,sha,bitha',
	  'ro': 'sie,xanne,chelle,nda',
	  'am': 'y,anda,ber,elia',
	  'fa': 'ye,nnie,y',
	  'ni': 'cole,na,chole,kki',
	  've': 'ronica,ra,lma,rna',
	  'gr': 'ace,etchen,aciela,acie',
	  'b': 'arbara,lanca,arbra,ianca',
	  'r': 'uth,ita,honda',
	  's': 'hirley,tephanie,ylvia,heila,uzanne,ue,tella,ophia,ilvia,ophie,tefanie,heena,ummer,elma,ocorro,ybil,imone',
	  'c': 'ynthia,rystal,indy,harlene,ristina,leo',
	  'e': 'velyn,mily,dna,dith,thel,mma,va,ileen,unice,ula,ssie,ffie,tta,ugenia',
	  'a': 'shley,pril,gnes,rlene,imee,bigail,ida,bby,ileen',
	  't': 'heresa,ina,iffany,helma,onya,oni,herese,onia',
	  'i': 'rene,da,rma,sabel,nez,ngrid,va,mogene,sabelle',
	  'w': 'anda,endy,hitney',
	  'p': 'hyllis,riscilla,olly',
	  'n': 'orma,ellie,ora,ettie,ell',
	  'f': 'lorence,elicia,lora,reda,ern,rieda',
	  'v': 'alerie,anessa',
	  'j': 'ill,illian',
	  'y': 'vonne,olanda,vette',
	  'g': 'ina,wendolyn,wen,oldie',
	  'l': 'ydia',
	  'm': 'yrtle,yra,uriel,yrna',
	  'h': 'ilda',
	  'o': 'pal,ra,felia',
	  'k': 'rystal',
	  'd': 'ixie,ina',
	  'u': 'rsula'
	};
	const ambiguous = [
	  'casey',
	  'jamie',
	  'lee',
	  'jaime',
	  'jessie',
	  'morgan',
	  'rene',
	  'robin',
	  'devon',
	  'kerry',
	  'alexis',
	  'guadalupe',
	  'blair',
	  'kasey',
	  'jean',
	  'marion',
	  'aubrey',
	  'shelby',
	  'jan',
	  'shea',
	  'jade',
	  'kenyatta',
	  'kelsey',
	  'shay',
	  'lashawn',
	  'trinity',
	  'regan',
	  'jammie',
	  'cassidy',
	  'cheyenne',
	  'reagan',
	  'shiloh',
	  'marlo',
	  'andra',
	  'devan',
	  'rosario',
	  'lee'
	];

	//add data into the main obj
	//males
	let keys = Object.keys(male_names);
	let l = keys.length;
	for (let i = 0; i < l; i++) {
	  const arr = male_names[keys[i]].split(',');
	  for (let i2 = 0; i2 < arr.length; i2++) {
	    main[keys[i] + arr[i2]] = 'm';
	  }
	}

	//females
	keys = Object.keys(female_names);
	l = keys.length;
	for (let i = 0; i < l; i++) {
	  const arr = female_names[keys[i]].split(',');
	  for (let i2 = 0; i2 < arr.length; i2++) {
	    main[keys[i] + arr[i2]] = 'f';
	  }
	}
	//unisex names
	l = ambiguous.length;
	for (let i = 0; i < l; i += 1) {
	  main[ambiguous[i]] = 'a';
	}
	// console.log(firstnames['spencer'])
	// console.log(firstnames['jill'])
	// console.log(firstnames['sue'])
	// console.log(firstnames['jan'])
	// console.log(JSON.stringify(Object.keys(firstnames).length, null, 2));

	module.exports = main;


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const is_person = __webpack_require__(152);
	const is_plural = __webpack_require__(148);
	const gender = __webpack_require__(155);

	const pronoun = function(str) {
	  if (is_person(str)) {
	    let g = gender(str);
	    if (g === 'Male') {
	      return 'he';
	    } else if (g === 'Female') {
	      return 'she';
	    }
	    return 'they'; //singular they
	  }
	  //non-person, like 'microwaves'
	  if (is_plural(str)) {
	    return 'they';
	  }
	  return 'it';
	};

	module.exports = pronoun;

	// console.log(pronoun('Illi Danza'));


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const firstnames = __webpack_require__(153);
	const parse_name = __webpack_require__(156);

	const gender = function(normal) {
	  if (normal === 'he') {
	    return 'Male';
	  }
	  if (normal === 'she') {
	    return 'Female';
	  }
	  let o = parse_name(normal);
	  let firstName = o.firstName;
	  if (!firstName) {
	    return null;
	  }
	  if (firstnames[firstName] === 'm') {
	    return 'Male';
	  }
	  if (firstnames[firstName] === 'f') {
	    return 'Female';
	  }
	  //male honourifics
	  if (normal.match(/\b(mr|mister|sr|jr)\b/i)) {
	    return 'Male';
	  }
	  //female honourifics
	  if (normal.match(/^(mrs|miss|ms|misses|mme|mlle)\.? /i)) {
	    return 'Female';
	  }
	  //statistical guesses
	  if (firstName.match(/.(i|ee|[a|e]y|a)$/i)) { //this is almost-always true
	    return 'Female';
	  }
	  if (firstName.match(/[ou]$/i)) { //if it ends in a 'oh or uh', male
	    return 'Male';
	  }
	  if (firstName.match(/(nn|ll|tt)/i)) { //if it has double-consonants, female
	    return 'Female';
	  }
	  return null;
	};
	module.exports = gender;

	// console.log(gender('john', 'john') === 'Male');
	// console.log(gender('jane smith', 'jane') === 'Female');


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const firstnames = __webpack_require__(153);
	const honourifics = __webpack_require__(123).reduce(function(h, s) {
	  h[s] = true;
	  return h;
	}, {});

	const parse_name = function(str) {

	  let words = str.split(' ');
	  let o = {
	    honourific: null,
	    firstName: null,
	    middleName: null,
	    lastName: null,
	  };

	  //first-word honourific
	  if (honourifics[words[0]]) {
	    o.honourific = words[0];
	    words = words.slice(1, words.length);
	  }
	  //last-word honourific
	  if (honourifics[words[words.length - 1]]) {
	    o.honourific = words[words.length - 1];
	    words = words.slice(0, words.length - 1);
	  }
	  //see if the first word is now a known first-name
	  if (firstnames[words[0]]) {
	    o.firstName = words[0];
	    words = words.slice(1, words.length);
	  } else {
	    //ambiguous one-word name
	    if (words.length === 1) {
	      return o;
	    }
	    //looks like an unknown first-name
	    o.firstName = words[0];
	    words = words.slice(1, words.length);
	  }
	  //assume the remaining is '[middle..] [last]'
	  if (words[words.length - 1]) {
	    o.lastName = words[words.length - 1];
	    words = words.slice(0, words.length - 1);
	  }
	  o.middleName = words.join(' ');
	  return o;
	};

	module.exports = parse_name;

	// console.log(parse_name('john smith'));


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	const nums = __webpack_require__(158);
	const is_date = __webpack_require__(159);

	const is_value = function(str) {
	  let words = str.split(' ');
	  //'january 5' is not a value
	  if (is_date(str)) {
	    return false;
	  }
	  for(let i = 0; i < words.length; i++) {
	    let w = words[i];
	    if (nums.ones[w] || nums.teens[w] || nums.tens[w] || nums.multiples[w] || nums.prefixes[w]) {
	      return true;
	    }
	    if (parseFloat(w)) {
	      return true;
	    }
	  }
	  return false;
	};

	module.exports = is_value;


/***/ },
/* 158 */
/***/ function(module, exports) {

	const ones = {
	  'a': 1,
	  'zero': 0,
	  'one': 1,
	  'two': 2,
	  'three': 3,
	  'four': 4,
	  'five': 5,
	  'six': 6,
	  'seven': 7,
	  'eight': 8,
	  'nine': 9,
	  'first': 1,
	  'second': 2,
	  'third': 3,
	  'fourth': 4,
	  'fifth': 5,
	  'sixth': 6,
	  'seventh': 7,
	  'eighth': 8,
	  'ninth': 9
	};
	const teens = {
	  'ten': 10,
	  'eleven': 11,
	  'twelve': 12,
	  'thirteen': 13,
	  'fourteen': 14,
	  'fifteen': 15,
	  'sixteen': 16,
	  'seventeen': 17,
	  'eighteen': 18,
	  'nineteen': 19,
	  'eleventh': 11,
	  'twelfth': 12,
	  'thirteenth': 13,
	  'fourteenth': 14,
	  'fifteenth': 15,
	  'sixteenth': 16,
	  'seventeenth': 17,
	  'eighteenth': 18,
	  'nineteenth': 19
	};
	const tens = {
	  'twenty': 20,
	  'thirty': 30,
	  'forty': 40,
	  'fifty': 50,
	  'sixty': 60,
	  'seventy': 70,
	  'eighty': 80,
	  'ninety': 90,
	  'twentieth': 20,
	  'thirtieth': 30,
	  'fourtieth': 40,
	  'fiftieth': 50,
	  'sixtieth': 60,
	  'seventieth': 70,
	  'eightieth': 80,
	  'ninetieth': 90
	};
	const multiples = {
	  'hundred': 100,
	  'grand': 1000,
	  'thousand': 1000,
	  'million': 1000000,
	  'billion': 1000000000,
	  'trillion': 1000000000000,
	  'quadrillion': 1000000000000000,
	  'quintillion': 1000000000000000000,
	  'sextillion': 1000000000000000000000,
	  'septillion': 1000000000000000000000000,
	  'octillion': 1000000000000000000000000000,
	  'nonillion': 1000000000000000000000000000000,
	  'decillion': 1000000000000000000000000000000000
	};

	//used for the units
	const prefixes = {
	  'yotta': 1,
	  'zeta': 1,
	  'peta': 1,
	  'tera': 1,
	  'giga': 1,
	  'mega': 1,
	  'kilo': 1,
	  'hecto': 1,
	  'deca': 1,
	  'centi': 1,
	  'centa': 1,
	  'milli': 1,
	  'micro': 1,
	  'nano': 1,
	  'pico': 1,
	  'femto': 1,
	  'atto': 1,
	  'zepto': 1,
	  'yokto': 1,

	  'square': 1,
	  'cubic': 1,
	  'quartic': 1,
	};

	module.exports = {
	  ones: ones,
	  teens: teens,
	  tens: tens,
	  multiples: multiples,
	  prefixes: prefixes,
	};


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';

	const dates = __webpack_require__(160);

	//build date regex
	let terms = dates.months.concat(dates.days);
	let day_reg = '(\\b' + terms.join('\\b|\\b') + '\\b)';
	day_reg = new RegExp(day_reg, 'i');
	const times_reg = /1?[0-9]:[0-9]{2}/;

	const is_date = function(str) {
	  if (str.match(day_reg) || str.match(times_reg)) {
	    return true;
	  }
	  return false;
	};

	module.exports = is_date;

	// console.log(is_date('january fifth, 2015'));


/***/ },
/* 160 */
/***/ function(module, exports) {

	'use strict';
	//terms that are 'Date' term
	let months = [
	  'january',
	  'february',
	  // "march",  //ambig
	  'april',
	  // "may",   //ambig
	  'june',
	  'july',
	  'august',
	  'september',
	  'october',
	  'november',
	  'december',
	  'jan',
	  'feb',
	  'mar',
	  'apr',
	  'jun',
	  'jul',
	  'aug',
	  'sep',
	  'oct',
	  'nov',
	  'dec',
	  'sept',
	  'sep',
	];
	let days = [
	  'monday',
	  'tuesday',
	  'wednesday',
	  'thursday',
	  'friday',
	  'saturday',
	  'sunday',
	  'mon',
	  'tues',
	  'wed',
	  'thurs',
	  'fri',
	  'sat',
	  'sun'
	];
	module.exports = {
	  days: days,
	  months: months
	};


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const abbreviations = __webpack_require__(122);
	const org_data = __webpack_require__(162);

	//words like 'co' and ltd
	let org_suffix = abbreviations.orgs.reduce(function(h, s) {
	  h[s] = true;
	  return h;
	}, {});
	org_data.suffixes.forEach(function(s) { //a few more
	  org_suffix[s] = true;
	});

	//named orgs like google and nestle
	let org_names = org_data.organisations.reduce(function(h, s) {
	  h[s] = true;
	  return h;
	}, {});

	const is_organisation = function(str, text) {
	  text = text || '';
	  //some known organisations, like microsoft
	  if (org_names[str]) {
	    return true;
	  }
	  //no period acronyms
	  if (text.length <= 5 && text.match(/^[A-Z][A-Z]+$/) !== null) {
	    return true;
	  }
	  //period acronyms
	  if (text.length >= 4 && text.match(/^([A-Z]\.)*$/) !== null) {
	    return true;
	  }
	  // eg 'Smith & Co'
	  if (str.match(/ & /)) {
	    return true;
	  }
	  // Girlscouts of Canada
	  if (str.match(/..s of /)) {
	    return true;
	  }
	  // eg pets.com
	  if (str.match(/[a-z]{3}\.(com|net|org|biz)/)) { //not a perfect url regex, but a "org.com"
	    return true;
	  }
	  let words = str.split(' ');
	  let last = words[words.length - 1];
	  if (org_suffix[last]) {
	    return true;
	  }

	  return false;
	};

	module.exports = is_organisation;

	// console.log(is_organisation('Captain of Jamaica'));


/***/ },
/* 162 */
/***/ function(module, exports) {

	'use strict';
	//just a few named-organisations
	//no acronyms needed. no product/brand pollution.
	let organisations = [
	  'google',
	  'microsoft',
	  'walmart',
	  'exxonmobil',
	  'glencore',
	  'samsung',
	  'chevron',
	  'at&t',
	  'verizon',
	  'costco',
	  'nestlé',
	  '7-eleven',
	  'adidas',
	  'nike',
	  'acer',
	  'mcdonalds',
	  'mcdonald\'s',
	  'comcast',
	  'compaq',
	  'craigslist',
	  'cisco',
	  'disney',
	  'coca cola',
	  'dupont',
	  'ebay',
	  'facebook',
	  'fedex',
	  'kmart',
	  'kodak',
	  'monsanto',
	  'myspace',
	  'netflix',
	  'sony',
	  'telus',
	  'twitter',
	  'usps',
	  'ubs',
	  'ups',
	  'walgreens',
	  'youtube',
	  'yahoo!',
	  'yamaha'
	];

	let suffixes = [
	  'center',
	  'centre',
	  'memorial',
	  'school',
	  'university',
	  'bank',
	  'college',
	  'house',
	  'foundation',
	  'department',
	  'institute',
	  'club',
	  'co',
	  'sons'
	];

	module.exports = {
	  suffixes: suffixes,
	  organisations: organisations
	};


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const is_uncountable = __webpack_require__(164);
	const irregulars = __webpack_require__(149);
	const is_plural = __webpack_require__(148);
	const fns = __webpack_require__(125);

	const singularize_rules = [
	  [/([^v])ies$/i, '$1y'],
	  [/ises$/i, 'isis'],
	  [/ives$/i, 'ife'],
	  [/(antenn|formul|nebul|vertebr|vit)ae$/i, '$1a'],
	  [/(octop|vir|radi|nucle|fung|cact|stimul)(i)$/i, '$1us'],
	  [/(buffal|tomat|tornad)(oes)$/i, '$1o'],
	  [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/i, '$1sis'],
	  [/(vert|ind|cort)(ices)$/i, '$1ex'],
	  [/(matr|append)(ices)$/i, '$1ix'],
	  [/(x|ch|ss|sh|s|z|o)es$/i, '$1'],
	  [/men$/i, 'man'],
	  [/(n)ews$/i, '$1ews'],
	  [/([ti])a$/i, '$1um'],
	  [/([^f])ves$/i, '$1fe'],
	  [/([lr])ves$/i, '$1f'],
	  [/([^aeiouy]|qu)ies$/i, '$1y'],
	  [/(s)eries$/i, '$1eries'],
	  [/(m)ovies$/i, '$1ovie'],
	  [/([m|l])ice$/i, '$1ouse'],
	  [/(cris|ax|test)es$/i, '$1is'],
	  [/(alias|status)es$/i, '$1'],
	  [/(ss)$/i, '$1'],
	  [/(ics)$/i, '$1'],
	  [/s$/i, '']
	].map(function(a) {
	  return {
	    reg: a[0],
	    repl: a[1]
	  };
	});

	const singularize = function(str) {
	  const low = str.toLowerCase();
	  //uncountable
	  if (is_uncountable(low)) {
	    return str;
	  }
	  //is it already singular?
	  if (is_plural(low) === false) {
	    return str;
	  }
	  //irregular
	  const found = irregulars.filter(function(r) {
	    return r[1] === low;
	  });
	  if (found[0]) {
	    if (fns.titlecase(low) === str) { //handle capitalisation properly
	      return fns.titlecase(found[0][0]);
	    }
	    return found[0][0];
	  }
	  //inflect first word of preposition-phrase
	  if (str.match(/([a-z]*) (of|in|by|for) [a-z]/)) {
	    const first = str.match(/^([a-z]*) (of|in|by|for) [a-z]/);
	    if (first && first[1]) {
	      const better_first = singularize(first[1]);
	      return better_first + str.replace(first[1], '');
	    }
	  }
	  //regular
	  for (let i = 0; i < singularize_rules.length; i++) {
	    if (str.match(singularize_rules[i].reg)) {
	      return str.replace(singularize_rules[i].reg, singularize_rules[i].repl);
	    }
	  }
	  return str;
	};

	// console.log(singularize('gases') === "gas")
	// console.log(singularize('kisses') === "kiss")
	// console.log(singularize('kiss') === "kiss")
	// console.log(singularize('children') === "child")
	// console.log(singularize('peace') === "peace")
	// console.log(singularize('child') === "child")
	// console.log(singularize('mayors of chicago') === "mayor of chicago")

	module.exports = singularize;


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	//uncountables are words that shouldn't ever inflect, for metaphysical reasons, like 'peace'
	'use strict';
	const uncountable_arr = __webpack_require__(165);

	const uncountable = uncountable_arr.reduce(function(h, a) {
	  h[a] = true;
	  return h;
	}, {});

	const is_uncountable = function(str) {
	  if (uncountable[str]) {
	    return true;
	  }
	  return false;
	};
	// console.log(is_uncountable("peace") === true)
	// console.log(is_uncountable("dog") === false)
	module.exports = is_uncountable;


/***/ },
/* 165 */
/***/ function(module, exports) {

	//common nouns that have no plural form. These are suprisingly rare
	//used in noun.inflect(), and added as nouns in lexicon
	module.exports = [
	  'aircraft',
	  'bass',
	  'bison',
	  'fowl',
	  'halibut',
	  'moose',
	  'salmon',
	  'spacecraft',
	  'tuna',
	  'trout',
	  'advice',
	  'information',
	  'knowledge',
	  'trouble',
	  'enjoyment',
	  'fun',
	  'recreation',
	  'relaxation',
	  'meat',
	  'rice',
	  'bread',
	  'cake',
	  'coffee',
	  'ice',
	  'water',
	  'oil',
	  'grass',
	  'hair',
	  'fruit',
	  'wildlife',
	  'equipment',
	  'machinery',
	  'furniture',
	  'mail',
	  'luggage',
	  'jewelry',
	  'clothing',
	  'money',
	  'mathematics',
	  'economics',
	  'physics',
	  'civics',
	  'ethics',
	  'gymnastics',
	  'mumps',
	  'measles',
	  'news',
	  'tennis',
	  'baggage',
	  'currency',
	  'soap',
	  'toothpaste',
	  'food',
	  'sugar',
	  'butter',
	  'flour',
	  'research',
	  'leather',
	  'wool',
	  'wood',
	  'coal',
	  'weather',
	  'homework',
	  'cotton',
	  'silk',
	  'patience',
	  'impatience',
	  'vinegar',
	  'art',
	  'beef',
	  'blood',
	  'cash',
	  'chaos',
	  'cheese',
	  'chewing',
	  'conduct',
	  'confusion',
	  'education',
	  'electricity',
	  'entertainment',
	  'fiction',
	  'forgiveness',
	  'gold',
	  'gossip',
	  'ground',
	  'happiness',
	  'history',
	  'honey',
	  'hospitality',
	  'importance',
	  'justice',
	  'laughter',
	  'leisure',
	  'lightning',
	  'literature',
	  'luck',
	  'melancholy',
	  'milk',
	  'mist',
	  'music',
	  'noise',
	  'oxygen',
	  'paper',
	  'pay',
	  'peace',
	  'peanut',
	  'pepper',
	  'petrol',
	  'plastic',
	  'pork',
	  'power',
	  'pressure',
	  'rain',
	  'recognition',
	  'sadness',
	  'safety',
	  'salt',
	  'sand',
	  'scenery',
	  'shopping',
	  'silver',
	  'snow',
	  'softness',
	  'space',
	  'speed',
	  'steam',
	  'sunshine',
	  'tea',
	  'thunder',
	  'time',
	  'traffic',
	  'trousers',
	  'violence',
	  'warmth',
	  'wine',
	  'steel',
	  'soccer',
	  'hockey',
	  'golf',
	  'fish',
	  'gum',
	  'liquid',
	  'series',
	  'sheep',
	  'species',
	  'fahrenheit',
	  'celcius',
	  'kelvin',
	  'hertz'
	];


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const is_uncountable = __webpack_require__(164);
	const irregulars = __webpack_require__(149);
	const is_plural = __webpack_require__(148);
	const fns = __webpack_require__(125);

	const pluralize_rules = [
	  [/(ax|test)is$/i, '$1es'],
	  [/(octop|vir|radi|nucle|fung|cact|stimul)us$/i, '$1i'],
	  [/(octop|vir)i$/i, '$1i'],
	  [/([rl])f$/i, '$1ves'],
	  [/(alias|status)$/i, '$1es'],
	  [/(bu)s$/i, '$1ses'],
	  [/(al|ad|at|er|et|ed|ad)o$/i, '$1oes'],
	  [/([ti])um$/i, '$1a'],
	  [/([ti])a$/i, '$1a'],
	  [/sis$/i, 'ses'],
	  [/(?:([^f])fe|([lr])f)$/i, '$1ves'],
	  [/(hive)$/i, '$1s'],
	  [/([^aeiouy]|qu)y$/i, '$1ies'],
	  [/(x|ch|ss|sh|s|z)$/i, '$1es'],
	  [/(matr|vert|ind|cort)(ix|ex)$/i, '$1ices'],
	  [/([m|l])ouse$/i, '$1ice'],
	  [/([m|l])ice$/i, '$1ice'],
	  [/^(ox)$/i, '$1en'],
	  [/^(oxen)$/i, '$1'],
	  [/(quiz)$/i, '$1zes'],
	  [/(antenn|formul|nebul|vertebr|vit)a$/i, '$1ae'],
	  [/(sis)$/i, 'ses'],
	  [/^(?!talis|.*hu)(.*)man$/i, '$1men'],
	  [/(.*)/i, '$1s']
	].map(function(a) {
	  return {
	    reg: a[0],
	    repl: a[1]
	  };
	});


	const pluralize = function(str) {
	  const low = str.toLowerCase();
	  //uncountable
	  if (is_uncountable(low)) { //uncountables shouldn't ever inflect
	    return str;
	  }
	  //is it already plural?
	  if (is_plural(low) === true) {
	    return str;
	  }
	  //irregular
	  const found = irregulars.filter(function(r) {
	    return r[0] === low;
	  });
	  if (found[0]) {
	    if (fns.titlecase(low) === str) { //handle capitalisation properly
	      return fns.titlecase(found[0][1]);
	    }
	    return found[0][1];

	  }
	  //inflect first word of preposition-phrase
	  if (str.match(/([a-z]*) (of|in|by|for) [a-z]/)) {
	    const first = (str.match(/^([a-z]*) (of|in|by|for) [a-z]/) || [])[1];
	    if (first) {
	      const better_first = pluralize(first);
	      return better_first + str.replace(first, '');
	    }
	  }
	  //regular
	  for (let i = 0; i < pluralize_rules.length; i++) {
	    if (str.match(pluralize_rules[i].reg)) {
	      return str.replace(pluralize_rules[i].reg, pluralize_rules[i].repl);
	    }
	  }
	};
	// console.log(pluralize('gas') === "gases")
	// console.log(pluralize('narrative') === "narratives")
	// console.log(pluralize('video') === "videos")
	// console.log(pluralize('photo') === "photos")
	// console.log(pluralize('stomach') === "stomachs")
	// console.log(pluralize('database') === "databases")
	// console.log(pluralize('kiss') === "kisses")
	// console.log(pluralize('towns') === "towns")
	// console.log(pluralize('peace') === "peace")
	// console.log(pluralize('mayor of chicago') === "mayors of chicago")
	module.exports = pluralize;


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	// not all cultures use the firstname-lastname practice. this does make some assumptions.
	'use strict';
	const Noun = __webpack_require__(146);
	const guess_gender = __webpack_require__(155);
	const parse_name = __webpack_require__(156);

	class Person extends Noun {
	  constructor(str, tag) {
	    super(str);
	    this.tag = tag;
	    this.pos['Person'] = true;
	    this.honourific = null;
	    this.firstName = null;
	    this.middleName = null;
	    this.lastName = null;
	    this.parse();
	  }

	  //turn a multi-word string into [first, middle, last, honourific]
	  parse() {
	    let o = parse_name(this.normal);
	    this.honourific = o.honourific;
	    this.firstName = o.firstName;
	    this.middleName = o.middleName;
	    this.lastName = o.lastName;
	  }

	  gender() {
	    return guess_gender(this.normal);
	  }

	}
	Person.fn = Person.prototype;
	module.exports = Person;

	// let p = new Person('John Smith');
	// console.log(p.gender());


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const Noun = __webpack_require__(146);

	const Place = class Place extends Noun {
	constructor(str, tag) {
	  super(str);
	  this.tag = tag;
	  this.pos['Place'] = true;
	}
	};
	Place.fn = Place.prototype;
	module.exports = Place;


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const Noun = __webpack_require__(146);

	class Organisation extends Noun {
	  constructor(str, tag) {
	    super(str);
	    this.tag = tag;
	    this.pos['Organisation'] = true;

	  }
	}
	Organisation.fn = Organisation.prototype;
	module.exports = Organisation;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const Noun = __webpack_require__(146);
	const to_number = __webpack_require__(171);
	const units = __webpack_require__(172);
	const nums = __webpack_require__(158);

	class Value extends Noun {
	  constructor(str, tag) {
	    super(str);
	    this.tag = tag;
	    this.pos['Value'] = true;
	    this.number = null;
	    this.unit = null;
	    this.unit_name = null;
	    this.measurement = null;
	    this.parse();
	  }

	  is_unit(s) {
	    if (units[s]) {
	      return true;
	    }
	    s = s.toLowerCase();
	    if (nums.prefixes[s]) {
	      return true;
	    }
	    //try singular version
	    s = s.replace(/s$/); //ew
	    if (units[s]) {
	      return true;
	    }

	    return false;
	  }

	  parse() {
	    let words = this.text.toLowerCase().split(' ');
	    let number_words = {
	      minus: true,
	      point: true
	    };
	    let numbers = '';
	    for(let i = 0; i < words.length; i++) {
	      let w = words[i];
	      if (nums.ones[w] || nums.teens[w] || nums.tens[w] || nums.multiples[w] || number_words[w] || w.match(/[0-9]/)) {
	        numbers += ' ' + w;
	      } else if (this.is_unit(w)) { //optional units come after the number
	        this.unit = w;
	        if (units[w]) {
	          this.measurement = units[w].category;
	          this.unit_name = units[w].name;
	        }
	      }
	    }
	    this.number = to_number(numbers);
	  }

	}
	Value.fn = Value.prototype;

	module.exports = Value;


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	// converts spoken numbers into integers  "fifty seven point eight" -> 57.8
	//
	// Spoken numbers take the following format
	// [sixty five] (thousand) [sixty five] (hundred) [sixty five]
	// aka: [one/teen/ten] (multiple) [one/teen/ten] (multiple) ...
	// combile the [one/teen/ten]s as 'current_sum', then multiply it by its following multiple
	// multiple not repeat

	'use strict';
	const nums = __webpack_require__(158);
	//these sets of numbers each have different rules
	//[tenth, hundreth, thousandth..] are ambiguous because they could be ordinal like fifth, or decimal like one-one-hundredth, so are ignored
	// let decimal_multiple={'tenth':0.1, 'hundredth':0.01, 'thousandth':0.001, 'millionth':0.000001,'billionth':0.000000001};


	//test for nearly-values, like phonenumbers, or whatever
	const is_number = function(s) {
	  //phone numbers, etc
	  if (s.match(/[:@]/)) {
	    return false;
	  }
	  //if there's a number, then something, then a number
	  if (s.match(/[0-9][^0-9,\.][0-9]/)) {
	    return false;
	  }
	  return true;
	};

	//try the best to turn this into a integer/float
	const to_number = function(s) {
	  if (s === null || s === undefined) {
	    return null;
	  }
	  //if it's already a number,
	  if (typeof s === 'number') {
	    return s;
	  }
	  //remove symbols, commas, etc
	  if (is_number(s) !== true) {
	    return null;
	  }
	  s = s.replace(/[\$%\(\)~,]/g, '');
	  s = s.trim();
	  //if it's a number-as-string
	  if (s.match(/^[0-9\.\-]+$/)) {
	    return parseFloat(s);
	  }
	  //remember these concerns for possible errors
	  let ones_done = false;
	  let teens_done = false;
	  let tens_done = false;
	  const multiple_done = {};
	  let total = 0;
	  let global_multiplier = 1;
	  //pretty-printed numbers
	  s = s.replace(/, ?/g, '');
	  //parse-out currency
	  s = s.replace(/[$£€]/, '');
	  //try to die fast. (phone numbers or times)
	  if (s.match(/[0-9][\-:][0-9]/)) {
	    return null;
	  }
	  //support global multipliers, like 'half-million' by doing 'million' then multiplying by 0.5
	  const mults = [{
	    reg: /^(minus|negative)[\s\-]/i,
	    mult: -1
	  }, {
	    reg: /^(a\s)?half[\s\-](of\s)?/i,
	    mult: 0.5
	  }, {
	    reg: /^(a\s)?quarter[\s\-]/i,
	    mult: 0.25
	  }];
	  for (let i = 0; i < mults.length; i++) {
	    if (s.match(mults[i].reg)) {
	      global_multiplier = mults[i].mult;
	      s = s.replace(mults[i].reg, '');
	      break;
	    }
	  }

	  //do each word in turn..
	  const words = s.toString().split(/[\s\-]+/);
	  let w, x;
	  let current_sum = 0;
	  let local_multiplier = 1;
	  let decimal_mode = false;
	  for (let i = 0; i < words.length; i++) {
	    w = words[i];

	    //skip 'and' eg. five hundred and twelve
	    if (w === 'and') {
	      continue;
	    }

	    //..we're doing decimals now
	    if (w === 'point' || w === 'decimal') {
	      if (decimal_mode) {
	        return null;
	      } //two point one point six
	      decimal_mode = true;
	      total += current_sum;
	      current_sum = 0;
	      ones_done = false;
	      local_multiplier = 0.1;
	      continue;
	    }

	    //handle special rules following a decimal
	    if (decimal_mode) {
	      x = null;
	      //allow consecutive ones in decimals eg. 'two point zero five nine'
	      if (nums.ones[w] !== undefined) {
	        x = nums.ones[w];
	      }
	      if (nums.teens[w] !== undefined) {
	        x = nums.teens[w];
	      }
	      if (parseInt(w, 10) === w) {
	        x = parseInt(w, 10);
	      }
	      if (!x) {
	        return null;
	      }
	      if (x < 10) {
	        total += x * local_multiplier;
	        local_multiplier = local_multiplier * 0.1; // next number is next decimal place
	        current_sum = 0;
	        continue;
	      }
	      //two-digit decimals eg. 'two point sixteen'
	      if (x < 100) {
	        total += x * (local_multiplier * 0.1);
	        local_multiplier = local_multiplier * 0.01; // next number is next decimal place
	        current_sum = 0;
	        continue;
	      }
	    }

	    //if it's already an actual number
	    if (w.match(/^[0-9\.]+$/)) {
	      current_sum += parseFloat(w);
	      continue;
	    }
	    if (parseInt(w, 10) === w) {
	      current_sum += parseInt(w, 10);
	      continue;
	    }
	    //ones rules
	    if (nums.ones[w] !== undefined) {
	      if (ones_done) {
	        return null;
	      } // eg. five seven
	      if (teens_done) {
	        return null;
	      } // eg. five seventeen
	      ones_done = true;
	      current_sum += nums.ones[w];
	      continue;
	    }
	    //teens rules
	    if (nums.teens[w]) {
	      if (ones_done) {
	        return null;
	      } // eg. five seventeen
	      if (teens_done) {
	        return null;
	      } // eg. fifteen seventeen
	      if (tens_done) {
	        return null;
	      } // eg. sixty fifteen
	      teens_done = true;
	      current_sum += nums.teens[w];
	      continue;
	    }
	    //tens rules
	    if (nums.tens[w]) {
	      if (ones_done) {
	        return null;
	      } // eg. five seventy
	      if (teens_done) {
	        return null;
	      } // eg. fiveteen seventy
	      if (tens_done) {
	        return null;
	      } // eg. twenty seventy
	      tens_done = true;
	      current_sum += nums.tens[w];
	      continue;
	    }
	    //multiple rules
	    if (nums.multiples[w]) {
	      if (multiple_done[w]) {
	        return null;
	      } // eg. five hundred six hundred
	      multiple_done[w] = true;
	      //reset our concerns. allow 'five hundred five'
	      ones_done = false;
	      teens_done = false;
	      tens_done = false;
	      //case of 'hundred million', (2 consecutive multipliers)
	      if (current_sum === 0) {
	        total = total || 1; //dont ever multiply by 0
	        total *= nums.multiples[w];
	      } else {
	        current_sum *= nums.multiples[w];
	        total += current_sum;
	      }
	      current_sum = 0;
	      continue;
	    }
	    //if word is not a known thing now, die
	    return null;
	  }
	  if (current_sum) {
	    total += (current_sum || 1) * local_multiplier;
	  }
	  //combine with global multiplier, like 'minus' or 'half'
	  total = total * global_multiplier;

	  return total;
	};

	// console.log(to_number('minus five hundred'));
	// console.log(to_number("a hundred"))
	// console.log(to_number('four point six'));

	//kick it into module
	module.exports = to_number;


/***/ },
/* 172 */
/***/ function(module, exports) {

	const units = {
	  'Temperature': {
	    '°C': 'Celsius',
	    '°F': 'Fahrenheit',
	    'K': 'Kelvin',
	    '°Ré': 'Reaumur',
	    '°N': 'Newton',
	    '°Ra': 'Rankine',
	  },
	  'Volume': {
	    'm³': 'cubic meter',
	    'dm³': 'cubic decimeter',
	    'cm³': 'cubic centimeter',
	    'l': 'liter',
	    'dl': 'deciliter',
	    'cl': 'centiliter',
	    'ml': 'milliliter',
	    'in³': 'cubic inch',
	    'ft³': 'cubic foot',
	    'yd³': 'cubic yard',
	    'gal': 'gallon',
	    'bbl': 'petroleum barrel',
	    'pt': 'pint',
	  },
	  'Distance': {
	    'km': 'kilometer',
	    'm': 'meter',
	    'dm': 'decimeter',
	    'cm': 'centimeter',
	    'mm': 'millimeter',
	    'mi': 'mile',
	    'in': 'inch',
	    'ft': 'foot',
	    'feet': 'foot',
	    'yd': 'yard',
	  },
	  'Weight': {
	    't': 'tonne',
	    'kg': 'kilogram',
	    'hg': 'hectogram',
	    'g': 'gram',
	    'dg': 'decigram',
	    'cg': 'centigram',
	    'mg': 'milligram',
	    'µg': 'microgram',
	    'carat': 'carat',
	    'grain': 'grain',
	    'oz': 'ounce',
	    'lb': 'pound',
	    'ton': 'tonne',
	    'st': 'stone',
	  },
	  'Area': {
	    'km²': 'square kilometer',
	    'm²': 'square meter',
	    'dm²': 'square decimeter',
	    'cm²': 'square centimeter',
	    'mm²': 'square millimeter',
	    'ha': 'hectare',
	    'ca': 'centiare',
	    'mile²': 'square mile',
	    'in²': 'square inch',
	    'yd²': 'square yard',
	    'ft²': 'square foot',
	    'acre': 'acre',
	  },
	  'Frequency': {
	    'Hz': 'hertz'
	  },
	  'Speed': {
	    'km/h': 'kilometer per hour',
	    'kmph': 'kilometer per hour',
	    'mps': 'meter per second',
	    'm/s': 'meter per second',
	    'mph': 'mile per hour',
	    'mi/h': 'mile per hour',
	    'knot': 'knot',
	  },
	  'Data': {
	    'b': 'bit',
	    'B': 'byte',
	    'KB': 'kilobyte',
	    'Kb': 'kilobyte',
	    'MB': 'megabyte',
	    'Mb': 'megabyte',
	    'GB': 'gigabyte',
	    'Gb': 'gigabyte',
	    'TB': 'terabyte',
	    'Tb': 'terabyte',
	    'PB': 'petabyte',
	    'Pb': 'petabyte',
	    'EB': 'exabyte',
	    'Eb': 'exabyte',
	    'ZB': 'zettabyte',
	    'Zb': 'zettabyte',
	    'YB': 'yottabyte',
	    'Yb': 'yottabyte',
	  },
	  'Energy': {
	    'J': 'joule',
	    'Pa': 'pascal',
	    'bar': 'bar',
	    'W': 'watt',
	    'N': 'newton',
	    'Wb': 'weber',
	    'T': 'tesla',
	    'H': 'henry',
	    'C': 'coulomb',
	    'V': 'volt',
	    'F': 'farad',
	    'S': 'siemens',
	    'O': 'ohm',
	    'lx': 'lux',
	    'lm': 'lumen'
	  },
	  'Time': {
	    'year': 'year',
	    'week': 'week',
	    'day': 'day',
	    'h': 'hour',
	    'min': 'minute',
	    's': 'second',
	    'ms': 'millisecond',
	    'µs': 'microsecond',
	    'nanosecond': 'nanosecond',
	    'picosecond': 'picosecond',
	    'femtosecond': 'femtosecond',
	    'attosecond': 'attosecond'
	  },
	  'Money': {
	    'dollar': 'currency',
	    'cent': 'currency',
	    'penny': 'currency',
	    'dime': 'currency',
	    'dinar': 'currency',
	    'euro': 'currency',
	    'EU': 'currency',
	    'lira': 'currency',
	    'pound': 'currency',
	    'GBP': 'currency',
	    'pence': 'currency',
	    'peso': 'currency',
	    'sterling': 'currency',
	    'rand': 'currency',
	    'rouble': 'currency',
	    'shekel': 'currency',
	    'yen': 'currency',
	    'yuan': 'currency',
	    'franc': 'currency',
	    'rupee': 'currency',
	    'shilling': 'currency',
	    'won': 'currency',
	    'krona': 'currency',
	    'dirham': 'currency',
	    '€': 'currency',
	    '$': 'currency',
	    '¥': 'currency',
	    '£': 'currency',
	    'real': 'currency',
	    'USD': 'currency',
	    'AUD': 'currency',
	    'CAD': 'currency',
	    'BRL': 'currency',
	    'EUR': 'currency',
	    'CNY': 'currency',
	    'EGP': 'currency',
	    'MXN': 'currency'
	  }
	};

	module.exports = Object.keys(units).reduce(function(h, k) {
	  Object.keys(units[k]).forEach(function(u) {
	    h[u] = {
	      name: units[k][u],
	      category: k
	    };
	    h[units[k][u]] = {
	      name: units[k][u],
	      category: k
	    };
	  });
	  return h;
	}, {});


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const Noun = __webpack_require__(146);
	const parse_date = __webpack_require__(174);

	class _Date extends Noun {
	  constructor(str, tag) {
	    super(str);
	    this.tag = tag;
	    this.pos['Date'] = true;
	    this.data = parse_date(this.text) || {};
	  }

	  //can we make it a js Date object?
	  is_date() {
	    let o = this.data;
	    if (o.month === null || o.day === null || o.year === null) {
	      return false;
	    }
	    return true;
	  }

	  date() {
	    if (this.is_date() === false) {
	      return null;
	    }
	    let d = new Date();
	    if (this.data.year) {
	      d.setYear(this.data.year);
	    }
	    if (this.data.month !== null) {
	      d.setMonth(this.data.month);
	    }
	    if (this.data.day !== null) {
	      d.setDate(this.data.day);
	    }
	    return d;
	  }

	}
	_Date.fn = _Date.prototype;

	module.exports = _Date;

	// let d = new _Date('June 4th 1993');
	// console.log(d.date());


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// #generates properly-formatted dates from free-text date forms
	// #by spencer kelly 2015
	const to_number = __webpack_require__(171);
	//regexes to top-parse
	const rules = __webpack_require__(175);

	//return integers from strings
	let wrangle = {

	  year: function(s) {
	    let num = s.match(/[0-9]+/);
	    num = parseInt(num, 10);
	    if (!num || num > 2900 || num < 0) {
	      return null;
	    }
	    //honestly, prob not a year either
	    if (num > 100 && num < 1000) {
	      return null;
	    }
	    //'20BC' becomes -20
	    if (s.match(/[0-9] ?bc/i)) {
	      return num *= -1;
	    }
	    // '98 becomes 1998
	    if (num < 100 && num > 30) {
	      num += 1900;
	    }
	    return num;
	  },

	  month: function(s) {
	    //0 based months, 1 based days...
	    let months_obj = {
	      january: 0,
	      february: 1,
	      march: 2,
	      april: 3,
	      may: 4,
	      june: 5,
	      july: 6,
	      august: 7,
	      september: 8,
	      october: 9,
	      november: 10,
	      december: 11,
	      jan: 0,
	      feb: 1,
	      mar: 2,
	      apr: 3,
	      aug: 7,
	      sept: 8,
	      oct: 9,
	      nov: 10,
	      dec: 11
	    };
	    return months_obj[s];
	  },

	  day: function(s) {
	    let n = to_number(s) || parseInt(s, 10);
	    if (n < 0 || n > 31) {
	      return null;
	    }
	    return n;
	  }
	};

	//cleanup string
	const preprocess = function(str) {
	  str = str.toLowerCase();
	  str = str.replace(/([0-9]+)(nd|rd|th|st)/i, '$1');
	  let words = str.split(' ').map(function(w) {
	    if (!w.match(/[0-9]/)) {
	      return to_number(w) || w;
	    }
	    return w;
	  });
	  return words.join(' ');
	};

	const date_parser = function(str) {
	  str = preprocess(str);
	  let result = {
	    year: null,
	    month: null,
	    day: null
	  };
	  for(let i = 0; i < rules.length; i++) {
	    if (str.match(rules[i].reg)) {
	      let m = str.match(rules[i].reg);
	      for(let o = 0; o < rules[i].order.length; o++) {
	        let type = rules[i].order[o];
	        result[type] = wrangle[type](m[o + 1]);
	      }
	      break;
	    }
	  }
	  return result;
	};
	module.exports = date_parser;
	// console.log(wrangle.year('1998'));
	// console.log(date_parser('March 1st 1987'));
	// console.log(date_extractor('june second 1999'));


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	let months = __webpack_require__(160).months.concat(['march', 'may']); //(march and may are ambiguous grammatically)
	const month = '(' + months.join('|') + ')';
	const day = '([0-9]{1,2})';
	const year = '\'?([12][0-9]{3})';

	const rules = [
	  {
	    reg: `${month} ${day} ${year}`, //'March 1st 1987'
	    order: ['month', 'day', 'year']
	  },
	  {
	    reg: `${day} of ${month} ${year}`, //'3rd of March 1969',
	    order: ['day', 'month', 'year']
	  },

	  //incomplete versions
	  {
	    reg: `${day} of ${month}`, //'3rd of March',
	    order: ['day', 'month']
	  },
	  {
	    reg: `${month} ${year}`, //'March 1969',
	    order: ['month', 'year']
	  },
	  {
	    reg: `${month} ${day}`, //'March 18th',
	    order: ['month', 'day']
	  },
	  {
	    reg: `${day} ${month}`, //'18th of March',
	    order: ['month', 'day']
	  },
	  {
	    reg: `${month}`, //'january'
	    order: ['month']
	  },
	  {
	    reg: `${year}`, //'1998'
	    order: ['year']
	  }
	].map(function (o) {
	  o.reg = new RegExp('\\b' + o.reg + '\\b', '');
	  return o;
	});
	module.exports = rules;


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	//the lexicon is a big hash of words to pos tags
	//it's built by conjugating and inflecting a small seed of terms
	'use strict';
	const fns = __webpack_require__(125);
	const verb_conjugate = __webpack_require__(130);
	const to_comparative = __webpack_require__(141);
	const to_superlative = __webpack_require__(143);
	const grand_mapping = __webpack_require__(128).tag_mapping;

	const lexicon = {};

	const addObj = function(obj) {
	  const keys = Object.keys(obj);
	  const l = keys.length;
	  for (let i = 0; i < l; i++) {
	    lexicon[keys[i]] = obj[keys[i]];
	  }
	};

	const addArr = function(arr, tag) {
	  const l = arr.length;
	  for (let i = 0; i < l; i++) {
	    lexicon[arr[i]] = tag;
	  }
	};

	//conjugate all verbs.
	const verbMap = {
	  infinitive: 'Infinitive',
	  present: 'PresentTense',
	  past: 'PastTense',
	  gerund: 'Gerund',
	  actor: 'Actor',
	  future: 'FutureTense',
	  pluperfect: 'PluperfectTense',
	  perfect: 'PerfectTense',

	  PerfectTense: 'PerfectTense',
	  PluperfectTense: 'PluperfectTense',
	  FutureTense: 'FutureTense',
	  PastTense: 'PastTense',
	  PresentTense: 'PresentTense',
	};

	const irregulars = __webpack_require__(133);
	let verbs = __webpack_require__(177).concat(Object.keys(irregulars));
	for (let i = 0; i < verbs.length; i++) {
	  const o = verb_conjugate(verbs[i]);
	  Object.keys(o).forEach(function(k) {
	    if (k && o[k] && verbMap[k]) {
	      lexicon[o[k]] = verbMap[k];
	    }
	  });
	}

	let orgs = __webpack_require__(162);
	addArr(orgs.organisations, 'Noun');
	addArr(orgs.suffixes, 'Noun');

	let places = __webpack_require__(151);
	addArr(places.countries, 'Place');
	addArr(places.cities, 'Place');

	__webpack_require__(178).forEach(function(s) {
	  lexicon[s] = 'Adjective';
	  lexicon[to_comparative(s)] = 'Comparative';
	  lexicon[to_superlative(s)] = 'Superlative';
	});
	addObj(__webpack_require__(142));

	addArr(__webpack_require__(122).abbreviations, 'Abbreviation');
	addArr(__webpack_require__(179), 'Adjective');
	addArr(__webpack_require__(123), 'Honourific');
	addArr(__webpack_require__(165), 'Noun');
	addArr(__webpack_require__(160), 'Date');
	addArr(__webpack_require__(180), 'Value');
	//a little fancy
	addArr(Object.keys(__webpack_require__(153)), 'Person');
	//add irregular nouns
	const irregNouns = __webpack_require__(149);
	addArr(fns.pluck(irregNouns, 0), 'Noun');
	addArr(fns.pluck(irregNouns, 1), 'Plural');

	addObj(__webpack_require__(181));
	addObj(__webpack_require__(182));
	addObj(__webpack_require__(183));

	//just in case
	delete lexicon[false];
	delete lexicon[true];
	delete lexicon[undefined];
	delete lexicon[null];
	delete lexicon[''];

	//use 'Noun', not 'NN'
	Object.keys(lexicon).forEach(function(k) {
	  if (!grand_mapping[lexicon[k]]) {
	    // console.log(lexicon[k]);
	  }
	  lexicon[k] = grand_mapping[lexicon[k]] || lexicon[k];
	});


	// console.log(Object.keys(lexicon).length)
	// console.log(lexicon)

	// console.log(lexicon['once again'] === 'RB');
	// console.log(lexicon['seven'] === 'Value');
	// console.log(lexicon['sleep'] === 'VBP');
	// console.log(lexicon['slept'] === 'VBD');
	// console.log(lexicon['sleeping'] === 'VBG');
	// console.log(lexicon['canadian'] === 'JJ');
	// console.log(lexicon['july'] === 'Value');
	// console.log(lexicon[null] === undefined);
	// console.log(lexicon['dr'] === 'NNAB');
	// console.log(lexicon['sounds'] === 'VBZ');
	// console.log(lexicon['look after'] === 'VBP');
	// console.log(lexicon['tony'] === 'Noun');
	// console.log(lexicon['loaf'] === 'Noun');
	// console.log(lexicon['loaves'] === 'NNS');
	// console.log(lexicon['he'] === 'PRP');
	// console.log(lexicon['canada'] === 'Noun');
	// console.log(lexicon['is']);

	module.exports = lexicon;


/***/ },
/* 177 */
/***/ function(module, exports) {

	//most-frequent non-irregular verbs, in infinitive form, to be conjugated for the lexicon
	//this list is the seed, from which various forms are conjugated
	module.exports = [
	  'collapse',
	  'stake',
	  'forsee',
	  'suck',
	  'answer',
	  'argue',
	  'tend',
	  'examine',
	  'depend',
	  'form',
	  'figure',
	  'mind',
	  'surround',
	  'suspect',
	  'reflect',
	  'wonder',
	  'hope',
	  'end',
	  'thank',
	  'file',
	  'regard',
	  'report',
	  'imagine',
	  'consider',
	  'ensure',
	  'cause',
	  'work',
	  'enter',
	  'stop',
	  'defeat',
	  'surge',
	  'launch',
	  'turn',
	  'like',
	  'control',
	  'relate',
	  'remember',
	  'join',
	  'listen',
	  'train',
	  'spring',
	  'enjoy',
	  'fail',
	  'recognize',
	  'obtain',
	  'learn',
	  'fill',
	  'announce',
	  'prevent',
	  'achieve',
	  'realize',
	  'involve',
	  'remove',
	  'aid',
	  'visit',
	  'test',
	  'prepare',
	  'ask',
	  'carry',
	  'suppose',
	  'determine',
	  'raise',
	  'love',
	  'use',
	  'pull',
	  'improve',
	  'contain',
	  'offer',
	  'talk',
	  'pick',
	  'care',
	  'express',
	  'remain',
	  'operate',
	  'close',
	  'add',
	  'mention',
	  'support',
	  'decide',
	  'walk',
	  'vary',
	  'demand',
	  'describe',
	  'agree',
	  'happen',
	  'allow',
	  'suffer',
	  'study',
	  'press',
	  'watch',
	  'seem',
	  'occur',
	  'contribute',
	  'claim',
	  'compare',
	  'apply',
	  'direct',
	  'discuss',
	  'indicate',
	  'require',
	  'change',
	  'fix',
	  'reach',
	  'prove',
	  'expect',
	  'exist',
	  'play',
	  'permit',
	  'kill',
	  'charge',
	  'increase',
	  'believe',
	  'create',
	  'continue',
	  'live',
	  'help',
	  'represent',
	  'edit',
	  'serve',
	  'appear',
	  'cover',
	  'maintain',
	  'start',
	  'stay',
	  'move',
	  'extend',
	  'design',
	  'supply',
	  'suggest',
	  'want',
	  'approach',
	  'call',
	  'include',
	  'try',
	  'receive',
	  'save',
	  'discover',
	  'marry',
	  'need',
	  'establish',
	  'keep',
	  'assume',
	  'attend',
	  'unite',
	  'explain',
	  'publish',
	  'accept',
	  'settle',
	  'reduce',
	  'do',
	  'look',
	  'interact',
	  'concern',
	  'labor',
	  'return',
	  'select',
	  'die',
	  'provide',
	  'seek',
	  'wish',
	  'finish',
	  'follow',
	  'disagree',
	  'produce',
	  'attack',
	  'attempt',
	  'brake',
	  'brush',
	  'burn',
	  'bang',
	  'bomb',
	  'budget',
	  'comfort',
	  'cook',
	  'copy',
	  'cough',
	  'crush',
	  'cry',
	  'check',
	  'claw',
	  'clip',
	  'combine',
	  'damage',
	  'desire',
	  'doubt',
	  'drain',
	  'dance',
	  'decrease',
	  'defect',
	  'deposit',
	  'drift',
	  'dip',
	  'dive',
	  'divorce',
	  'dream',
	  'exchange',
	  'envy',
	  'exert',
	  'exercise',
	  'export',
	  'fold',
	  'flood',
	  'focus',
	  'forecast',
	  'fracture',
	  'grip',
	  'guide',
	  'guard',
	  'guarantee',
	  'guess',
	  'hate',
	  'heat',
	  'handle',
	  'hire',
	  'host',
	  'hunt',
	  'hurry',
	  'import',
	  'judge',
	  'jump',
	  'jam',
	  'kick',
	  'kiss',
	  'knock',
	  'laugh',
	  'lift',
	  'lock',
	  'lecture',
	  'link',
	  'load',
	  'loan',
	  'lump',
	  'melt',
	  'message',
	  'murder',
	  'neglect',
	  'overlap',
	  'overtake',
	  'overuse',
	  'print',
	  'protest',
	  'pump',
	  'push',
	  'post',
	  'progress',
	  'promise',
	  'purchase',
	  'regret',
	  'request',
	  'reward',
	  'roll',
	  'rub',
	  'rent',
	  'repair',
	  'sail',
	  'scale',
	  'screw',
	  'shock',
	  'sleep',
	  'slip',
	  'smash',
	  'smell',
	  'smoke',
	  'sneeze',
	  'snow',
	  'surprise',
	  'scratch',
	  'search',
	  'share',
	  'shave',
	  'spit',
	  'splash',
	  'stain',
	  'stress',
	  'switch',
	  'taste',
	  'touch',
	  'trade',
	  'trick',
	  'twist',
	  'trap',
	  'travel',
	  'tune',
	  'undergo',
	  'undo',
	  'uplift',
	  'vote',
	  'wash',
	  'wave',
	  'whistle',
	  'wreck',
	  'yawn',
	  'betray',
	  'restrict',
	  'perform',
	  'worry',
	  'point',
	  'activate',
	  'fear',
	  'plan',
	  'note',
	  'face',
	  'predict',
	  'differ',
	  'deserve',
	  'torture',
	  'recall',
	  'count',
	  'admit',
	  'insist',
	  'lack',
	  'pass',
	  'belong',
	  'complain',
	  'constitute',
	  'rely',
	  'refuse',
	  'range',
	  'cite',
	  'flash',
	  'arrive',
	  'reveal',
	  'consist',
	  'observe',
	  'notice',
	  'trust',
	  'display',
	  'view',
	  'stare',
	  'acknowledge',
	  'owe',
	  'gaze',
	  'treat',
	  'account',
	  'gather',
	  'address',
	  'confirm',
	  'estimate',
	  'manage',
	  'participate',
	  'sneak',
	  'drop',
	  'mirror',
	  'experience',
	  'strive',
	  'arch',
	  'dislike',
	  'favor',
	  'earn',
	  'emphasize',
	  'match',
	  'question',
	  'emerge',
	  'encourage',
	  'matter',
	  'name',
	  'head',
	  'line',
	  'slam',
	  'list',
	  'warn',
	  'ignore',
	  'resemble',
	  'feature',
	  'place',
	  'reverse',
	  'accuse',
	  'spoil',
	  'retain',
	  'survive',
	  'praise',
	  'function',
	  'please',
	  'date',
	  'remind',
	  'deliver',
	  'echo',
	  'engage',
	  'deny',
	  'yield',
	  'center',
	  'gain',
	  'anticipate',
	  'reason',
	  'side',
	  'thrive',
	  'defy',
	  'dodge',
	  'enable',
	  'applaud',
	  'bear',
	  'persist',
	  'pose',
	  'reject',
	  'attract',
	  'await',
	  'inhibit',
	  'declare',
	  'process',
	  'risk',
	  'urge',
	  'value',
	  'block',
	  'confront',
	  'credit',
	  'cross',
	  'amuse',
	  'dare',
	  'resent',
	  'smile',
	  'gloss',
	  'threaten',
	  'collect',
	  'depict',
	  'dismiss',
	  'submit',
	  'benefit',
	  'step',
	  'deem',
	  'limit',
	  'sense',
	  'issue',
	  'embody',
	  'force',
	  'govern',
	  'replace',
	  'bother',
	  'cater',
	  'adopt',
	  'empower',
	  'outweigh',
	  'alter',
	  'enrich',
	  'influence',
	  'prohibit',
	  'pursue',
	  'warrant',
	  'convey',
	  'approve',
	  'reserve',
	  'rest',
	  'strain',
	  'wander',
	  'adjust',
	  'dress',
	  'market',
	  'mingle',
	  'disapprove',
	  'evaluate',
	  'flow',
	  'inhabit',
	  'pop',
	  'rule',
	  'depart',
	  'roam',
	  'assert',
	  'disappear',
	  'envision',
	  'pause',
	  'afford',
	  'challenge',
	  'grab',
	  'grumble',
	  'house',
	  'portray',
	  'revel',
	  'base',
	  'conduct',
	  'review',
	  'stem',
	  'crave',
	  'mark',
	  'store',
	  'target',
	  'unlock',
	  'weigh',
	  'resist',
	  'drag',
	  'pour',
	  'reckon',
	  'assign',
	  'cling',
	  'rank',
	  'attach',
	  'decline',
	  'destroy',
	  'interfere',
	  'paint',
	  'skip',
	  'sprinkle',
	  'wither',
	  'allege',
	  'retire',
	  'score',
	  'monitor',
	  'expand',
	  'honor',
	  'pack',
	  'assist',
	  'float',
	  'appeal',
	  'stretch',
	  'undermine',
	  'assemble',
	  'boast',
	  'bounce',
	  'grasp',
	  'install',
	  'borrow',
	  'crack',
	  'elect',
	  'shout',
	  'contrast',
	  'overcome',
	  'relax',
	  'relent',
	  'strengthen',
	  'conform',
	  'dump',
	  'pile',
	  'scare',
	  'relive',
	  'resort',
	  'rush',
	  'boost',
	  'cease',
	  'command',
	  'excel',
	  'plug',
	  'plunge',
	  'proclaim',
	  'discourage',
	  'endure',
	  'ruin',
	  'stumble',
	  'abandon',
	  'cheat',
	  'convince',
	  'merge',
	  'convert',
	  'harm',
	  'multiply',
	  'overwhelm',
	  'chew',
	  'invent',
	  'bury',
	  'wipe',
	  'added',
	  'took',
	  'define',
	  'goes',
	  'measure',
	  'enhance',
	  'distinguish',
	  'avoid',
	//contractions
	// 'don\'t',
	// 'won\'t',
	// 'what\'s' //somewhat ambiguous (what does|what are)
	];


/***/ },
/* 178 */
/***/ function(module, exports) {

	//adjectives that either aren't covered by rules, or have superlative/comparative forms
	//this list is the seed, from which various forms are conjugated
	module.exports = [
	  'aberrant',
	  'ablaze',
	  'able',
	  'aboard',
	  'above',
	  'abrupt',
	  'absent',
	  'absolute',
	  'absorbing',
	  'abstract',
	  'abundant',
	  'accurate',
	  'actual',
	  'acute',
	  'cute',
	  'adept',
	  'adequate',
	  'adult',
	  'advanced',
	  'adverse',
	  'afraid',
	  'against',
	  'agonizing',
	  'ahead',
	  'alarming',
	  'alcoholic',
	  'all',
	  'aloof',
	  'amazing',
	  'antiquated',
	  'apparent',
	  'appetizing',
	  'appropriate',
	  'apt',
	  'arab',
	  'arbitrary',
	  'arrogant',
	  'artificial',
	  'asleep',
	  'astonishing',
	  'authentic',
	  'average',
	  'awake',
	  'aware',
	  'awkward',
	  'back',
	  'backwards',
	  'bad',
	  'bald',
	  'bankrupt',
	  'barren',
	  'bawdy',
	  'behind',
	  'beloved',
	  'beneficial',
	  'bent',
	  'best',
	  'better',
	  'beyond',
	  'bizarre',
	  'bland',
	  'blank',
	  'blind',
	  'blond',
	  'bloody',
	  'bogus',
	  'bold',
	  'bottom',
	  'bouncy',
	  'brilliant',
	  'brisk',
	  'broken',
	  'burly',
	  'busy',
	  'cagey',
	  'calming',
	  'careful',
	  'caring',
	  'certain',
	  'cheesy',
	  'chief',
	  'chilly',
	  'civil',
	  'clever',
	  'closed',
	  'cloudy',
	  'colonial',
	  'colossal',
	  'commercial',
	  'common',
	  'complete',
	  'complex',
	  'concerned',
	  'concrete',
	  'congruent',
	  'constant',
	  'contemporary',
	  'contrary',
	  'cooing',
	  'correct',
	  'corrupt',
	  'costly',
	  'covert',
	  'cowardly',
	  'cozy',
	  'cramped',
	  'craven',
	  'crazed',
	  'crisp',
	  'crowded',
	  'crucial',
	  'cuddly',
	  'daily',
	  'damaged',
	  'damaging',
	  'danish',
	  'dapper',
	  'dashing',
	  'deadpan',
	  'deaf',
	  'deeply',
	  'defiant',
	  'degenerate',
	  'deliberate',
	  'delicate',
	  'delightful',
	  'dense',
	  'deranged',
	  'desperate',
	  'detailed',
	  'determined',
	  'devout',
	  'didactic',
	  'difficult',
	  'dire',
	  'discreet',
	  'diseased',
	  'disgruntled',
	  'dishonest',
	  'disorderly',
	  'distant',
	  'distressed',
	  'diverse',
	  'divine',
	  'dominant',
	  'done',
	  'double',
	  'doubtful',
	  'downtown',
	  'dreary',
	  'due',
	  'dumb',
	  'earthly',
	  'east',
	  'eastern',
	  'easygoing',
	  'eerie',
	  'elaborate',
	  'elderly',
	  'elegant',
	  'elite',
	  'eminent',
	  'encouraging',
	  'entire',
	  'erect',
	  'essential',
	  'ethereal',
	  'everyday',
	  'evil',
	  'exact',
	  'excess',
	  'expected',
	  'expert',
	  'extra',
	  'extravagant',
	  'exuberant',
	  'exultant',
	  'fabled',
	  'fake',
	  'false',
	  'fancy',
	  'far',
	  'far-reaching',
	  'faulty',
	  'faux',
	  'favorite',
	  'female',
	  'feminine',
	  'fertile',
	  'fierce ',
	  'financial',
	  'finite',
	  'first',
	  'fit',
	  'fixed',
	  'flagrant',
	  'fluent',
	  'foamy',
	  'foolish',
	  'foregoing',
	  'foreign',
	  'former',
	  'fortunate',
	  'foul',
	  'frantic',
	  'freezing',
	  'frequent',
	  'fretful',
	  'friendly',
	  'friendly',
	  'fun',
	  'furry',
	  'future',
	  'gainful',
	  'gaudy',
	  'gay',
	  'generic',
	  'genuine',
	  'ghastly',
	  'ghostly',
	  'giant',
	  'giddy',
	  'gigantic',
	  'gleaming',
	  'global',
	  'gloomy',
	  'gold',
	  'gone',
	  'good',
	  'goofy',
	  'graceful',
	  'grateful',
	  'gratis',
	  'gray',
	  'grey',
	  'grisly',
	  'groovy',
	  'gross',
	  'guarded',
	  'half',
	  'hallowed',
	  'handy',
	  'hanging',
	  'harrowing',
	  'hateful',
	  'heady',
	  'heavenly',
	  'hefty',
	  'hellish',
	  'helpful',
	  'hesitant',
	  'highfalutin',
	  'hilly',
	  'hispanic',
	  'homely',
	  'honest',
	  'hooked',
	  'horrific',
	  'hostile',
	  'hourly',
	  'huge',
	  'humble',
	  'humdrum',
	  'humid',
	  'hurried',
	  'hurt',
	  'icy',
	  'ideal',
	  'ignorant',
	  'ill',
	  'illegal',
	  'immediate',
	  'immense',
	  'imminent',
	  'impartial',
	  'imperfect',
	  'imported',
	  'improper',
	  'inadequate',
	  'inappropriate',
	  'inbred',
	  'incorrect',
	  'indirect',
	  'indoor',
	  'influential',
	  'initial',
	  'innate',
	  'inner',
	  'insane',
	  'insecure',
	  'inside',
	  'instant',
	  'intact',
	  'intense',
	  'intermediate',
	  'intimate',
	  'intoxicated',
	  'irate',
	  'irrelevant',
	  'jagged',
	  'jolly',
	  'juicy',
	  'junior',
	  'justified',
	  'juvenile',
	  'kaput',
	  'kindly',
	  'knowing',
	  'labored',
	  'languid',
	  'last',
	  'latter',
	  'lax',
	  'learned',
	  'left',
	  'left-wing',
	  'legal',
	  'legendary',
	  'legitimate',
	  'less',
	  'lethal',
	  'level',
	  'lewd',
	  'likely',
	  'limited',
	  'literal',
	  'literate',
	  'lively',
	  'living',
	  'lofty',
	  'lonely',
	  'longing',
	  'lousy',
	  'loutish',
	  'lovely',
	  'loving',
	  'lowly',
	  'loyal',
	  'luxuriant',
	  'lying',
	  'macabre',
	  'madly',
	  'magenta',
	  'main',
	  'major',
	  'makeshift',
	  'male',
	  'malignant',
	  'mammoth',
	  'many',
	  'masculine',
	  'measly',
	  'meaty',
	  'medium',
	  'melancholy',
	  'menacing',
	  'mere',
	  'middle',
	  'mild',
	  'miniature',
	  'minor',
	  'miscreant',
	  'mixed',
	  'mobile',
	  'moderate',
	  'moldy',
	  'monthly',
	  'moody',
	  'moot',
	  'most',
	  'multiple',
	  'mute',
	  'naive',
	  'naked',
	  'nearby',
	  'necessary',
	  'neighborly',
	  'next',
	  'nightly',
	  'nimble',
	  'noble',
	  'nonchalant',
	  'nondescript',
	  'nonstop',
	  'north',
	  'northern',
	  'nosy',
	  'nuanced',
	  'obeisant',
	  'obese',
	  'obscene',
	  'obscure',
	  'observant',
	  'obsolete',
	  'offbeat',
	  'official',
	  'oily',
	  'ok',
	  'okay',
	  'ongoing',
	  'only',
	  'open',
	  'opposite',
	  'organic',
	  'other',
	  'outdoor',
	  'outer',
	  'outgoing',
	  'outside',
	  'oval',
	  'over',
	  'overall',
	  'overnight',
	  'overt',
	  'overweight',
	  'overwrought',
	  'painful',
	  'paralleled',
	  'part-time',
	  'partial',
	  'past',
	  'peaceful',
	  'perfect',
	  'permanent',
	  'perplexing',
	  'perverse',
	  'petite',
	  'phony',
	  'picayune',
	  'placid',
	  'plant',
	  'pleasant',
	  'polite',
	  'populist',
	  'potential',
	  'precise',
	  'pregnant',
	  'premature',
	  'premium',
	  'present',
	  'pricey',
	  'prickly',
	  'primary',
	  'prime',
	  'prior',
	  'pristine',
	  'private',
	  'pro',
	  'probable',
	  'profound',
	  'profuse',
	  'prominent',
	  'proper',
	  'public',
	  'pumped',
	  'puny',
	  'quack',
	  'quaint',
	  'quickest',
	  'rabid',
	  'racial',
	  'racist',
	  'ragged',
	  'random',
	  'ready',
	  'real',
	  'rear',
	  'rebel',
	  'recondite',
	  'redundant',
	  'refreshing',
	  'relevant',
	  'reluctant',
	  'remote',
	  'republican',
	  'resistant',
	  'resolute',
	  'resonant',
	  'retarded',
	  'right',
	  'right-wing',
	  'rightful',
	  'ritzy',
	  'rival',
	  'robust',
	  'romantic',
	  'roomy',
	  'rosy',
	  'rough',
	  'routine',
	  'royal',
	  'sacred',
	  'saintly',
	  'salty',
	  'same',
	  'savvy',
	  'scary',
	  'scathing',
	  'scientific',
	  'screeching',
	  'second',
	  'secondary',
	  'secret',
	  'secure',
	  'sedate',
	  'seemly',
	  'self-loathing',
	  'selfish',
	  'senior',
	  'separate',
	  'serene',
	  'severe',
	  'sexy',
	  'shady',
	  'shameful',
	  'sheer',
	  'shiny',
	  'shocking',
	  'shut',
	  'shy',
	  'sick',
	  'significant',
	  'silly',
	  'sincere',
	  'single',
	  'skinny',
	  'sleek',
	  'slender',
	  'slick',
	  'slight',
	  'slimy',
	  'sly',
	  'smelly',
	  'smug',
	  'snobbish',
	  'social',
	  'sole',
	  'solemn',
	  'somber',
	  'soothing',
	  'sophisticated',
	  'sordid',
	  'sorry',
	  'south',
	  'southern',
	  'soviet',
	  'spare',
	  'special',
	  'specific',
	  'spicy',
	  'spirited',
	  'splendid',
	  'sprightly',
	  'squeamish',
	  'standard',
	  'standing',
	  'stark',
	  'steadfast',
	  'steady',
	  'stereotyped',
	  'stern',
	  'still',
	  'straightforward',
	  'striped',
	  'stupid',
	  'sturdy',
	  'stylish',
	  'subdued',
	  'subsequent',
	  'substantial',
	  'subtle',
	  'sudden',
	  'super',
	  'superb',
	  'superficial',
	  'superior',
	  'supreme',
	  'sure',
	  'surprising',
	  'surreal',
	  'symbolic',
	  'taboo',
	  'talented',
	  'tan',
	  'tasteful',
	  'tawdry',
	  'teenage',
	  'telling',
	  'temporary',
	  'terrific',
	  'tested',
	  'thoughtful',
	  'tidy',
	  'timely',
	  'tiny',
	  'together',
	  'top',
	  'torpid',
	  'tranquil',
	  'trendy',
	  'trite',
	  'troubled',
	  'twin',
	  'ugly',
	  'ultimate',
	  'ultra',
	  'unappealing',
	  'unassuming',
	  'unauthorized',
	  'unbecoming',
	  'unconvincing',
	  'undecided',
	  'under',
	  'underground',
	  'understood',
	  'unending',
	  'uneven',
	  'unexpected',
	  'unfair',
	  'universal',
	  'unknown',
	  'unlikely',
	  'unprecedented',
	  'unpublished',
	  'unrecognized',
	  'unregulated',
	  'unrelated',
	  'unruly',
	  'unsightly',
	  'unsupervised',
	  'unsuspecting',
	  'untidy',
	  'unwieldy',
	  'unwritten',
	  'upbeat',
	  'upcoming',
	  'upper',
	  'uppity',
	  'upscale',
	  'upset',
	  'upstairs',
	  'uptight',
	  'urban',
	  'used',
	  'useful',
	  'usual',
	  'utter',
	  'uttermost',
	  'vacant',
	  'vagabond',
	  'vain',
	  'vanilla',
	  'various',
	  'vengeful',
	  'verdant',
	  'vexing',
	  'vibrant',
	  'violet',
	  'volatile',
	  'wanting',
	  'warped',
	  'wary',
	  'wasteful',
	  'weary',
	  'weekly',
	  'welcome',
	  'western',
	  'whole',
	  'wholesale',
	  'wicked',
	  'widespread',
	  'wily',
	  'wiry',
	  'wistful',
	  'womanly',
	  'wooden',
	  'woozy',
	  'wound',
	  'wrong',
	  'wry',
	  'yearly',
	  'zany'
	];


/***/ },
/* 179 */
/***/ function(module, exports) {

	//adjectival forms of place names, as adjectives.
	module.exports = [
	  'afghan',
	  'albanian',
	  'algerian',
	  'argentine',
	  'armenian',
	  'australian',
	  'aussie',
	  'austrian',
	  'bangladeshi',
	  'belgian',
	  'bolivian',
	  'bosnian',
	  'brazilian',
	  'bulgarian',
	  'cambodian',
	  'canadian',
	  'chilean',
	  'chinese',
	  'colombian',
	  'croat',
	  'cuban',
	  'czech',
	  'dominican',
	  'egyptian',
	  'british',
	  'estonian',
	  'ethiopian',
	  'finnish',
	  'french',
	  'gambian',
	  'georgian',
	  'german',
	  'greek',
	  'haitian',
	  'hungarian',
	  'indian',
	  'indonesian',
	  'iranian',
	  'iraqi',
	  'irish',
	  'israeli',
	  'italian',
	  'jamaican',
	  'japanese',
	  'jordanian',
	  'kenyan',
	  'korean',
	  'kuwaiti',
	  'latvian',
	  'lebanese',
	  'liberian',
	  'libyan',
	  'lithuanian',
	  'macedonian',
	  'malaysian',
	  'mexican',
	  'mongolian',
	  'moroccan',
	  'dutch',
	  'nicaraguan',
	  'nigerian',
	  'norwegian',
	  'omani',
	  'pakistani',
	  'palestinian',
	  'filipino',
	  'polish',
	  'portuguese',
	  'qatari',
	  'romanian',
	  'russian',
	  'rwandan',
	  'samoan',
	  'saudi',
	  'scottish',
	  'senegalese',
	  'serbian',
	  'singaporean',
	  'slovak',
	  'somali',
	  'sudanese',
	  'swedish',
	  'swiss',
	  'syrian',
	  'taiwanese',
	  'thai',
	  'tunisian',
	  'ugandan',
	  'ukrainian',
	  'american',
	  'hindi',
	  'spanish',
	  'venezuelan',
	  'vietnamese',
	  'welsh',
	  'african',
	  'european',
	  'asian',
	  'californian',
	];


/***/ },
/* 180 */
/***/ function(module, exports) {

	module.exports = [
	  //numbers
	  'minus',
	  'zero',
	  'one',
	  'two',
	  'three',
	  'four',
	  'five',
	  'six',
	  'seven',
	  'eight',
	  'nine',
	  'ten',
	  'eleven',
	  'twelve',
	  'thirteen',
	  'fourteen',
	  'fifteen',
	  'sixteen',
	  'seventeen',
	  'eighteen',
	  'nineteen',
	  'twenty',
	  'thirty',
	  'forty',
	  'fifty',
	  'sixty',
	  'seventy',
	  'eighty',
	  'ninety',
	  'hundred',
	  'thousand',
	  'million',
	  'billion',
	  'trillion',
	  'quadrillion',
	  'quintillion',
	  'sextillion',
	  'septillion',
	  'octillion',
	  'nonillion',
	  'decillion'
	];


/***/ },
/* 181 */
/***/ function(module, exports) {

	'use strict';

	const misc = {

	  'etc': 'FW', //foreign words
	  'ie': 'FW',

	  'there': 'NN',

	  'better': 'JJR',
	  'earlier': 'JJR',

	  'has': 'VB',
	  'more': 'RB',

	  'sounds': 'VBZ'
	};

	const compact = {
	  //conjunctions
	  'CC': [
	    'yet',
	    'therefore',
	    'or',
	    'while',
	    'nor',
	    'whether',
	    'though',
	    'because',
	    'but',
	    'for',
	    'and',
	    'if',
	    'however',
	    'before',
	    'although',
	    'how',
	    'plus',
	    'versus',
	    'not'
	  ],

	  'VBD': [
	    'where\'d',
	    'when\'d',
	    'how\'d',
	    'what\'d',
	    'said',
	    'had',
	    'been',
	    'began',
	    'came',
	    'did',
	    'meant',
	    'went'
	  ],

	  'VBN': [
	    'given',
	    'known',
	    'shown',
	    'seen',
	    'born',
	  ],

	  'VBG': [
	    'going',
	    'being',
	    'according',
	    'resulting',
	    'developing',
	    'staining'
	  ],

	  //copula
	  'CP': [
	    'is',
	    'will be',
	    'are',
	    'was',
	    'were',
	    'am',
	    'isn\'t',
	    'ain\'t',
	    'aren\'t'
	  ],

	  //determiners
	  'DT': [
	    'this',
	    'any',
	    'enough',
	    'each',
	    'whatever',
	    'every',
	    'which',
	    'these',
	    'another',
	    'plenty',
	    'whichever',
	    'neither',
	    'an',
	    'a',
	    'least',
	    'own',
	    'few',
	    'both',
	    'those',
	    'the',
	    'that',
	    'various',
	    'what',
	    'either',
	    'much',
	    'some',
	    'else',
	    'no',
	    //some other languages (what could go wrong?)
	    'la',
	    'le',
	    'les',
	    'des',
	    'de',
	    'du',
	    'el'
	  ],

	  //prepositions
	  'IN': [
	    'until',
	    'onto',
	    'of',
	    'into',
	    'out',
	    'except',
	    'across',
	    'by',
	    'between',
	    'at',
	    'down',
	    'as',
	    'from',
	    'around',
	    'with',
	    'among',
	    'upon',
	    'amid',
	    'to',
	    'along',
	    'since',
	    'about',
	    'off',
	    'on',
	    'within',
	    'in',
	    'during',
	    'per',
	    'without',
	    'throughout',
	    'through',
	    'than',
	    'via',
	    'up',
	    'unlike',
	    'despite',
	    'below',
	    'unless',
	    'towards',
	    'besides',
	    'after',
	    'whereas',
	    '\'o',
	    'amidst',
	    'amongst',
	    'apropos',
	    'atop',
	    'barring',
	    'chez',
	    'circa',
	    'mid',
	    'midst',
	    'notwithstanding',
	    'qua',
	    'sans',
	    'vis-a-vis',
	    'thru',
	    'till',
	    'versus',
	    'without',
	    'w/o',
	    'o\'',
	    'a\'',
	  ],

	  //modal verbs
	  'MD': [
	    'can',
	    'may',
	    'could',
	    'might',
	    'will',
	    'ought to',
	    'would',
	    'must',
	    'shall',
	    'should',
	    'ought',
	    'shouldn\'t',
	    'wouldn\'t',
	    'couldn\'t',
	    'mustn\'t',
	    'shan\'t',
	    'shant',
	    'lets', //arguable
	    'who\'d',
	    'let\'s'
	  ],

	  //posessive pronouns
	  'PP': [
	    'mine',
	    'something',
	    'none',
	    'anything',
	    'anyone',
	    'theirs',
	    'himself',
	    'ours',
	    'his',
	    'my',
	    'their',
	    'yours',
	    'your',
	    'our',
	    'its',
	    'nothing',
	    'herself',
	    'hers',
	    'themselves',
	    'everything',
	    'myself',
	    'itself',
	    'her', //this one is pretty ambiguous
	    'who',
	    'whom',
	    'whose'
	  ],

	  //personal pronouns (nouns)
	  'PRP': [
	    'it',
	    'they',
	    'i',
	    'them',
	    'you',
	    'she',
	    'me',
	    'he',
	    'him',
	    'ourselves',
	    'us',
	    'we',
	    'thou',
	    'il',
	    'elle',
	    'yourself',
	    '\'em'
	  ],

	  //some manual adverbs (the rest are generated)
	  'RB': [
	    'now',
	    'again',
	    'already',
	    'soon',
	    'directly',
	    'toward',
	    'forever',
	    'apart',
	    'instead',
	    'yes',
	    'alone',
	    'ago',
	    'indeed',
	    'ever',
	    'quite',
	    'perhaps',
	    'where',
	    'then',
	    'here',
	    'thus',
	    'very',
	    'often',
	    'once',
	    'never',
	    'why',
	    'when',
	    'away',
	    'always',
	    'sometimes',
	    'also',
	    'maybe',
	    'so',
	    'just',
	    'well',
	    'several',
	    'such',
	    'randomly',
	    'too',
	    'rather',
	    'abroad',
	    'almost',
	    'anyway',
	    'twice',
	    'aside',
	    'moreover',
	    'anymore',
	    'newly',
	    'damn',
	    'somewhat',
	    'somehow',
	    'meanwhile',
	    'hence',
	    'further',
	    'furthermore'
	  ],

	  //interjections
	  'UH': [
	    'uhh',
	    'uh-oh',
	    'ugh',
	    'sheesh',
	    'eww',
	    'pff',
	    'voila',
	    'oy',
	    'eep',
	    'hurrah',
	    'yuck',
	    'ow',
	    'duh',
	    'oh',
	    'hmm',
	    'yeah',
	    'whoa',
	    'ooh',
	    'whee',
	    'ah',
	    'bah',
	    'gah',
	    'yaa',
	    'phew',
	    'gee',
	    'ahem',
	    'eek',
	    'meh',
	    'yahoo',
	    'oops',
	    'd\'oh',
	    'psst',
	    'argh',
	    'grr',
	    'nah',
	    'shhh',
	    'whew',
	    'mmm',
	    'yay',
	    'uh-huh',
	    'boo',
	    'wow',
	    'nope'
	  ],

	  //nouns that shouldnt be seen as a verb
	  'NN': [
	    'president',
	    'dollar',
	    'student',
	    'patent',
	    'funding',
	    'morning',
	    'banking',
	    'ceiling',
	    'energy',
	    'secretary',
	    'purpose',
	    'friends',
	    'event'
	  ]
	};
	//unpack the compact terms into the misc lexicon..
	const keys = Object.keys(compact);
	for (let i = 0; i < keys.length; i++) {
	  const arr = compact[keys[i]];
	  for (let i2 = 0; i2 < arr.length; i2++) {
	    misc[arr[i2]] = keys[i];
	  }
	}
	// console.log(misc.a);
	module.exports = misc;


/***/ },
/* 182 */
/***/ function(module, exports) {

	//common terms that are multi-word, but one part-of-speech
	//these should not include phrasal verbs, like 'looked out'. These are handled elsewhere.
	module.exports = {
	  'of course': 'RB',
	  'at least': 'RB',
	  'no longer': 'RB',
	  'sort of': 'RB',
	  'at first': 'RB',
	  'once again': 'RB',
	  'once more': 'RB',
	  'up to': 'RB',
	  'by now': 'RB',
	  'all but': 'RB',
	  'just about': 'RB',
	  'on board': 'JJ',
	  'a lot': 'RB',
	  'by far': 'RB',
	  'at best': 'RB',
	  'at large': 'RB',
	  'for good': 'RB',
	  'vice versa': 'JJ',
	  'en route': 'JJ',
	  'for sure': 'RB',
	  'upside down': 'JJ',
	  'at most': 'RB',
	  'per se': 'RB',
	  'at worst': 'RB',
	  'upwards of': 'RB',
	  'en masse': 'RB',
	  'point blank': 'RB',
	  'up front': 'JJ',
	  'in situ': 'JJ',
	  'in vitro': 'JJ',
	  'ad hoc': 'JJ',
	  'de facto': 'JJ',
	  'ad infinitum': 'JJ',
	  'ad nauseam': 'RB',
	  'for keeps': 'JJ',
	  'a priori': 'FW',
	  'et cetera': 'FW',
	  'off guard': 'JJ',
	  'spot on': 'JJ',
	  'ipso facto': 'JJ',
	  'not withstanding': 'RB',
	  'de jure': 'RB',
	  'a la': 'IN',
	  'ad hominem': 'NN',
	  'par excellence': 'RB',
	  'de trop': 'RB',
	  'a posteriori': 'RB',
	  'fed up': 'JJ',
	  'brand new': 'JJ',
	  'old fashioned': 'JJ',
	  'bona fide': 'JJ',
	  'well off': 'JJ',
	  'far off': 'JJ',
	  'straight forward': 'JJ',
	  'hard up': 'JJ',
	  'sui generis': 'JJ',
	  'en suite': 'JJ',
	  'avant garde': 'JJ',
	  'sans serif': 'JJ',
	  'gung ho': 'JJ',
	  'super duper': 'JJ',
	  'new york': 'NN',
	  'new england': 'NN',
	  'new hampshire': 'NN',
	  'new delhi': 'NN',
	  'new jersey': 'NN',
	  'new mexico': 'NN',
	  'united states': 'NN',
	  'united kingdom': 'NN',
	  'great britain': 'NN',
	  'head start': 'NN'
	};


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	//phrasal verbs are two words that really mean one verb.
	//'beef up' is one verb, and not some direction of beefing.
	//by @spencermountain, 2015 mit
	//many credits to http://www.allmyphrasalverbs.com/
	'use strict';
	const verb_conjugate = __webpack_require__(130);

	//start the list with some randoms
	let main = [
	  'be onto',
	  'fall behind',
	  'fall through',
	  'fool with',
	  'get across',
	  'get along',
	  'get at',
	  'give way',
	  'hear from',
	  'hear of',
	  'lash into',
	  'make do',
	  'run across',
	  'set upon',
	  'take aback',
	  'keep from'
	];

	//if there's a phrasal verb "keep on", there's often a "keep off"
	const opposites = {
	  'away': 'back',
	  'in': 'out',
	  'on': 'off',
	  'over': 'under',
	  'together': 'apart',
	  'up': 'down'
	};

	//forms that have in/out symmetry
	const symmetric = {
	  'away': 'blow,bounce,bring,call,come,cut,drop,fire,get,give,go,keep,pass,put,run,send,shoot,switch,take,tie,throw',
	  'in': 'bang,barge,bash,beat,block,book,box,break,bring,burn,butt,carve,cash,check,come,cross,drop,fall,fence,fill,give,grow,hand,hang,head,jack,keep,leave,let,lock,log,move,opt,pack,peel,pull,put,rain,reach,ring,rub,send,set,settle,shut,sign,smash,snow,strike,take,try,turn,type,warm,wave,wean,wear,wheel',
	  'on': 'add,call,carry,catch,count,feed,get,give,go,grind,head,hold,keep,lay,log,pass,pop,power,put,send,show,snap,switch,take,tell,try,turn,wait',
	  'over': 'come,go,look,read,run,talk',
	  'together': 'come,pull,put',
	  'up': 'add,back,beat,bend,blow,boil,bottle,break,bring,buckle,bundle,call,carve,clean,cut,dress,fill,flag,fold,get,give,grind,grow,hang,hold,keep,let,load,lock,look,man,mark,melt,move,pack,pin,pipe,plump,pop,power,pull,put,rub,scale,scrape,send,set,settle,shake,show,sit,slow,smash,square,stand,strike,take,tear,tie,turn,use,wash,wind',
	};
	Object.keys(symmetric).forEach(function(k) {
	  symmetric[k].split(',').forEach(function(s) {
	    //add the given form
	    main.push(s + ' ' + k);
	    //add its opposite form
	    main.push(s + ' ' + opposites[k]);
	  });
	});

	//forms that don't have in/out symmetry
	const asymmetric = {
	  'about': 'bring,fool,gad,go,root',
	  'after': 'go,look,take',
	  'ahead': 'get,go,press',
	  'along': 'bring,move',
	  'apart': 'fall,take',
	  'around': 'ask,boss,bring,call,come,fool,get,horse,joke,lie,mess,play',
	  'away': 'back,carry,file,frighten,hide,wash',
	  'back': 'fall,fight,hit,hold,look,pay,stand,think',
	  'by': 'drop,get,go,stop,swear,swing,tick,zip',
	  'down': 'bog,calm,fall,hand,hunker,jot,knock,lie,narrow,note,pat,pour,run,tone,trickle,wear',
	  'for': 'fend,file,gun,hanker,root,shoot',
	  'forth': 'bring,come',
	  'forward': 'come,look',
	  'in': 'cave,chip,hone,jump,key,pencil,plug,rein,shade,sleep,stop,suck,tie,trade,tuck,usher,weigh,zero',
	  'into': 'look,run',
	  'it': 'go,have',
	  'off': 'auction,be,beat,blast,block,brush,burn,buzz,cast,cool,drop,end,face,fall,fend,frighten,goof,jack,kick,knock,laugh,level,live,make,mouth,nod,pair,pay,peel,read,reel,ring,rip,round,sail,shave,shoot,sleep,slice,split,square,stave,stop,storm,strike,tear,tee,tick,tip,top,walk,work,write',
	  'on': 'bank,bargain,egg,frown,hit,latch,pile,prattle,press,spring,spur,tack,urge,yammer',
	  'out': 'act,ask,back,bail,bear,black,blank,bleed,blow,blurt,branch,buy,cancel,cut,eat,edge,farm,figure,find,fill,find,fish,fizzle,flake,flame,flare,flesh,flip,geek,get,help,hide,hold,iron,knock,lash,level,listen,lose,luck,make,max,miss,nerd,pan,pass,pick,pig,point,print,psych,rat,read,rent,root,rule,run,scout,see,sell,shout,single,sit,smoke,sort,spell,splash,stamp,start,storm,straighten,suss,time,tire,top,trip,trot,wash,watch,weird,whip,wimp,wipe,work,zone,zonk',
	  'over': 'bend,bubble,do,fall,get,gloss,hold,keel,mull,pore,sleep,spill,think,tide,tip',
	  'round': 'get,go',
	  'through': 'go,run',
	  'to': 'keep,see',
	  'up': 'act,beef,board,bone,boot,brighten,build,buy,catch,cheer,cook,end,eye,face,fatten,feel,fess,finish,fire,firm,flame,flare,free,freeze,freshen,fry,fuel,gang,gear,goof,hack,ham,heat,hit,hole,hush,jazz,juice,lap,light,lighten,line,link,listen,live,loosen,make,mash,measure,mess,mix,mock,mop,muddle,open,own,pair,patch,pick,prop,psych,read,rough,rustle,save,shack,sign,size,slice,slip,snap,sober,spark,split,spruce,stack,start,stay,stir,stitch,straighten,string,suck,suit,sum,team,tee,think,tidy,tighten,toss,trade,trip,type,vacuum,wait,wake,warm,weigh,whip,wire,wise,word,write,zip',
	};
	Object.keys(asymmetric).forEach(function(k) {
	  asymmetric[k].split(',').forEach(function(s) {
	    main.push(s + ' ' + k);
	  });
	});

	//at his point all verbs are infinitive. lets make this explicit.
	main = main.reduce(function(h, s) {
	  h[s] = 'VBP';
	  return h;
	}, {});

	//conjugate every phrasal verb. takes ~30ms
	const tags = {
	  present: 'VB',
	  past: 'VBD',
	  future: 'VBF',
	  gerund: 'VBG',
	  infinitive: 'VBP',
	};
	const cache = {}; //cache individual verbs to speed it up
	let split, verb, particle, phrasal;
	Object.keys(main).forEach(function(s) {
	  split = s.split(' ');
	  verb = split[0];
	  particle = split[1];
	  if (cache[verb] === undefined) {
	    cache[verb] = verb_conjugate(verb);
	  }
	  Object.keys(cache[verb]).forEach(function(k) {
	    phrasal = cache[verb][k] + ' ' + particle;
	    if (tags[k]) {
	      main[phrasal] = tags[k];
	    }
	  });
	});

	// console.log(main["wiring up"] === "VBG")
	module.exports = main;


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	const tag_mapping = __webpack_require__(128).tag_mapping;
	//regex patterns and parts of speech],
	module.exports = [
	  ['.[cts]hy$', 'JJ'],
	  ['.[st]ty$', 'JJ'],
	  ['.[lnr]ize$', 'VB'],
	  ['.[gk]y$', 'JJ'],
	  ['.fies$', 'VB'],
	  ['.some$', 'JJ'],
	  ['.[nrtumcd]al$', 'JJ'],
	  ['.que$', 'JJ'],
	  ['.[tnl]ary$', 'JJ'],
	  ['.[di]est$', 'JJS'],
	  ['^(un|de|re)\\-[a-z]..', 'VB'],
	  ['.lar$', 'JJ'],
	  ['[bszmp]{2}y', 'JJ'],
	  ['.zes$', 'VB'],
	  ['.[icldtgrv]ent$', 'JJ'],
	  ['.[rln]ates$', 'VBZ'],
	  ['.[oe]ry$', 'JJ'],
	  ['[rdntkdhs]ly$', 'RB'],
	  ['.[lsrnpb]ian$', 'JJ'],
	  ['.[^aeiou]ial$', 'JJ'],
	  ['.[^aeiou]eal$', 'JJ'],
	  ['.[vrl]id$', 'JJ'],
	  ['.[ilk]er$', 'JJR'],
	  ['.ike$', 'JJ'],
	  ['.ends$', 'VB'],
	  ['.wards$', 'RB'],
	  ['.rmy$', 'JJ'],
	  ['.rol$', 'NN'],
	  ['.tors$', 'NN'],
	  ['.azy$', 'JJ'],
	  ['.where$', 'RB'],
	  ['.ify$', 'VB'],
	  ['.bound$', 'JJ'],
	  ['.ens$', 'VB'],
	  ['.oid$', 'JJ'],
	  ['.vice$', 'NN'],
	  ['.rough$', 'JJ'],
	  ['.mum$', 'JJ'],
	  ['.teen(th)?$', 'CD'],
	  ['.oses$', 'VB'],
	  ['.ishes$', 'VB'],
	  ['.ects$', 'VB'],
	  ['.tieth$', 'CD'],
	  ['.ices$', 'NN'],
	  ['.bles$', 'VB'],
	  ['.pose$', 'VB'],
	  ['.ions$', 'NN'],
	  ['.ean$', 'JJ'],
	  ['.[ia]sed$', 'JJ'],
	  ['.tized$', 'VB'],
	  ['.llen$', 'JJ'],
	  ['.fore$', 'RB'],
	  ['.ances$', 'NN'],
	  ['.gate$', 'VB'],
	  ['.nes$', 'VB'],
	  ['.less$', 'RB'],
	  ['.ried$', 'JJ'],
	  ['.gone$', 'JJ'],
	  ['.made$', 'JJ'],
	  ['.[pdltrkvyns]ing$', 'JJ'],
	  ['.tions$', 'NN'],
	  ['.tures$', 'NN'],
	  ['.ous$', 'JJ'],
	  ['.ports$', 'NN'],
	  ['. so$', 'RB'],
	  ['.ints$', 'NN'],
	  ['.[gt]led$', 'JJ'],
	  ['[aeiou].*ist$', 'JJ'],
	  ['.lked$', 'VB'],
	  ['.fully$', 'RB'],
	  ['.*ould$', 'MD'],
	  ['^-?[0-9]+(.[0-9]+)?$', 'CD'],
	  ['[a-z]*\\-[a-z]*\\-', 'JJ'],
	  ['[a-z]\'s$', 'NNO'],
	  ['.\'n$', 'VB'],
	  ['.\'re$', 'CP'],
	  ['.\'ll$', 'MD'],
	  ['.\'t$', 'VB'],
	  ['.tches$', 'VB'],
	  ['^https?\:?\/\/[a-z0-9]', 'NN'], //the colon is removed in normalisation
	  ['^www\.[a-z0-9]', 'NN'],
	  ['.ize$', 'VB'],
	  ['.[^aeiou]ise$', 'VB'],
	  ['.[aeiou]te$', 'VB'],
	  ['.ea$', 'NN'],
	  ['[aeiou][pns]er$', 'NN'],
	  ['.ia$', 'NN'],
	  ['.sis$', 'NN'],
	  ['.[aeiou]na$', 'NN'],
	  ['.[^aeiou]ity$', 'NN'],
	  ['.[^aeiou]ium$', 'NN'],
	  ['.[^aeiou][ei]al$', 'JJ'],
	  ['.ffy$', 'JJ'],
	  ['.[^aeiou]ic$', 'JJ'],
	  ['.(gg|bb|zz)ly$', 'JJ'],
	  ['.[aeiou]my$', 'JJ'],
	  ['.[aeiou]ble$', 'JJ'],
	  ['.[^aeiou]ful$', 'JJ'],
	  ['.[^aeiou]ish$', 'JJ'],
	  ['.[^aeiou]ica$', 'NN'],
	  ['[aeiou][^aeiou]is$', 'NN'],
	  ['[^aeiou]ard$', 'NN'],
	  ['[^aeiou]ism$', 'NN'],
	  ['.[^aeiou]ity$', 'NN'],
	  ['.[^aeiou]ium$', 'NN'],
	  ['.[lstrn]us$', 'NN'],
	  ['..ic$', 'JJ'],
	  ['[aeiou][^aeiou]id$', 'JJ'],
	  ['.[^aeiou]ish$', 'JJ'],
	  ['.[^aeiou]ive$', 'JJ'],
	  ['[ea]{2}zy$', 'JJ'],
	].map(function(a) {
	  return {
	    reg: new RegExp(a[0], 'i'),
	    pos: tag_mapping[a[1]]
	  };
	});


/***/ },
/* 185 */
/***/ function(module, exports) {

	module.exports = [
	  {
	    'before': ['Determiner', '?'],
	    'after': ['Determiner', 'Noun']
	  },
	  {
	    'before': ['Determiner', 'Adjective', 'Verb'],
	    'after': ['Noun', 'Noun', 'Noun']
	  },
	  {
	    'before': ['Determiner', 'Adverb', 'Adjective', '?'],
	    'after': ['Determiner', 'Adverb', 'Adjective', 'Noun'],
	  },
	  {
	    'before': ['Unknown', 'Determiner', 'Noun'],
	    'after': ['Verb', 'Determiner', 'Noun'],
	  },
	  //posessive hints
	  {
	    'before': ['Posessive', 'Unknown'],
	    'after': ['Posessive', 'Noun'],
	  },
	  {
	    'before': ['Posessive', 'Verb'],
	    'after': ['Posessive', 'Noun'],
	  },
	  {
	    'before': ['Unknown', 'Posessive', 'Noun'],
	    'after': ['Verb', 'Posessive', 'Noun'],
	  },
	  //copula hints
	  {
	    'before': ['Copula', 'Unknown'],
	    'after': ['Copula', 'Adjective'], // not sure
	  },
	  {
	    'before': ['Copula', 'Adverb', '?'],
	    'after': ['Copula', 'Adverb', 'Adjective'], // not sure
	  },
	  //preposition hints
	  {
	    'before': ['Unknown', 'Preposition'],
	    'after': ['Verb', 'Preposition'],
	  },
	  //conjunction hints, like lists (a little sloppy)
	  {
	    'before': ['Adverb', 'Conjunction', 'Adverb'],
	    'after': ['Adverb', 'Adverb', 'Adverb'],
	  },
	  {
	    'before': ['Verb', 'Conjunction', 'Verb'],
	    'after': ['Verb', 'Verb', 'Verb'],
	  },
	  {
	    'before': ['Noun', 'Conjunction', 'Noun'],
	    'after': ['Noun', 'Noun', 'Noun'],
	  },
	  {
	    'before': ['Adjective', 'Conjunction', 'Adjective'],
	    'after': ['Adjective', 'Adjective', 'Adjective'],
	  },
	  {
	    'before': ['Unknown', 'Conjunction', 'Verb'],
	    'after': ['Verb', 'Conjunction', 'Verb'],
	  },
	  {
	    'before': ['Verb', 'Conjunction', 'Unknown'],
	    'after': ['Verb', 'Conjunction', 'Verb'],
	  },
	  //adverb hints
	  {
	    'before': ['Noun', 'Adverb', 'Noun'],
	    'after': ['Noun', 'Adverb', 'Verb'],
	  },
	  //pronoun hints
	  {
	    'before': ['Unknown', 'Pronoun'],
	    'after': ['Verb', 'Pronoun'],
	  },
	  //modal hints
	  {
	    'before': ['Modal', 'Unknown'],
	    'after': ['Modal', 'Verb'],
	  },
	  {
	    'before': ['Modal', 'Adverb', '?'],
	    'after': ['Modal', 'Adverb', 'Verb'],
	  },
	  //ambiguous dates (march/may)
	  {
	    'before': ['Modal', 'Value'],
	    'after': ['Modal', 'Verb'],
	  },
	  {
	    'before': ['Adverb', 'Value'],
	    'after': ['Adverb', 'Verb'],
	  }
	];


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	//fancy combining/chunking of terms
	'use strict';
	const pos = __webpack_require__(128);

	const shouldLumpThree = function(a, b, c) {
	  if (!a || !b || !c) {
	    return false;
	  }
	  const lump_rules = [
	    {
	      condition: (a.pos.Noun && b.text === '&' && c.pos.Noun), //John & Joe's
	      result: 'Person',
	    },
	    {
	      condition: (a.pos.Noun && b.text === 'N' && c.pos.Noun), //John N Joe's
	      result: 'Person',
	    },
	    {
	      condition: (a.pos.Date && b.normal === 'the' && c.pos.Value), //June the 5th
	      result: 'Person',
	    },
	    {
	      condition: (a.is_capital() && b.normal === 'of' && c.is_capital()), //President of Mexico
	      result: 'Noun',
	    },
	    {
	      condition: (a.text.match(/^["']/) && !b.text.match(/["']/) && c.text.match(/["']$/)), //three-word quote
	      result: 'Noun',
	    },
	    {
	      condition: (a.normal === 'will' && b.normal === 'have' && b.pos.Verb), //will have walk
	      result: 'FutureTense',
	    },
	  ];
	  for(let i = 0; i < lump_rules.length; i++) {
	    if (lump_rules[i].condition) {
	      return lump_rules[i].result;
	    }
	  }
	  return false;
	};

	const shouldLumpTwo = function(a, b) {
	  if (!a || !b) {
	    return false;
	  }
	  const lump_rules = [
	    {
	      condition: (a.pos.Person && b.pos.Honourific || a.pos.Honourific && b.pos.Person), //"John sr."
	      result: 'Person',
	    },
	    {
	      condition: (a.pos.Honourific && b.is_capital()), //'Dr. John
	      result: 'Person',
	    },
	    {
	      condition: (a.pos.Person && b.is_capital()), //'Person, Capital -> Person'
	      result: 'Person',
	    },
	    {
	      condition: (a.pos.Date && b.pos.Value), //June 4
	      result: 'Date',
	    },
	    {
	      condition: (a.pos.Value && b.pos.Noun), //5 books
	      result: 'Value',
	    },
	    {
	      condition: (a.is_capital() && b.pos['Organisation'] || b.is_capital() && a.pos['Organisation']), //Canada Inc
	      result: 'Organisation',
	    },
	    {
	      condition: (a.text.match(/^["']/) && b.text.match(/["']$/)), //two-word quote
	      result: 'Noun',
	    },
	    {
	      condition: (a.normal === 'will' && b.pos.Verb), //will walk (perfect)
	      result: 'PerfectTense',
	    },
	    {
	      condition: (a.normal.match(/^will ha(ve|d)$/) && b.pos.Verb), //will have walked (pluperfect)
	      result: 'PluperfectTense',
	    },
	  ];
	  for(let i = 0; i < lump_rules.length; i++) {
	    if (lump_rules[i].condition) {
	      return lump_rules[i].result;
	    }
	  }
	  return false;
	};


	const fancy_lumping = function(terms) {
	  for(let i = 1; i < terms.length; i++) {
	    let a = terms[i - 1];
	    let b = terms[i];
	    let c = terms[i + 1];

	    // rules for lumping two terms
	    let tag = shouldLumpTwo(a, b);
	    if (tag !== false) {
	      let Cl = pos.classMapping[tag] || pos.Term;
	      terms[i] = new Cl(a.text + ' ' + b.text, tag);
	      terms[i].reason = 'lumped(' + terms[i].reason + ')';
	      terms[i - 1] = null;
	      continue;
	    }

	    // rules for lumpting three terms
	    if (c) {
	      tag = shouldLumpThree(a, b, c);
	      if (tag !== false) {
	        let Cl = pos.classMapping[tag] || pos.Term;
	        terms[i - 1] = new Cl([a.text, b.text, c.text].join(' '), tag);
	        terms[i - 1].reason = 'lumped(' + terms[i].reason + ')';
	        terms[i] = null;
	        terms[i + 1] = null;
	        continue;
	      }
	    }

	  }
	  //remove killed terms
	  terms = terms.filter(function(t) {
	    return t !== null;
	  });
	  return terms;
	};


	module.exports = fancy_lumping;


/***/ },
/* 187 */
/***/ function(module, exports) {

	'use strict';

	//some prepositions are clumped onto the back of a verb "looked for", "looks at"
	//they should be combined with the verb, sometimes.
	//does not handle seperated phrasal verbs ('take the coat off' -> 'take off')


	let particles = ['in', 'out', 'on', 'off', 'behind', 'way', 'with', 'of', 'do', 'away', 'across', 'ahead', 'back', 'over', 'under', 'together', 'apart', 'up', 'upon', 'aback', 'down', 'about', 'before', 'after', 'around', 'to', 'forth', 'round', 'through', 'along', 'onto'];
	particles = particles.reduce(function (h, s) {
	  h[s] = true;
	  return h;
	}, {});

	//combine ['blew','up'] -> 'blew up'
	let phrasal_verbs = function(terms) {
	  for(let i = 0; i < terms.length - 1; i++) {
	    if (terms[i] && terms[i].pos['Verb'] && particles[terms[i + 1].normal]) {
	      //don't do 'is in'
	      if (terms[i].pos['Copula']) {
	        continue;
	      }
	      terms[i].text = terms[i].text + ' ' + terms[i + 1].text;
	      terms[i].reason = 'phrasal(' + terms[i].reason + ')';
	      terms[i + 1] = null;
	      terms[i].normalize();
	      terms[i].conjugate();
	    }
	  }
	  //remove killed-off ones
	  terms = terms.filter(function(t) {
	    return t !== null;
	  });
	  return terms;
	};

	module.exports = phrasal_verbs;


/***/ },
/* 188 */
/***/ function(module, exports) {

	'use strict';

	//boolean if sentence has

	// "[copula] [pastTense] by"
	// "[pastParticiple] by"
	const passive_voice = function(s) {
	  let terms = s.terms;
	  for(let i = 0; i < terms.length - 2; i++) {
	    if (terms[i].pos['Copula'] && terms[i + 1].pos['Verb'] && terms[i + 2].normal === 'by') {
	      //don't do 'june was approaching by then'
	      if (terms[i + 1].pos['Gerund']) {
	        continue;
	      }
	      return true;
	    }
	  }
	  return false;
	};

	module.exports = passive_voice;


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const fns = __webpack_require__(125);
	const pos = __webpack_require__(128);
	//negate makes s sentence mean s opposite thing.
	const negate = function(s) {
	  if (!s) {
	    return '';
	  }
	  //these are cheap ways to negate s meaning
	  // ('none' is ambiguous because it could mean (all or some) )
	  const logic_negate = {
	    //some logical ones work
	    'everyone': 'no one',
	    'everybody': 'nobody',
	    'someone': 'no one',
	    'somebody': 'nobody',
	    // everything:"nothing",
	    'always': 'never',
	    //copulas
	    'is': 'isn\'t',
	    'are': 'aren\'t',
	    'was': 'wasn\'t',
	    'will': 'won\'t',
	    //modals
	    'didn\'t': 'did',
	    'wouldn\'t': 'would',
	    'couldn\'t': 'could',
	    'shouldn\'t': 'should',
	    'can\'t': 'can',
	    'won\'t': 'will',
	    'mustn\'t': 'must',
	    'shan\'t': 'shall',
	    'shant': 'shall',

	    'did': 'didn\'t',
	    'would': 'wouldn\'t',
	    'could': 'couldn\'t',
	    'should': 'shouldn\'t',
	    'can': 'can\'t',
	    'must': 'mustn\'t'
	  };
	  //loop through each term..
	  for (let i = 0; i < s.terms.length; i++) {
	    const tok = s.terms[i];
	    // handle ambiguous contractions
	    if (tok.reason === 'ambiguous_contraction') {
	      tok.text = tok.normal;
	    }

	    //turn 'is' into 'isn't', etc - make sure 'is' isnt followed by a 'not', too
	    if (logic_negate[tok.normal] && (!s.terms[i + 1] || s.terms[i + 1].normal !== 'not')) {
	      tok.text = logic_negate[tok.normal];
	      tok.normal = logic_negate[tok.normal];
	      if (tok.capitalised) {
	        tok.text = fns.titlecase(tok.text);
	      }
	      return s;
	    }

	    // find s first verb..
	    if (tok instanceof pos.Verb) {
	      // if verb is already negative, make it not negative
	      if (tok.isNegative()) {
	        if (s.terms[i + 1] && s.terms[i + 1].normal === 'not') {
	          s.terms.splice(i + 1, 1);
	        }
	        return s;
	      }

	      //turn future-tense 'will go' into "won't go"
	      if (tok.normal.match(/^will /i)) {
	        tok.text = tok.text.replace(/^will /i, 'won\'t ');
	        tok.normal = tok.text;
	        if (tok.capitalised) {
	          tok.text = fns.titlecase(tok.text);
	        }
	        return s;
	      }
	      // - INFINITIVE-
	      // 'i walk' -> "i don't walk"
	      if (tok.pos['infinitive'] && tok.conjugation() !== 'future') {
	        tok.text = 'don\'t ' + (tok.conjugate().infinitive || tok.text);
	        tok.normal = tok.text.toLowerCase();
	        return s;
	      }
	      // - GERUND-
	      // if verb is gerund, 'walking' -> "not walking"
	      if (tok.conjugation() === 'gerund') {
	        tok.text = 'not ' + tok.text;
	        tok.normal = tok.text.toLowerCase();
	        return s;
	      }
	      // - PAST-
	      // if verb is past-tense, 'he walked' -> "he did't walk"
	      if (tok.tense === 'past') {
	        tok.text = 'didn\'t ' + (tok.analysis.conjugate().infinitive || tok.text);
	        tok.normal = tok.text.toLowerCase();
	        return s;
	      }
	      // - PRESENT-
	      // if verb is present-tense, 'he walks' -> "he doesn't walk"
	      if (tok.conjugations.present) {
	        tok.text = 'doesn\'t ' + (tok.conjugate().infinitive || tok.text);
	        tok.normal = tok.text.toLowerCase();
	        return s;
	      }
	      // - FUTURE-
	      // if verb is future-tense, 'will go' -> won't go. easy-peasy
	      if (tok.conjugations.future) {
	        if (tok.normal === 'will') {
	          tok.normal = 'won\'t';
	          tok.text = 'won\'t';
	        } else {
	          tok.text = tok.text.replace(/^will /i, 'won\'t ');
	          tok.normal = tok.normal.replace(/^will /i, 'won\'t ');
	        }
	        if (tok.capitalised) {
	          tok.text = fns.titlecase(tok.text);
	        }
	        return s;
	      }

	      return s;
	    }
	  }

	  return s;
	};

	module.exports = negate;


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	//split a string into all possible parts
	const fns = __webpack_require__(125);

	//n-gram takes a list of pre-cleaned terms, and makes no assumptions
	const ngram = function(terms, options) {
	  options = options || {};
	  const min_count = options.min_count || 1; // minimum hit-count
	  const max_size = options.max_size || 5; // maximum gram count
	  const keys = [null];
	  let results = [];
	  //prepare the keys object
	  for (let i = 1; i <= max_size; i++) {
	    keys.push({});
	  }
	  // Create a hash for counting..
	  const textlen = terms.length;
	  for (let i = 0; i < textlen; i++) {
	    let s = terms[i];
	    keys[1][s] = (keys[1][s] || 0) + 1;
	    for (let j = 2; j <= max_size; j++) {
	      if (i + j <= textlen) {
	        s += ' ' + terms[i + j - 1];
	        keys[j][s] = (keys[j][s] || 0) + 1;
	      } else {
	        break;
	      }
	    }
	  }
	  // map the hash to an array for sorting
	  for (let k = 1; k < max_size; k++) {
	    results[k] = [];
	    const key = keys[k];
	    const words = Object.keys(keys[k]);
	    for (let i = 0; i < words.length; i++) {
	      const word = words[i];
	      if (key[word] >= min_count) {
	        results[k].push({
	          'word': word,
	          'count': key[word],
	          'size': k
	        });
	      }
	    }
	  }
	  //post-process + sort
	  results = fns.compact(results);
	  results = results.map(function(r) {
	    r = r.sort(function(a, b) {
	      return b.count - a.count;
	    });
	    return r;
	  });
	  return results;
	};

	// console.log(ngram("hi dr nick! dr nick!".split(" ")))

	module.exports = ngram;


/***/ },
/* 191 */,
/* 192 */
/***/ function(module, exports) {

	'use strict';

	var ElUpdater = Updater.ElementUpdater;

	//var wordnet = new natural.WordNet();
	/*
	wordnet.lookup('node', function(results) {
	    results.forEach(function(result) {
	        console.log('------------------------------------');
	        console.log(result.synsetOffset);
	        console.log(result.pos);
	        console.log(result.lemma);
	        console.log(result.synonyms);
	        console.log(result.pos);
	        console.log(result.gloss);
	    });
	});
	*/
	var input = makeComponent({
	  tag: 'input',
	  placeholder: 'type whatever you want',
	  className: 'primary-input'
	});

	var inputText = new Variable();
	var outputContents = new Variable();
	var output = makeComponent({
	  tag: 'div',
	  className: 'primary-output'
	});

	init();

	function init() {
	  new ElUpdater({
	    variable: inputText,
	    element: output,
	    renderUpdate: function renderUpdate(text) {
	      console.log(text, output);
	      output.innerHTML = text;
	    }
	  });
	  $(input).on('keydown', function () {
	    return inputText.put(input.value);
	  });
	}

	function makeComponent(opts) {
	  var node = document.createElement(opts.tag ? opts.tag : 'div');
	  if (opts.id) {
	    node.id = opts.id;
	  }
	  if (opts.className) {
	    node.className = opts.className;
	  }
	  if (opts.name) {
	    node.name = opts.name;
	  }
	  if (opts.placeholder) {
	    node.placeholder = opts.placeholder;
	  }
	  if (opts.html) {
	    node.innerHTML = opts.html;
	  }
	  if (opts.text) {
	    node.textContent = opts.text;
	  }
	  var parent = opts.parent ? opts.parent : document.body;
	  console.log('Created node:', node);
	  parent.appendChild(node);
	  return node;
	}

	var CONVERSATION_PATH = {
	  '1': {
	    text: '1',
	    '1.1': {
	      text: '1',
	      '1.1.1': ''
	    }
	  },
	  '2': {
	    text: '2',
	    '2.1': {
	      text: '2',
	      '2.1.1': ''
	    }
	  }
	};

/***/ }
/******/ ]);